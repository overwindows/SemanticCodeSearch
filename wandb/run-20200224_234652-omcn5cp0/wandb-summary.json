{
    "_step": 26,
    "_timestamp": 1582588941.1369438,
    "train-loss": 0.9908594754007127,
    "_runtime": 930.3916974067688,
    "train-mrr": 0.5046275495741103,
    "train-time-sec": 19.249054193496704,
    "epoch": 1,
    "val-mrr": 0.2118039905676681,
    "val-loss": 1.0419189313824258,
    "val-time-sec": 6.443822860717773,
    "best_val_mrr_loss": 1.0419189313824258,
    "best_val_mrr": 0.2118039905676681,
    "best_epoch": 1,
    "Examples-Test": {
        "_type": "table",
        "columns": [
            "Rank",
            "Language",
            "Query",
            "Code"
        ],
        "data": [
            [
                302,
                "java",
                "SetupHelper.generateProperties",
                "```java\npublic Properties generateProperties() {\n\t\tProperties result = new Properties();\n\n\t\tif (proto == null) {\n\t\t\tthrow new RuntimeException(\"no protocol selected\");\n\t\t}\n\n\t\tString protocol = proto.toLowerCase();\n\n\t\tsetProperty(result, \"mail.store.protocol\", protocol);\n\t\tsetProperty(result, \"mail.\" + protocol + \".host\", host);\n\t\tsetProperty(result, \"mail.username\", user);\n\t\tsetProperty(result, \"mail.password\", pass);\n\n\t\tif (port != 0) {\n\t\t\tsetProperty(result, \"mail.\" + protocol + \".port\", Integer.toString(port));\n\t\t}\n\n\t\tif (ssl) {\n\t\t\tsetProperty(result, \"mail.\" + protocol + \".ssl\", \"true\");\n\t\t}\n\n\t\tif (protocol.equals(\"pop3\")) {\n\t\t\tsetProperty(result, \"mail.inbox\", \"INBOX\");\n\t\t} else {\n\t\t\tif (inbox == null) {\n\t\t\t\tthrow new RuntimeException(\"no inbox selected\");\n\t\t\t}\n\n\t\t\tsetProperty(result, \"mail.inbox\", inbox);\n\t\t}\n\n\t\treturn result;\n\t}\n```"
            ],
            [
                280,
                "java",
                "ComplexNDArrayUtil.truncate",
                "```java\npublic static IComplexNDArray truncate(IComplexNDArray nd, int n, int dimension) {\n\n\n        if (nd.isVector()) {\n            IComplexNDArray truncated = Nd4j.createComplex(new int[] {1, n});\n            for (int i = 0; i < n; i++)\n                truncated.putScalar(i, nd.getComplex(i));\n\n            return truncated;\n        }\n\n\n        if (nd.size(dimension) > n) {\n            long[] shape = ArrayUtil.copy(nd.shape());\n            shape[dimension] = n;\n            IComplexNDArray ret = Nd4j.createComplex(shape);\n            IComplexNDArray ndLinear = nd.linearView();\n            IComplexNDArray retLinear = ret.linearView();\n            for (int i = 0; i < ret.length(); i++)\n                retLinear.putScalar(i, ndLinear.getComplex(i));\n            return ret;\n\n        }\n\n        return nd;\n\n    }\n```"
            ],
            [
                140,
                "go",
                "RemovedProperty",
                "```go\nfunc (dj *DeltaJob) RemovedProperty(name string, p *enaml.JobManifestProperty) {\n\tdj.RemovedProperties[name] = *p\n}\n```"
            ],
            [
                499,
                "php",
                "ProcessPool.get",
                "```php\npublic function get($timeout = null, $nullOnTimeout = false)\n    {\n        $startTime = microtime(true);\n        while ($this->getPending()) {\n            // return the next result\n            if ($this->hasResult()) {\n                return $this->getResult();\n            }\n\n            // wait for the next result\n            $ready = $this->wait($timeout);\n            if (is_array($ready)) {\n                foreach ($ready as $socket) {\n                    $res = self::socket_fetch($socket);\n                    if ($res !== null) {\n                        $this->results[] = $res;\n                        $this->count++;\n                    }\n                }\n                if ($this->hasResult()) {\n                    return $this->getResult();\n                }\n            }\n\n            // timed out?\n            if ($timeout and microtime(true) - $startTime > $timeout) {\n                if ($nullOnTimeout) {\n                    return null;\n                }\n                throw new ProcessPoolException(\"Timeout\");\n            }\n        }\n    }\n```"
            ],
            [
                695,
                "javascript",
                "makePersp",
                "```javascript\nfunction makePersp(hfov, aspect, znear, zfar) {\n        var fovy = 2 * Math.atan(Math.tan(hfov/2) * gl.drawingBufferHeight / gl.drawingBufferWidth);\n        var f = 1 / Math.tan(fovy/2);\n        return [\n            f/aspect,   0,  0,  0,\n                   0,   f,  0,  0,\n                   0,   0,  (zfar+znear)/(znear-zfar), (2*zfar*znear)/(znear-zfar),\n                   0,   0, -1,  0\n        ];\n    }\n```"
            ],
            [
                45,
                "python",
                "MinHashLSHForest.add",
                "```python\ndef add(self, key, minhash):\n        '''\n        Add a unique key, together\n        with a MinHash (or weighted MinHash) of the set referenced by the key.\n\n        Note:\n            The key won't be searchbale until the\n            :func:`datasketch.MinHashLSHForest.index` method is called.\n\n        Args:\n            key (hashable): The unique identifier of the set.\n            minhash (datasketch.MinHash): The MinHash of the set.\n        '''\n        if len(minhash) < self.k*self.l:\n            raise ValueError(\"The num_perm of MinHash out of range\")\n        if key in self.keys:\n            raise ValueError(\"The given key has already been added\")\n        self.keys[key] = [self._H(minhash.hashvalues[start:end])\n                for start, end in self.hashranges]\n        for H, hashtable in zip(self.keys[key], self.hashtables):\n            hashtable[H].append(key)\n```"
            ],
            [
                133,
                "python",
                "PJFExternalFuzzer.execute",
                "```python\ndef execute(self, obj):\n        \"\"\"\n        Perform the actual external fuzzing, you may replace this method in order to increase performance\n        \"\"\"\n        try:\n            if self.config.stdin:\n                    self.spawn(self.config.command, stdin_content=obj, stdin=True, timeout=1)\n            else:\n                if \"@@\" not in self.config.command:\n                    raise PJFMissingArgument(\"Missing @@ filename indicator while using non-stdin fuzzing method\")\n                for x in self.config.command:\n                    if \"@@\" in x:\n                        self.config.command[self.config.command.index(x)] = x.replace(\"@@\", obj)\n                self.spawn(self.config.command, timeout=2)\n            self.logger.debug(\"[{0}] - PJFExternalFuzzer successfully completed\".format(time.strftime(\"%H:%M:%S\")))\n            return self._out\n        except KeyboardInterrupt:\n            return \"\"\n        except Exception as e:\n            raise PJFBaseException(e.message if hasattr(e, \"message\") else str(e))\n```"
            ],
            [
                1,
                "go",
                "Set",
                "```go\nfunc (o *ListComplex64Option) Set(value string) error {\n\tval := Complex64Option{}\n\tval.Set(value)\n\t*o = append(*o, val)\n\treturn nil\n}\n```"
            ],
            [
                69,
                "ruby",
                "S3.Bucket.destroy",
                "```ruby\ndef destroy(force = false)\n      if objects.any?\n\t      if force\n           objects.destroy_all\n           delete_bucket\n           true\n        else\n          raise\n        end\n      else\n        delete_bucket\n        true\n      end\n    end\n```"
            ],
            [
                272,
                "java",
                "GeoPackageImpl.integrityCheck",
                "```java\nprivate Cursor integrityCheck(Cursor cursor) {\n        if (cursor.moveToNext()) {\n            String value = cursor.getString(0);\n            if (value.equals(\"ok\")) {\n                cursor.close();\n                cursor = null;\n            }\n        }\n        return cursor;\n    }\n```"
            ],
            [
                486,
                "javascript",
                "gotOption",
                "```javascript\nfunction gotOption (option) {\n    if (map[option]) {\n      option = map[option]\n      var name = option[0]\n      // Assume a boolean, and set to true because the argument is present.\n      var value = true\n      // If it takes arguments, override with a value.\n      var count = option[2]\n      while (count--) {\n        value = argv[++index]\n        if (argv.length === index) {\n          return cli.error('The \"' + name + '\" option requires an argument.')\n        }\n      }\n      // If it needs type conversion, do it.\n      var type = option[1]\n      if (type === 'Array') {\n        value = value.split(',')\n      } else if (type === 'RegExp') {\n        try {\n          value = new RegExp(value)\n        } catch (e) {\n          return cli.error('The \"' + name + '\" option received an invalid expression: \"' + value + '\".')\n        }\n      } else if (type === 'Number') {\n        var number = value * 1\n        if (isNaN(number)) {\n          return cli.error('The \"' + name + '\" option received a non-numerical argument: \"' + value + '\".')\n        }\n      }\n      args[name] = value\n    } else {\n      return cli.error('Unknown option: \"' + option + '\".')\n    }\n  }\n```"
            ],
            [
                389,
                "php",
                "AddNewProcess.pageHandle",
                "```php\npublic function pageHandle($event)\n    {\n        $page = Page::firstOrNew(['id' => $event->pageId]);\n        $this->saveDynamicData($page, $event->data);\n    }\n```"
            ],
            [
                63,
                "java",
                "LossFunctions.mcxent",
                "```java\npublic static LossInfo mcxent(String outputName, SDVariable predictions, SDVariable label, SDVariable weights,\n                                  Reduction reduction, int... dimensions){\n        LossInfo.Builder b = validate(\"mcxent\", predictions, label, reduction);\n        SameDiff sd = predictions.getSameDiff();\n\n        if(weights == null){\n            weights = sd.one(\"mcxent_loss_weights\", SCALAR);\n        }\n\n        String name = (reduction == Reduction.NONE ? outputName : null);\n        SDVariable weightedLogProd = sd.log(predictions).mul(label).mul(name, weights);\n\n        return doReduce(sd, outputName, false, b, reduction, weightedLogProd, label, weights, dimensions);\n    }\n```"
            ],
            [
                174,
                "java",
                "JacORBSubsystemParser.parseSecurityConfig_1_0",
                "```java\nprivate void parseSecurityConfig_1_0(XMLExtendedStreamReader reader, ModelNode node) throws XMLStreamException {\n        // parse all security attributes.\n        EnumSet<Attribute> expectedAttributes = EnumSet.of(Attribute.SECURITY_SUPPORT_SSL,\n                Attribute.SECURITY_ADD_COMPONENT_INTERCEPTOR, Attribute.SECURITY_CLIENT_SUPPORTS,\n                Attribute.SECURITY_CLIENT_REQUIRES, Attribute.SECURITY_SERVER_SUPPORTS, Attribute.SECURITY_SERVER_REQUIRES,\n                Attribute.SECURITY_USE_DOMAIN_SF, Attribute.SECURITY_USE_DOMAIN_SSF);\n\n        EnumSet<Attribute> parsedAttributes = EnumSet.noneOf(Attribute.class);\n\n        for (int i = 0; i < reader.getAttributeCount(); i++) {\n            requireNoNamespaceAttribute(reader, i);\n            String attrValue = reader.getAttributeValue(i);\n            final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n            // check for unexpected attributes.\n            if (!expectedAttributes.contains(attribute))\n                throw unexpectedAttribute(reader, i);\n            // check for duplicate attributes.\n            if (!parsedAttributes.add(attribute)) {\n                throw duplicateAttribute(reader, attribute.getLocalName());\n            }\n\n            switch (attribute) {\n                // check the attributes that need to be converted from int to string.\n                case SECURITY_CLIENT_SUPPORTS:\n                case SECURITY_CLIENT_REQUIRES:\n                case SECURITY_SERVER_SUPPORTS:\n                case SECURITY_SERVER_REQUIRES:\n                    SSLConfigValue value = SSLConfigValue.fromValue(attrValue);\n                    if (value == null)\n                        throw JacORBLogger.ROOT_LOGGER.invalidSSLConfig(attrValue, reader.getLocation());\n                    attrValue = value.toString();\n                default:\n                    SimpleAttributeDefinition definition = ((SimpleAttributeDefinition) JacORBSubsystemDefinitions.\n                        valueOf(attribute.getLocalName()));\n                    // a null definition represents an attribute that has been deprecated and is no longer used.\n                    if (definition != null)\n                        definition.parseAndSetParameter(attrValue, node, reader);\n            }\n        }\n\n        // the security element doesn't have child elements.\n        requireNoContent(reader);\n    }\n```"
            ],
            [
                329,
                "python",
                "flush_figures",
                "```python\ndef flush_figures():\n    \"\"\"Send all figures that changed\n\n    This is meant to be called automatically and will call show() if, during\n    prior code execution, there had been any calls to draw_if_interactive.\n    \n    This function is meant to be used as a post_execute callback in IPython,\n    so user-caused errors are handled with showtraceback() instead of being\n    allowed to raise.  If this function is not called from within IPython,\n    then these exceptions will raise.\n    \"\"\"\n    if not show._draw_called:\n        return\n    \n    if InlineBackend.instance().close_figures:\n        # ignore the tracking, just draw and close all figures\n        try:\n            return show(True)\n        except Exception as e:\n            # safely show traceback if in IPython, else raise\n            try:\n                get_ipython\n            except NameError:\n                raise e\n            else:\n                get_ipython().showtraceback()\n                return\n    try:\n        # exclude any figures that were closed:\n        active = set([fm.canvas.figure for fm in Gcf.get_all_fig_managers()])\n        for fig in [ fig for fig in show._to_draw if fig in active ]:\n            try:\n                send_figure(fig)\n            except Exception as e:\n                # safely show traceback if in IPython, else raise\n                try:\n                    get_ipython\n                except NameError:\n                    raise e\n                else:\n                    get_ipython().showtraceback()\n                    break\n    finally:\n        # clear flags for next round\n        show._to_draw = []\n        show._draw_called = False\n```"
            ],
            [
                158,
                "php",
                "Operation.execute",
                "```php\npublic function execute(Closure $closure)\n    {\n        $temporaryFile = tempnam(sys_get_temp_dir(), 'covert');\n\n        $temporaryContent = '<?php'.PHP_EOL.PHP_EOL;\n\n        if ($this->autoload !== false) {\n            $temporaryContent .= \"require('$this->autoload');\".PHP_EOL.PHP_EOL;\n        }\n\n        $temporaryContent .= FunctionReflection::toString($closure).PHP_EOL.PHP_EOL;\n        $temporaryContent .= 'unlink(__FILE__);'.PHP_EOL.PHP_EOL;\n        $temporaryContent .= 'exit;';\n\n        file_put_contents($temporaryFile, $temporaryContent);\n\n        $this->processId = $this->executeFile($temporaryFile);\n\n        return $this;\n    }\n```"
            ],
            [
                7,
                "go",
                "UnmarshalJSON",
                "```go\nfunc (v *VisualViewport) UnmarshalJSON(data []byte) error {\n\tr := jlexer.Lexer{Data: data}\n\teasyjsonC5a4559bDecodeGithubComChromedpCdprotoPage1(&r, v)\n\treturn r.Error()\n}\n```"
            ],
            [
                92,
                "java",
                "ObjectFactory.createObjektnrIntern",
                "```java\n@XmlElementDecl(namespace = \"\", name = \"objektnr_intern\")\n    public JAXBElement<String> createObjektnrIntern(String value) {\n        return new JAXBElement<String>(_ObjektnrIntern_QNAME, String.class, null, value);\n    }\n```"
            ],
            [
                961,
                "php",
                "ShoppingCart.add",
                "```php\npublic function add(Buyable $buyable, $quantity = 1, $filter = [])\n    {\n        $order = $this->findOrMake();\n\n        // If an extension throws an exception, error out\n        try {\n            $order->extend('beforeAdd', $buyable, $quantity, $filter);\n        } catch (Exception $exception) {\n            return $this->error($exception->getMessage());\n        }\n\n        if (!$buyable) {\n            return $this->error(_t(__CLASS__ . '.ProductNotFound', 'Product not found.'));\n        }\n\n        $item = $this->findOrMakeItem($buyable, $quantity, $filter);\n        if (!$item) {\n            return false;\n        }\n        if (!$item->_brandnew) {\n            $item->Quantity += $quantity;\n        } else {\n            $item->Quantity = $quantity;\n        }\n\n        // If an extension throws an exception, error out\n        try {\n            $order->extend('afterAdd', $item, $buyable, $quantity, $filter);\n        } catch (Exception $exception) {\n            return $this->error($exception->getMessage());\n        }\n\n        $item->write();\n        $this->message(_t(__CLASS__ . '.ItemAdded', 'Item has been added successfully.'));\n\n        return $item;\n    }\n```"
            ],
            [
                44,
                "go",
                "ReadAll",
                "```go\nfunc (a *GCSArtifact) ReadAll() ([]byte, error) {\n\tsize, err := a.Size()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error getting artifact size: %v\", err)\n\t}\n\tif size > a.sizeLimit {\n\t\treturn nil, lenses.ErrFileTooLarge\n\t}\n\treader, err := a.handle.NewReader(a.ctx)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error getting artifact reader: %v\", err)\n\t}\n\tdefer reader.Close()\n\tp, err := ioutil.ReadAll(reader)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error reading all from artifact: %v\", err)\n\t}\n\treturn p, nil\n}\n```"
            ],
            [
                60,
                "python",
                "D.get_params",
                "```python\ndef get_params(self):\n        \"\"\"\n        Returns paramters used to process data.\n\n        Returns\n        -------\n        dict\n            dict of analysis parameters\n        \"\"\"\n        outputs = ['sample',\n                   'ratio_params',\n                   'despike_params',\n                   'autorange_params',\n                   'bkgcorrect_params']\n\n        out = {}\n        for o in outputs:\n            out[o] = getattr(self, o)\n\n        out['filter_params'] = self.filt.params\n        out['filter_sequence'] = self.filt.sequence\n        out['filter_used'] = self.filt.make_keydict()\n\n        return out\n```"
            ],
            [
                135,
                "go",
                "ProfileConfigClear",
                "```go\nfunc ProfileConfigClear(tx *sql.Tx, id int64) error {\n\t_, err := tx.Exec(\"DELETE FROM profiles_config WHERE profile_id=?\", id)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t_, err = tx.Exec(`DELETE FROM profiles_devices_config WHERE id IN\n\t\t(SELECT profiles_devices_config.id\n\t\t FROM profiles_devices_config JOIN profiles_devices\n\t\t ON profiles_devices_config.profile_device_id=profiles_devices.id\n\t\t WHERE profiles_devices.profile_id=?)`, id)\n\tif err != nil {\n\t\treturn err\n\t}\n\t_, err = tx.Exec(\"DELETE FROM profiles_devices WHERE profile_id=?\", id)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n```"
            ],
            [
                70,
                "java",
                "MessagingTransformers.rejectDefinedAttributeWithDefaultValue",
                "```java\nprivate static void rejectDefinedAttributeWithDefaultValue(ResourceTransformationDescriptionBuilder builder, AttributeDefinition... attrs) {\n        for (AttributeDefinition attr : attrs) {\n            builder.getAttributeBuilder()\n                    .setDiscard(new DiscardAttributeValueChecker(attr.getDefaultValue()), attr)\n                    .addRejectCheck(DEFINED, attr);\n        }\n    }\n```"
            ],
            [
                227,
                "python",
                "pfprint_all",
                "```python\ndef pfprint_all(iterable, end='\\n', file=None):\n    \"\"\"Prints each item from an iterable.\n\n    :param iterable: An iterable yielding values to print\n    :param end: String to append to the end of printed output\n    :param file: File to which output is printed\n    :rtype: None\n\n    Example::\n\n        >>> @pointfree\n        ... def prefix_all(prefix, iterable):\n        ...     for item in iterable:\n        ...         yield \"%s%s\" % (prefix, item)\n\n        >>> fn = prefix_all(\"An item: \") >> pfprint_all\n\n        >>> fn([\"foo\", \"bar\", \"baz\"])\n        An item: foo\n        An item: bar\n        An item: baz\n\n    \"\"\"\n\n    for item in iterable:\n        pfprint(item, end=end, file=file)\n```"
            ],
            [
                583,
                "python",
                "has_import",
                "```python\ndef has_import(\n    state,\n    name,\n    same_as=False,\n    not_imported_msg=\"Did you import `{{pkg}}`?\",\n    incorrect_as_msg=\"Did you import `{{pkg}}` as `{{alias}}`?\",\n):\n    \"\"\"Checks whether student imported a package or function correctly.\n\n    Python features many ways to import packages.\n    All of these different methods revolve around the ``import``, ``from`` and ``as`` keywords.\n    ``has_import()`` provides a robust way to check whether a student correctly imported a certain package.\n\n    By default, ``has_import()`` allows for different ways of aliasing the imported package or function.\n    If you want to make sure the correct alias was used to refer to the package or function that was imported,\n    set ``same_as=True``.\n\n    Args:\n        name (str): the name of the package that has to be checked.\n        same_as (bool): if True, the alias of the package or function has to be the same. Defaults to False.\n        not_imported_msg (str): feedback message when the package is not imported.\n        incorrect_as_msg (str): feedback message if the alias is wrong.\n\n    :Example:\n\n        Example 1, where aliases don't matter (defaut): ::\n\n            # solution\n            import matplotlib.pyplot as plt\n\n            # sct\n            Ex().has_import(\"matplotlib.pyplot\")\n\n            # passing submissions\n            import matplotlib.pyplot as plt\n            from matplotlib import pyplot as plt\n            import matplotlib.pyplot as pltttt\n\n            # failing submissions\n            import matplotlib as mpl\n\n        Example 2, where the SCT is coded so aliases do matter: ::\n\n            # solution\n            import matplotlib.pyplot as plt\n\n            # sct\n            Ex().has_import(\"matplotlib.pyplot\", same_as=True)\n\n            # passing submissions\n            import matplotlib.pyplot as plt\n            from matplotlib import pyplot as plt\n\n            # failing submissions\n            import matplotlib.pyplot as pltttt\n\n    \"\"\"\n    student_imports = state.ast_dispatcher(\"imports\", state.student_ast)\n    solution_imports = state.ast_dispatcher(\"imports\", state.solution_ast)\n\n    if name not in solution_imports:\n        raise InstructorError(\n            \"`has_import()` couldn't find an import of the package %s in your solution code.\"\n            % name\n        )\n\n    fmt_kwargs = {\"pkg\": name, \"alias\": solution_imports[name]}\n\n    _msg = state.build_message(not_imported_msg, fmt_kwargs)\n    state.do_test(DefinedCollTest(name, student_imports, _msg))\n\n    if same_as:\n        _msg = state.build_message(incorrect_as_msg, fmt_kwargs)\n        state.do_test(EqualTest(solution_imports[name], student_imports[name], _msg))\n\n    return state\n```"
            ],
            [
                40,
                "java",
                "ResourceAdaptorObjectImpl.verifyConfigProperties",
                "```java\nprivate void verifyConfigProperties(ConfigProperties newProperties)\n\t\t\tthrows InvalidConfigurationException {\n\n\t\tif (doTraceLogs) {\n\t\t\tlogger.trace(\"verifyConfigProperties( newProperties = \"\n\t\t\t\t\t+ newProperties + \" )\");\n\t\t}\n\n\t\t// merge properties\n\t\tfor (ConfigProperties.Property configProperty : configProperties\n\t\t\t\t.getProperties()) {\n\t\t\tif (newProperties.getProperty(configProperty.getName()) == null) {\n\t\t\t\tnewProperties.addProperty(configProperty);\n\t\t\t}\n\t\t}\n\t\t// validate result\n\t\tfor (ConfigProperties.Property entityProperty : newProperties\n\t\t\t\t.getProperties()) {\n\t\t\tif (entityProperty.getValue() == null) {\n\t\t\t\tthrow new InvalidConfigurationException(\"the property \"\n\t\t\t\t\t\t+ entityProperty.getName() + \" has null value\");\n\t\t\t}\n\t\t}\n\t\t// validate in ra object\n\t\tobject.raVerifyConfiguration(newProperties);\n\t\t// ok, switch config\n\t\tconfigProperties = newProperties;\n\t}\n```"
            ],
            [
                167,
                "php",
                "View.excerpt",
                "```php\npublic function excerpt(string $string, int $length = 20): string\n\t{\n\t\treturn (strlen($string) > $length) ? substr($string, 0, $length - 3) . '...' : $string;\n\t}\n```"
            ],
            [
                905,
                "javascript",
                "getCampaignInfo",
                "```javascript\nfunction getCampaignInfo(callback,id){\n    if (id===undefined) {\n        return callback(returnError('Empty book id'));\n    }\n    sendRequest( 'campaigns/' + id, 'GET', {}, true, callback );\n}\n```"
            ],
            [
                36,
                "java",
                "Parser.parseTemplateText",
                "```java\nprivate void parseTemplateText(Node parent) throws JasperException {\n\n\tif (!reader.hasMoreInput())\n\t    return;\n\n\tCharArrayWriter ttext = new CharArrayWriter();\n\t// Output the first character\n\tint ch = reader.nextChar();\n        if (ch == '\\\\') {\n            reader.pushChar();\n        } else {\n            ttext.write(ch);\n        }\n\n\twhile (reader.hasMoreInput()) {\n\t    ch = reader.nextChar();\n\t    if (ch == '<') {\n                reader.pushChar();\n                break;\n            }\n\t    else if( ch == '$' || ch == '#') {\n\t\tif (!reader.hasMoreInput()) {\n\t\t    ttext.write(ch);\n\t\t    break;\n                }\n\t\tif (reader.nextChar() == '{') {\n\t\t    reader.pushChar();\n\t\t    reader.pushChar();\n\t\t    break;\n\t\t}\n\t\tttext.write(ch);\n\t\treader.pushChar();\n\t\tcontinue;\n\t    }\n\t    else if (ch == '\\\\') {\n\t\tif (!reader.hasMoreInput()) {\n\t\t    ttext.write('\\\\');\n\t\t    break;\n\t\t}\n                char next = (char)reader.peekChar();\n                // Looking for \\% or \\$\n                // Note that this behavior can be altered by the attributes\n                // el-ignored and deferred-syntax-allowed-as-literal and\n                // similar attributes in a page directive.  However, since\n                // the page direcitve may appear later in the same page, the\n                // '\\' will be regenerated in Generator.java.\n                if (next == '%' || next == '$' || next == '#') {\n                    ch = reader.nextChar();\n                }\n\t    }\n\t    ttext.write(ch);\n\t}\n\tnew Node.TemplateText(ttext.toString(), start, parent);\n    }\n```"
            ],
            [
                60,
                "java",
                "FileUtil.outChars",
                "```java\nprotected static void outChars(final File dest, final char[] data, final String encoding, final boolean append) throws IOException {\n\t\tif (dest.exists()) {\n\t\t\tcheckIsFile(dest);\n\t\t}\n\t\tWriter out = new BufferedWriter(StreamUtil.outputStreamWriterOf(new FileOutputStream(dest, append), encoding));\n\t\ttry {\n\t\t\tout.write(data);\n\t\t} finally {\n\t\t\tStreamUtil.close(out);\n\t\t}\n\t}\n```"
            ],
            [
                240,
                "java",
                "ObjectFactory.createGesamtbelastungbrutto",
                "```java\n@XmlElementDecl(namespace = \"\", name = \"gesamtbelastungbrutto\")\n    @XmlJavaTypeAdapter(Adapter2 .class)\n    public JAXBElement<BigDecimal> createGesamtbelastungbrutto(BigDecimal value) {\n        return new JAXBElement<BigDecimal>(_Gesamtbelastungbrutto_QNAME, BigDecimal.class, null, value);\n    }\n```"
            ],
            [
                137,
                "python",
                "TreeRegression.Cov",
                "```python\ndef Cov(self):\n        \"\"\"\n        calculate the covariance matrix of the tips assuming variance\n        has accumulated along branches of the tree accoriding to the\n        the provided\n        Returns\n        -------\n\n         M : (np.array)\n            covariance matrix with tips arranged standard transersal order.\n        \"\"\"\n        # accumulate the covariance matrix by adding 'squares'\n        M = np.zeros((self.N, self.N))\n        for n in self.tree.find_clades():\n            if n == self.tree.root:\n                continue\n            M[np.meshgrid(n._ii, n._ii)] += self.branch_variance(n)\n        return M\n```"
            ],
            [
                188,
                "go",
                "Observe",
                "```go\nfunc (td *TimeoutDetector) Observe(which uint64) (bool, time.Duration) {\n\ttd.mu.Lock()\n\tdefer td.mu.Unlock()\n\n\tok := true\n\tnow := time.Now()\n\texceed := time.Duration(0)\n\n\tif pt, found := td.records[which]; found {\n\t\texceed = now.Sub(pt) - td.maxDuration\n\t\tif exceed > 0 {\n\t\t\tok = false\n\t\t}\n\t}\n\ttd.records[which] = now\n\treturn ok, exceed\n}\n```"
            ],
            [
                165,
                "python",
                "CassandraToGoogleCloudStorageOperator.convert_tuple_type",
                "```python\ndef convert_tuple_type(cls, name, value):\n        \"\"\"\n        Converts a tuple to RECORD that contains n fields, each will be converted\n        to its corresponding data type in bq and will be named 'field_<index>', where\n        index is determined by the order of the tuple elements defined in cassandra.\n        \"\"\"\n        names = ['field_' + str(i) for i in range(len(value))]\n        values = [cls.convert_value(name, value) for name, value in zip(names, value)]\n        return cls.generate_data_dict(names, values)\n```"
            ],
            [
                584,
                "java",
                "DownloadService.doCheck",
                "```java\nprivate void doCheck() {\n        if (!running) return;\n        if (fileManager == null) return;\n        \n        if (unexpectedErrors > MAX_UNEXPECTED_ERRORS) {\n            log.info(\"Terminating because of errors\");\n            terminate(false);\n            return;\n        }\n\n        Timer.Context waitTimerContext = waitingTimer.time();\n        // Possible infinite thread sleep? This will make sure we fire downloading only when are the files are consumed/merged\n        while (downloadDir.listFiles().length != 0) {\n            log.debug(\"Waiting for files in download directory to clear up. Sleeping for 1 min. If you see this persistently, it means the downloaded files are not getting merged properly/timely\");\n            try { Thread.sleep(60000); } catch (Exception ex) {}\n        }\n        waitTimerContext.stop();\n        if (downloadLock.tryLock()) {\n            try {\n                if (fileManager.hasNewFiles()) {\n                    fileManager.downloadNewFiles(downloadDir);\n                }\n            } catch (Throwable unexpected) {\n                unexpectedErrors += 1;\n                log.error(\"UNEXPECTED; WILL TRY TO RECOVER\");\n                log.error(unexpected.getMessage(), unexpected);\n                // sleep for a minute?\n                if (Thread.interrupted()) {\n                    try {\n                        thread.sleep(60000);\n                    } catch (Exception ex) {\n                        log.error(ex.getMessage(), ex);\n                    }\n                }\n            } finally {\n                downloadLock.unlock();\n            }\n        } else {\n            log.debug(\"Download in progress\");\n        }\n    }\n```"
            ],
            [
                138,
                "java",
                "OgnlContext.popEvaluation",
                "```java\npublic Evaluation popEvaluation()\n    {\n        Evaluation result;\n\n        result = _currentEvaluation;\n        setCurrentEvaluation(result.getParent());\n        if (_currentEvaluation == null) {\n            setLastEvaluation(getKeepLastEvaluation() ? result : null);\n            setRootEvaluation(null);\n            setCurrentNode(null);\n        }\n        return result;\n    }\n```"
            ],
            [
                809,
                "java",
                "OArrays.contains",
                "```java\npublic static <T> boolean contains(final T[] iArray, final T iToFind) {\n    if (iArray == null || iArray.length == 0)\n      return false;\n\n    for (T e : iArray)\n      if (e != null && e.equals(iToFind))\n        return true;\n\n    return false;\n  }\n```"
            ],
            [
                441,
                "java",
                "FilterApi.ltEq",
                "```java\npublic static <T extends Comparable<T>, C extends Column<T> & SupportsLtGt> LtEq<T> ltEq(C column, T value) {\n    return new LtEq<T>(column, value);\n  }\n```"
            ],
            [
                81,
                "python",
                "verify_and_strip",
                "```python\ndef verify_and_strip(resp):\n    \"\"\"Verify checksum and strip header and footer of received frame.\"\"\"\n    if resp[0:2] != b'\\xFE\\xFE':\n        _LOGGER.error(\"Houston, we got problem:\")\n        print_hex(resp)\n        raise Exception(\"Wrong header - got %X%X\" % (resp[0], resp[1]))\n    if resp[-2:] != b'\\xFE\\x0D':\n        raise Exception(\"Wrong footer - got %X%X\" % (resp[-2], resp[-1]))\n    output = resp[2:-2].replace(b'\\xFE\\xF0', b'\\xFE')\n\n    c = checksum(bytearray(output[0:-2]))\n\n    if (256 * output[-2:-1][0] + output[-1:][0]) != c:\n        raise Exception(\"Wrong checksum - got %d expected %d\" % (\n            (256 * output[-2:-1][0] + output[-1:][0]), c))\n\n    return output[0:-2]\n```"
            ],
            [
                369,
                "go",
                "UnmarshalJSON",
                "```go\nfunc (p *Policy) UnmarshalJSON(data []byte) error {\n\t*p = Policy{}\n\ttransports := policyTransportsMap{}\n\tif err := paranoidUnmarshalJSONObject(data, func(key string) interface{} {\n\t\tswitch key {\n\t\tcase \"default\":\n\t\t\treturn &p.Default\n\t\tcase \"transports\":\n\t\t\treturn &transports\n\t\tdefault:\n\t\t\treturn nil\n\t\t}\n\t}); err != nil {\n\t\treturn err\n\t}\n\n\tif p.Default == nil {\n\t\treturn InvalidPolicyFormatError(\"Default policy is missing\")\n\t}\n\tp.Transports = map[string]PolicyTransportScopes(transports)\n\treturn nil\n}\n```"
            ],
            [
                889,
                "java",
                "GraphicalVertex.dumpConstraints",
                "```java\npublic static String dumpConstraints(final Constraint[] constraints) {\n        if ( constraints == null ) {\n            return null;\n        }\n        final StringBuffer buffer = new StringBuffer();\n        for ( int i = 0, length = constraints.length; i < length; i++ ) {\n            buffer.append( constraints[i].toString() + \"<br>\" );\n        }\n        return buffer.toString();\n    }\n```"
            ],
            [
                622,
                "javascript",
                "API",
                "```javascript\nfunction API (apiUrl, requester) {\n  var _this = this;\n  _this.apiUrl = apiUrl;\n\n  // Dependency injection. Allow a custom request module.\n  var request = requester ? requester(apiUrl) : Requester(apiUrl);\n\n  /**\n   * Creates a new user account\n   * @param user {object} the user to be created. Requires username, email, password\n   * @param authUser {object} the user authenticating this request. Requires token or username and password\n   * @param notify {boolean} send notification email to user\n   * @return {Promise<object>} the newly created user\n   */\n  _this.createUser = function (user, authUser, notify) {\n    user.send_notify = notify;\n\n    return request('admin/users', authUser, user).then(stat.checkCreatedResponse);\n  };\n\n  /**\n   * Edits the details on an existing user account\n   * @param user {object} the user who's information will be updated. Requires username (note: the username cannot be changed)\n   * @param authUser {object} the user authenticating this request. Requires token or username and password\n   * @returns {Promise<object>} the updated user object\n     */\n  _this.editUser = function (user, authUser) {\n    return request('admin/users/' + user.username, authUser, user, 'PATCH').then(stat.checkStandardResponse);\n  };\n\n  /**\n   * Deletes a user\n   * @param user {object} the user to delete. Requires username\n   * @param authUser {object} the user authenticating this request. Users cannot delete themselves. Requires token or username and password\n   * @returns {Promise} resolves if successful\n   */\n  _this.deleteUser = function (user, authUser) {\n    if (user.username === authUser.username) {\n      return Promise.reject('Users cannot delete themselves!');\n    }\n      \n    return request('admin/users/' + user.username, authUser, null, 'DELETE').then(stat.checkNoContentResponse);\n  };\n\n  /**\n   * Searches for users that match the query\n   * @param query {string}\n   * @param limit {int} the maximum number of results to return\n   * @param authUser {object} the user authenticating this request. If null the email fields will be empty in the result. Requires token or username and password\n   * @returns {Promise<array>} an array of user objects\n   */\n  _this.searchUsers = function (query, limit, authUser) {\n    limit = limit || 10; // no zero limit allowed\n\n    return request('users/search?q=' + query + '&limit=' + limit, authUser).then(stat.checkOkResponse);\n  };\n\n  /**\n   * Retrieves a user\n   * @param user {object} the user to retrieve. Requires username\n   * @param authUser {object} the user to authenticate as. If null the email field in the response will be empty. Requires token or username and password\n   * @returns {Promise<object>} the found user object\n   */\n  _this.getUser = function (user, authUser) {\n    return request('users/' + user.username, authUser).then(stat.checkStandardResponse);\n  };\n\n  /**\n   * Searches for public repositories that match the query\n   * @param query {string}\n   * @param uid {int} the id of the user whose repositories will be searched. 0 will search all\n   * @param limit {int} the maximum number of results to return\n   * @returns {Promise<array>} an array of repository objects\n   */\n  _this.searchRepos = function (query, uid, limit) {\n    uid = uid || 0;\n    limit = limit || 10;\n\n    return request('repos/search?q=' + query + '&uid=' + uid + '&limit=' + limit).then(stat.checkOkResponse);\n  };\n\n  /**\n   * Creates a new repository for the user\n   * @param repo {object} the repository being created. Requires name, description, private\n   * @param user {object} the user creating the repository. Requires token or username and password\n   * @returns {Promise<object>} the new repository object\n     */\n  _this.createRepo = function (repo, user) {\n    return request('user/repos', user, {\n      name: repo.name,\n      description: repo.description,\n      private: repo.private\n    }, null).then(stat.checkCreatedResponse);\n  };\n\n  /**\n   * Returns information about a single repository\n   * @param repo {object} the repository that will be retrieved. Requires full_name\n   * @param authUser {object} the user authenticating this request. Requires username, password or token\n   * @returns {Promise<object>} the repository object\n   */\n  _this.getRepo = function (repo, authUser) {\n\treturn request('repos/' + repo.full_name, authUser).then(stat.checkStandardResponse);\n  };\n\n  /**\n   * Returns an array of repositories this user has access to\n   * @param user {object} the user who's repositories will be listed. Requires token or username and password\n   * @returns {Promise<array>} an array of repository objects\n   */\n  _this.listRepos = function (user) {\n    return request('user/repos', user).then(stat.checkStandardResponse);\n  };\n\n  /**\n   * Deletes a repository from the user\n   * @param repo {object} the repository to delete. Requires name\n   * @param user {object} the user that owns the repository. Requires token or username and password\n   * @returns {Promise} resolves if successful\n   */\n  _this.deleteRepo = function (repo, user) {\n    return request('repos/' + user.username + '/' + repo.name, user, null, 'DELETE').then(stat.checkNoContentResponse);\n  };\n\n  /**\n   * Creates an authentication token for the user\n   * @param token {object} the token to be created. Requires name\n   * @param user {object} the user creating the token. Requires username, token or password\n   * @returns {Promise<object>} the new token object\n   */\n  _this.createToken = function (token, user) {\n    return request('users/' + user.username + '/tokens', user, {name: token.name}).then(stat.checkCreatedResponse);\n  };\n\n  /**\n   * Returns an array of tokens the user has\n   * @param user {object} the user who's tokens will be listed. Requires username, password\n   * @returns {Promise<array>} an array of token objects\n   */\n  _this.listTokens = function (user) {\n    return request('users/' + user.username + '/tokens', user).then(stat.checkStandardResponse);\n  };\n\n  /**\n   * Creates a public key for the user\n   * @param key {object} the key to be created. Requires title, key\n   * @param user {object} the user creating the key. Requires token or username and password\n   * @returns {Promise<object>} the new public key object\n   */\n  _this.createPublicKey = function (key, user) {\n    return request('user/keys', user, {\n      title: key.title,\n      key: key.key\n    }).then(stat.checkCreatedResponse);\n  };\n\n  /**\n   * Returns an array of public keys that belong to the user\n   * @param user {object} the user who's public keys will be listed. Requires username, token or password\n   * @returns {Promise<array>} an array of public key objects\n   */\n  _this.listPublicKeys = function (user) {\n    return request('users/' + user.username + '/keys', user).then(stat.checkStandardResponse);\n  };\n\n  /**\n   * Returns the full details for a public key\n   * @param key {object} the key that will be retrieved. Requires id\n   * @param user {object} the user who's key will be retrieved. Requires token or username and password\n   * @returns {Promise<object>} the public key object\n   */\n  _this.getPublicKey = function (key, user) {\n    return request('user/keys/' + key.id, user).then(stat.checkStandardResponse);\n  };\n\n  /**\n   * Deletes a public key from the user\n   * @param key {object} the key to be deleted. Requires id\n   * @param user {object} the user who's key will be deleted. Requires token or username and password\n   * @returns {Promise} resolves if successful\n     */\n  _this.deletePublicKey = function (key, user) {\n    return request('user/keys/' + key.id, user, null, 'DELETE').then(stat.checkNoContentResponse);\n  };\n\n  return _this;\n}\n```"
            ],
            [
                449,
                "python",
                "KernelCode._build_scalar_declarations",
                "```python\ndef _build_scalar_declarations(self, with_init=True):\n        \"\"\"Build and return scalar variable declarations\"\"\"\n        # copy scalar declarations from from kernel ast\n        scalar_declarations = [deepcopy(d) for d in self.kernel_ast.block_items\n                               if type(d) is c_ast.Decl and type(d.type) is c_ast.TypeDecl]\n        # add init values to declarations\n        if with_init:\n            random.seed(2342)  # we want reproducible random numbers\n            for d in scalar_declarations:\n                if d.type.type.names[0] in ['double', 'float']:\n                    d.init = c_ast.Constant('float', str(random.uniform(1.0, 0.1)))\n                elif d.type.type.names[0] in ['int', 'long', 'long long',\n                                              'unsigned int', 'unsigned long', 'unsigned long long']:\n                    d.init = c_ast.Constant('int', 2)\n\n        return scalar_declarations\n```"
            ],
            [
                904,
                "java",
                "UtilPolygons2D_F64.convert",
                "```java\npublic static void convert( Polygon2D_F64 input , Quadrilateral_F64 output ) {\n\t\tif( input.size() != 4 )\n\t\t\tthrow new IllegalArgumentException(\"Expected 4-sided polygon as input\");\n\n\t\toutput.a.set(input.get(0));\n\t\toutput.b.set(input.get(1));\n\t\toutput.c.set(input.get(2));\n\t\toutput.d.set(input.get(3));\n\t}\n```"
            ],
            [
                321,
                "javascript",
                "numberOfLeadingZeros",
                "```javascript\nfunction numberOfLeadingZeros(value) {\n    if (value.equals(Long.ZERO)) {\n      return 64;\n    }\n    let n = 1;\n    let x = value.getHighBits();\n    if (x === 0) {\n      n += 32;\n      x = value.getLowBits();\n    }\n    if (x >>> 16 === 0) {\n      n += 16;\n      x <<= 16;\n    }\n    if (x >>> 24 === 0) {\n      n += 8;\n      x <<= 8;\n    }\n    if (x >>> 28 === 0) {\n      n += 4;\n      x <<= 4;\n    }\n    if (x >>> 30 === 0) {\n      n += 2;\n      x <<= 2;\n    }\n    n -= x >>> 31;\n    return n;\n  }\n```"
            ],
            [
                165,
                "java",
                "Condition.create",
                "```java\npublic static Condition create(String ifHeader) throws WebDAVException {\n        StreamTokenizer tokenizer = new StreamTokenizer(new StringReader(ifHeader));\n        // URI characters\n        tokenizer.wordChars('!', '/');\n        tokenizer.wordChars(':', '@');\n        tokenizer.ordinaryChar('(');\n        tokenizer.ordinaryChar(')');\n        tokenizer.ordinaryChar('<');\n        tokenizer.ordinaryChar('>');\n        tokenizer.ordinaryChar('[');\n        tokenizer.ordinaryChar(']');\n        tokenizer.quoteChar('\"');\n        Condition condition = null;\n        try {\n            int token = tokenizer.nextToken();\n            condition = Condition.create(tokenizer);\n            token = tokenizer.ttype;\n            if (token != StreamTokenizer.TT_EOF) {\n                throw new WebDAVException(IResponse.SC_BAD_REQUEST, Policy.bind(\"error.parseMissing\", String.valueOf(token), \"EOF\")); //$NON-NLS-1$ //$NON-NLS-2$\n            }\n        } catch (IOException exc) {\n            // ignore or log?\n        }\n        return condition;\n    }\n```"
            ],
            [
                80,
                "javascript",
                "",
                "```javascript\nfunction(Template){\n\t\treturn [Template.language.tag('exit'),Template.language.tag('exitloop'),Template.language.tag('continue')];\n\t}\n```"
            ],
            [
                397,
                "go",
                "GetRedactedVersion",
                "```go\nfunc (s *Task) GetRedactedVersion() RedactedTask {\n\ts.mutex.RLock()\n\trt := RedactedTask{\n\t\tID:         s.ID,\n\t\tTimestamp:  s.Timestamp,\n\t\tExpires:    s.Expires,\n\t\tStatus:     s.Status,\n\t\tProfile:    s.Profile,\n\t\tCallerName: s.CallerName,\n\t\tMetaData:   s.MetaData,\n\t}\n\ts.mutex.RUnlock()\n\treturn rt\n}\n```"
            ],
            [
                34,
                "python",
                "H2OFrame.convert_H2OFrame_2_DMatrix",
                "```python\ndef convert_H2OFrame_2_DMatrix(self, predictors, yresp, h2oXGBoostModel):\n        '''\n        This method requires that you import the following toolboxes: xgboost, pandas, numpy and scipy.sparse.\n\n        This method will convert an H2OFrame to a DMatrix that can be used by native XGBoost.  The H2OFrame contains\n        numerical and enum columns alone.  Note that H2O one-hot-encoding introduces a missing(NA)\n        column. There can be NAs in any columns.\n\n        Follow the steps below to compare H2OXGBoost and native XGBoost:\n\n        1. Train the H2OXGBoost model with H2OFrame trainFile and generate a prediction:\n        h2oModelD = H2OXGBoostEstimator(**h2oParamsD) # parameters specified as a dict()\n        h2oModelD.train(x=myX, y=y, training_frame=trainFile) # train with H2OFrame trainFile\n        h2oPredict = h2oPredictD = h2oModelD.predict(trainFile)\n\n        2. Derive the DMatrix from H2OFrame:\n        nativeDMatrix = trainFile.convert_H2OFrame_2_DMatrix(myX, y, h2oModelD)\n\n        3. Derive the parameters for native XGBoost:\n        nativeParams = h2oModelD.convert_H2OXGBoostParams_2_XGBoostParams()\n\n        4. Train your native XGBoost model and generate a prediction:\n        nativeModel = xgb.train(params=nativeParams[0], dtrain=nativeDMatrix, num_boost_round=nativeParams[1])\n        nativePredict = nativeModel.predict(data=nativeDMatrix, ntree_limit=nativeParams[1].\n\n        5. Compare the predictions h2oPredict from H2OXGBoost, nativePredict from native XGBoost.\n\n        :param h2oFrame: H2OFrame to be converted to DMatrix for native XGBoost\n        :param predictors: List of predictor columns, can be column names or indices\n        :param yresp: response column, can be column index or name\n        :param h2oXGBoostModel: H2OXGboost model that are built with the same H2OFrame as input earlier\n        :return: DMatrix that can be an input to a native XGBoost model\n        '''\n        import xgboost as xgb\n        import pandas as pd\n        import numpy as np\n        from scipy.sparse import csr_matrix\n\n        assert isinstance(predictors, list) or isinstance(predictors, tuple)\n        assert h2oXGBoostModel._model_json['algo'] == 'xgboost', \\\n            \"convert_H2OFrame_2_DMatrix is used for H2OXGBoost model only.\"\n\n        tempFrame = self[predictors].cbind(self[yresp])\n        colnames = tempFrame.names\n        if type(predictors[0])==type(1): # convert integer indices to column names\n            temp = []\n            for colInd in predictors:\n                temp.append(colnames[colInd])\n            predictors = temp\n\n        if (type(yresp) == type(1)):\n            tempy = colnames[yresp]\n            yresp = tempy # column name of response column\n\n        enumCols = [] # extract enum columns out to process them\n        enumColsIndices = []     # store enum column indices\n        typeDict = self.types\n        for predName in predictors:\n            if str(typeDict[predName])=='enum':\n                enumCols.append(predName)\n                enumColsIndices.append(colnames.index(predName))\n\n        pandaFtrain = tempFrame.as_data_frame(use_pandas=True, header=True)\n        nrows = tempFrame.nrow\n\n        # convert H2OFrame to DMatrix starts here\n        if len(enumCols) > 0:   # enumCols contain all enum column names\n            allDomain = tempFrame.levels() # list all domain levels with column indices\n            domainLen = []\n            for enumIndex in enumColsIndices:\n                if len(allDomain[enumIndex])>0:\n                    domainLen.append(len(allDomain[enumIndex])*-1)\n            incLevel = np.argsort(domainLen) # indices of enum column indices with decreasing domain length\n\n            # need to move enum columns to the front, highest level first\n            c2 = tempFrame[enumCols[incLevel[0]]]\n            tempFrame = tempFrame.drop(enumCols[incLevel[0]])\n            for index in range(1, len(incLevel)):\n                c2 = c2.cbind(tempFrame[enumCols[incLevel[index]]])\n                tempFrame = tempFrame.drop(enumCols[incLevel[index]])\n               \n            enumCols = c2.names\n            tempFrame = c2.cbind(tempFrame)\n            pandaFtrain = tempFrame.as_data_frame(use_pandas=True, header=True) # redo translation from H2O to panda\n        \n            pandaTrainPart = generatePandaEnumCols(pandaFtrain, enumCols[0], nrows, tempFrame[enumCols[0]].categories())\n            pandaFtrain.drop([enumCols[0]], axis=1, inplace=True)\n\n            for colInd in range(1, len(enumCols)):\n                cname=enumCols[colInd]\n                ctemp = generatePandaEnumCols(pandaFtrain, cname,  nrows, tempFrame[enumCols[colInd]].categories())\n                pandaTrainPart=pd.concat([pandaTrainPart, ctemp], axis=1)\n                pandaFtrain.drop([cname], axis=1, inplace=True)\n\n            pandaFtrain = pd.concat([pandaTrainPart, pandaFtrain], axis=1)\n\n        c0= tempFrame[yresp].asnumeric().as_data_frame(use_pandas=True, header=True)\n        pandaFtrain.drop([yresp], axis=1, inplace=True)\n        pandaF = pd.concat([c0, pandaFtrain], axis=1)\n        pandaF.rename(columns={c0.columns[0]:yresp}, inplace=True)\n        newX = list(pandaFtrain.columns.values)\n        data = pandaF.as_matrix(newX)\n        label = pandaF.as_matrix([yresp])\n\n        return xgb.DMatrix(data=csr_matrix(data), label=label) \\\n            if h2oXGBoostModel._model_json['output']['sparse'] else xgb.DMatrix(data=data, label=label)\n```"
            ],
            [
                657,
                "python",
                "OALParser.p_statement_list_1",
                "```python\ndef p_statement_list_1(self, p):\n        '''statement_list : statement SEMICOLON statement_list'''\n        p[0] = p[3]\n        if p[1] is not None:\n            p[0].children.insert(0, p[1])\n```"
            ]
        ]
    },
    "Test-All MRR (bs=1,000)": 0.03051706969427204,
    "Examples-FuncNameTest": {
        "_type": "table",
        "columns": [
            "Rank",
            "Language",
            "Query",
            "Code"
        ],
        "data": [
            [
                24,
                "java",
                "SetupHelper.generateProperties",
                "```java\npublic Properties generateProperties() {\n\t\tProperties result = new Properties();\n\n\t\tif (proto == null) {\n\t\t\tthrow new RuntimeException(\"no protocol selected\");\n\t\t}\n\n\t\tString protocol = proto.toLowerCase();\n\n\t\tsetProperty(result, \"mail.store.protocol\", protocol);\n\t\tsetProperty(result, \"mail.\" + protocol + \".host\", host);\n\t\tsetProperty(result, \"mail.username\", user);\n\t\tsetProperty(result, \"mail.password\", pass);\n\n\t\tif (port != 0) {\n\t\t\tsetProperty(result, \"mail.\" + protocol + \".port\", Integer.toString(port));\n\t\t}\n\n\t\tif (ssl) {\n\t\t\tsetProperty(result, \"mail.\" + protocol + \".ssl\", \"true\");\n\t\t}\n\n\t\tif (protocol.equals(\"pop3\")) {\n\t\t\tsetProperty(result, \"mail.inbox\", \"INBOX\");\n\t\t} else {\n\t\t\tif (inbox == null) {\n\t\t\t\tthrow new RuntimeException(\"no inbox selected\");\n\t\t\t}\n\n\t\t\tsetProperty(result, \"mail.inbox\", inbox);\n\t\t}\n\n\t\treturn result;\n\t}\n```"
            ],
            [
                2,
                "java",
                "ComplexNDArrayUtil.truncate",
                "```java\npublic static IComplexNDArray truncate(IComplexNDArray nd, int n, int dimension) {\n\n\n        if (nd.isVector()) {\n            IComplexNDArray truncated = Nd4j.createComplex(new int[] {1, n});\n            for (int i = 0; i < n; i++)\n                truncated.putScalar(i, nd.getComplex(i));\n\n            return truncated;\n        }\n\n\n        if (nd.size(dimension) > n) {\n            long[] shape = ArrayUtil.copy(nd.shape());\n            shape[dimension] = n;\n            IComplexNDArray ret = Nd4j.createComplex(shape);\n            IComplexNDArray ndLinear = nd.linearView();\n            IComplexNDArray retLinear = ret.linearView();\n            for (int i = 0; i < ret.length(); i++)\n                retLinear.putScalar(i, ndLinear.getComplex(i));\n            return ret;\n\n        }\n\n        return nd;\n\n    }\n```"
            ],
            [
                670,
                "go",
                "RemovedProperty",
                "```go\nfunc (dj *DeltaJob) RemovedProperty(name string, p *enaml.JobManifestProperty) {\n\tdj.RemovedProperties[name] = *p\n}\n```"
            ],
            [
                278,
                "php",
                "ProcessPool.get",
                "```php\npublic function get($timeout = null, $nullOnTimeout = false)\n    {\n        $startTime = microtime(true);\n        while ($this->getPending()) {\n            // return the next result\n            if ($this->hasResult()) {\n                return $this->getResult();\n            }\n\n            // wait for the next result\n            $ready = $this->wait($timeout);\n            if (is_array($ready)) {\n                foreach ($ready as $socket) {\n                    $res = self::socket_fetch($socket);\n                    if ($res !== null) {\n                        $this->results[] = $res;\n                        $this->count++;\n                    }\n                }\n                if ($this->hasResult()) {\n                    return $this->getResult();\n                }\n            }\n\n            // timed out?\n            if ($timeout and microtime(true) - $startTime > $timeout) {\n                if ($nullOnTimeout) {\n                    return null;\n                }\n                throw new ProcessPoolException(\"Timeout\");\n            }\n        }\n    }\n```"
            ],
            [
                505,
                "javascript",
                "makePersp",
                "```javascript\nfunction makePersp(hfov, aspect, znear, zfar) {\n        var fovy = 2 * Math.atan(Math.tan(hfov/2) * gl.drawingBufferHeight / gl.drawingBufferWidth);\n        var f = 1 / Math.tan(fovy/2);\n        return [\n            f/aspect,   0,  0,  0,\n                   0,   f,  0,  0,\n                   0,   0,  (zfar+znear)/(znear-zfar), (2*zfar*znear)/(znear-zfar),\n                   0,   0, -1,  0\n        ];\n    }\n```"
            ],
            [
                6,
                "python",
                "MinHashLSHForest.add",
                "```python\ndef add(self, key, minhash):\n        '''\n        Add a unique key, together\n        with a MinHash (or weighted MinHash) of the set referenced by the key.\n\n        Note:\n            The key won't be searchbale until the\n            :func:`datasketch.MinHashLSHForest.index` method is called.\n\n        Args:\n            key (hashable): The unique identifier of the set.\n            minhash (datasketch.MinHash): The MinHash of the set.\n        '''\n        if len(minhash) < self.k*self.l:\n            raise ValueError(\"The num_perm of MinHash out of range\")\n        if key in self.keys:\n            raise ValueError(\"The given key has already been added\")\n        self.keys[key] = [self._H(minhash.hashvalues[start:end])\n                for start, end in self.hashranges]\n        for H, hashtable in zip(self.keys[key], self.hashtables):\n            hashtable[H].append(key)\n```"
            ],
            [
                15,
                "python",
                "PJFExternalFuzzer.execute",
                "```python\ndef execute(self, obj):\n        \"\"\"\n        Perform the actual external fuzzing, you may replace this method in order to increase performance\n        \"\"\"\n        try:\n            if self.config.stdin:\n                    self.spawn(self.config.command, stdin_content=obj, stdin=True, timeout=1)\n            else:\n                if \"@@\" not in self.config.command:\n                    raise PJFMissingArgument(\"Missing @@ filename indicator while using non-stdin fuzzing method\")\n                for x in self.config.command:\n                    if \"@@\" in x:\n                        self.config.command[self.config.command.index(x)] = x.replace(\"@@\", obj)\n                self.spawn(self.config.command, timeout=2)\n            self.logger.debug(\"[{0}] - PJFExternalFuzzer successfully completed\".format(time.strftime(\"%H:%M:%S\")))\n            return self._out\n        except KeyboardInterrupt:\n            return \"\"\n        except Exception as e:\n            raise PJFBaseException(e.message if hasattr(e, \"message\") else str(e))\n```"
            ],
            [
                379,
                "go",
                "Set",
                "```go\nfunc (o *ListComplex64Option) Set(value string) error {\n\tval := Complex64Option{}\n\tval.Set(value)\n\t*o = append(*o, val)\n\treturn nil\n}\n```"
            ],
            [
                45,
                "ruby",
                "S3.Bucket.destroy",
                "```ruby\ndef destroy(force = false)\n      if objects.any?\n\t      if force\n           objects.destroy_all\n           delete_bucket\n           true\n        else\n          raise\n        end\n      else\n        delete_bucket\n        true\n      end\n    end\n```"
            ],
            [
                405,
                "java",
                "GeoPackageImpl.integrityCheck",
                "```java\nprivate Cursor integrityCheck(Cursor cursor) {\n        if (cursor.moveToNext()) {\n            String value = cursor.getString(0);\n            if (value.equals(\"ok\")) {\n                cursor.close();\n                cursor = null;\n            }\n        }\n        return cursor;\n    }\n```"
            ],
            [
                765,
                "javascript",
                "gotOption",
                "```javascript\nfunction gotOption (option) {\n    if (map[option]) {\n      option = map[option]\n      var name = option[0]\n      // Assume a boolean, and set to true because the argument is present.\n      var value = true\n      // If it takes arguments, override with a value.\n      var count = option[2]\n      while (count--) {\n        value = argv[++index]\n        if (argv.length === index) {\n          return cli.error('The \"' + name + '\" option requires an argument.')\n        }\n      }\n      // If it needs type conversion, do it.\n      var type = option[1]\n      if (type === 'Array') {\n        value = value.split(',')\n      } else if (type === 'RegExp') {\n        try {\n          value = new RegExp(value)\n        } catch (e) {\n          return cli.error('The \"' + name + '\" option received an invalid expression: \"' + value + '\".')\n        }\n      } else if (type === 'Number') {\n        var number = value * 1\n        if (isNaN(number)) {\n          return cli.error('The \"' + name + '\" option received a non-numerical argument: \"' + value + '\".')\n        }\n      }\n      args[name] = value\n    } else {\n      return cli.error('Unknown option: \"' + option + '\".')\n    }\n  }\n```"
            ],
            [
                5,
                "php",
                "AddNewProcess.pageHandle",
                "```php\npublic function pageHandle($event)\n    {\n        $page = Page::firstOrNew(['id' => $event->pageId]);\n        $this->saveDynamicData($page, $event->data);\n    }\n```"
            ],
            [
                85,
                "java",
                "LossFunctions.mcxent",
                "```java\npublic static LossInfo mcxent(String outputName, SDVariable predictions, SDVariable label, SDVariable weights,\n                                  Reduction reduction, int... dimensions){\n        LossInfo.Builder b = validate(\"mcxent\", predictions, label, reduction);\n        SameDiff sd = predictions.getSameDiff();\n\n        if(weights == null){\n            weights = sd.one(\"mcxent_loss_weights\", SCALAR);\n        }\n\n        String name = (reduction == Reduction.NONE ? outputName : null);\n        SDVariable weightedLogProd = sd.log(predictions).mul(label).mul(name, weights);\n\n        return doReduce(sd, outputName, false, b, reduction, weightedLogProd, label, weights, dimensions);\n    }\n```"
            ],
            [
                37,
                "java",
                "JacORBSubsystemParser.parseSecurityConfig_1_0",
                "```java\nprivate void parseSecurityConfig_1_0(XMLExtendedStreamReader reader, ModelNode node) throws XMLStreamException {\n        // parse all security attributes.\n        EnumSet<Attribute> expectedAttributes = EnumSet.of(Attribute.SECURITY_SUPPORT_SSL,\n                Attribute.SECURITY_ADD_COMPONENT_INTERCEPTOR, Attribute.SECURITY_CLIENT_SUPPORTS,\n                Attribute.SECURITY_CLIENT_REQUIRES, Attribute.SECURITY_SERVER_SUPPORTS, Attribute.SECURITY_SERVER_REQUIRES,\n                Attribute.SECURITY_USE_DOMAIN_SF, Attribute.SECURITY_USE_DOMAIN_SSF);\n\n        EnumSet<Attribute> parsedAttributes = EnumSet.noneOf(Attribute.class);\n\n        for (int i = 0; i < reader.getAttributeCount(); i++) {\n            requireNoNamespaceAttribute(reader, i);\n            String attrValue = reader.getAttributeValue(i);\n            final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n            // check for unexpected attributes.\n            if (!expectedAttributes.contains(attribute))\n                throw unexpectedAttribute(reader, i);\n            // check for duplicate attributes.\n            if (!parsedAttributes.add(attribute)) {\n                throw duplicateAttribute(reader, attribute.getLocalName());\n            }\n\n            switch (attribute) {\n                // check the attributes that need to be converted from int to string.\n                case SECURITY_CLIENT_SUPPORTS:\n                case SECURITY_CLIENT_REQUIRES:\n                case SECURITY_SERVER_SUPPORTS:\n                case SECURITY_SERVER_REQUIRES:\n                    SSLConfigValue value = SSLConfigValue.fromValue(attrValue);\n                    if (value == null)\n                        throw JacORBLogger.ROOT_LOGGER.invalidSSLConfig(attrValue, reader.getLocation());\n                    attrValue = value.toString();\n                default:\n                    SimpleAttributeDefinition definition = ((SimpleAttributeDefinition) JacORBSubsystemDefinitions.\n                        valueOf(attribute.getLocalName()));\n                    // a null definition represents an attribute that has been deprecated and is no longer used.\n                    if (definition != null)\n                        definition.parseAndSetParameter(attrValue, node, reader);\n            }\n        }\n\n        // the security element doesn't have child elements.\n        requireNoContent(reader);\n    }\n```"
            ],
            [
                377,
                "python",
                "flush_figures",
                "```python\ndef flush_figures():\n    \"\"\"Send all figures that changed\n\n    This is meant to be called automatically and will call show() if, during\n    prior code execution, there had been any calls to draw_if_interactive.\n    \n    This function is meant to be used as a post_execute callback in IPython,\n    so user-caused errors are handled with showtraceback() instead of being\n    allowed to raise.  If this function is not called from within IPython,\n    then these exceptions will raise.\n    \"\"\"\n    if not show._draw_called:\n        return\n    \n    if InlineBackend.instance().close_figures:\n        # ignore the tracking, just draw and close all figures\n        try:\n            return show(True)\n        except Exception as e:\n            # safely show traceback if in IPython, else raise\n            try:\n                get_ipython\n            except NameError:\n                raise e\n            else:\n                get_ipython().showtraceback()\n                return\n    try:\n        # exclude any figures that were closed:\n        active = set([fm.canvas.figure for fm in Gcf.get_all_fig_managers()])\n        for fig in [ fig for fig in show._to_draw if fig in active ]:\n            try:\n                send_figure(fig)\n            except Exception as e:\n                # safely show traceback if in IPython, else raise\n                try:\n                    get_ipython\n                except NameError:\n                    raise e\n                else:\n                    get_ipython().showtraceback()\n                    break\n    finally:\n        # clear flags for next round\n        show._to_draw = []\n        show._draw_called = False\n```"
            ],
            [
                829,
                "php",
                "Operation.execute",
                "```php\npublic function execute(Closure $closure)\n    {\n        $temporaryFile = tempnam(sys_get_temp_dir(), 'covert');\n\n        $temporaryContent = '<?php'.PHP_EOL.PHP_EOL;\n\n        if ($this->autoload !== false) {\n            $temporaryContent .= \"require('$this->autoload');\".PHP_EOL.PHP_EOL;\n        }\n\n        $temporaryContent .= FunctionReflection::toString($closure).PHP_EOL.PHP_EOL;\n        $temporaryContent .= 'unlink(__FILE__);'.PHP_EOL.PHP_EOL;\n        $temporaryContent .= 'exit;';\n\n        file_put_contents($temporaryFile, $temporaryContent);\n\n        $this->processId = $this->executeFile($temporaryFile);\n\n        return $this;\n    }\n```"
            ],
            [
                700,
                "go",
                "UnmarshalJSON",
                "```go\nfunc (v *VisualViewport) UnmarshalJSON(data []byte) error {\n\tr := jlexer.Lexer{Data: data}\n\teasyjsonC5a4559bDecodeGithubComChromedpCdprotoPage1(&r, v)\n\treturn r.Error()\n}\n```"
            ],
            [
                505,
                "java",
                "ObjectFactory.createObjektnrIntern",
                "```java\n@XmlElementDecl(namespace = \"\", name = \"objektnr_intern\")\n    public JAXBElement<String> createObjektnrIntern(String value) {\n        return new JAXBElement<String>(_ObjektnrIntern_QNAME, String.class, null, value);\n    }\n```"
            ],
            [
                737,
                "php",
                "ShoppingCart.add",
                "```php\npublic function add(Buyable $buyable, $quantity = 1, $filter = [])\n    {\n        $order = $this->findOrMake();\n\n        // If an extension throws an exception, error out\n        try {\n            $order->extend('beforeAdd', $buyable, $quantity, $filter);\n        } catch (Exception $exception) {\n            return $this->error($exception->getMessage());\n        }\n\n        if (!$buyable) {\n            return $this->error(_t(__CLASS__ . '.ProductNotFound', 'Product not found.'));\n        }\n\n        $item = $this->findOrMakeItem($buyable, $quantity, $filter);\n        if (!$item) {\n            return false;\n        }\n        if (!$item->_brandnew) {\n            $item->Quantity += $quantity;\n        } else {\n            $item->Quantity = $quantity;\n        }\n\n        // If an extension throws an exception, error out\n        try {\n            $order->extend('afterAdd', $item, $buyable, $quantity, $filter);\n        } catch (Exception $exception) {\n            return $this->error($exception->getMessage());\n        }\n\n        $item->write();\n        $this->message(_t(__CLASS__ . '.ItemAdded', 'Item has been added successfully.'));\n\n        return $item;\n    }\n```"
            ],
            [
                282,
                "go",
                "ReadAll",
                "```go\nfunc (a *GCSArtifact) ReadAll() ([]byte, error) {\n\tsize, err := a.Size()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error getting artifact size: %v\", err)\n\t}\n\tif size > a.sizeLimit {\n\t\treturn nil, lenses.ErrFileTooLarge\n\t}\n\treader, err := a.handle.NewReader(a.ctx)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error getting artifact reader: %v\", err)\n\t}\n\tdefer reader.Close()\n\tp, err := ioutil.ReadAll(reader)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error reading all from artifact: %v\", err)\n\t}\n\treturn p, nil\n}\n```"
            ],
            [
                65,
                "python",
                "D.get_params",
                "```python\ndef get_params(self):\n        \"\"\"\n        Returns paramters used to process data.\n\n        Returns\n        -------\n        dict\n            dict of analysis parameters\n        \"\"\"\n        outputs = ['sample',\n                   'ratio_params',\n                   'despike_params',\n                   'autorange_params',\n                   'bkgcorrect_params']\n\n        out = {}\n        for o in outputs:\n            out[o] = getattr(self, o)\n\n        out['filter_params'] = self.filt.params\n        out['filter_sequence'] = self.filt.sequence\n        out['filter_used'] = self.filt.make_keydict()\n\n        return out\n```"
            ],
            [
                687,
                "go",
                "ProfileConfigClear",
                "```go\nfunc ProfileConfigClear(tx *sql.Tx, id int64) error {\n\t_, err := tx.Exec(\"DELETE FROM profiles_config WHERE profile_id=?\", id)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t_, err = tx.Exec(`DELETE FROM profiles_devices_config WHERE id IN\n\t\t(SELECT profiles_devices_config.id\n\t\t FROM profiles_devices_config JOIN profiles_devices\n\t\t ON profiles_devices_config.profile_device_id=profiles_devices.id\n\t\t WHERE profiles_devices.profile_id=?)`, id)\n\tif err != nil {\n\t\treturn err\n\t}\n\t_, err = tx.Exec(\"DELETE FROM profiles_devices WHERE profile_id=?\", id)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n```"
            ],
            [
                96,
                "java",
                "MessagingTransformers.rejectDefinedAttributeWithDefaultValue",
                "```java\nprivate static void rejectDefinedAttributeWithDefaultValue(ResourceTransformationDescriptionBuilder builder, AttributeDefinition... attrs) {\n        for (AttributeDefinition attr : attrs) {\n            builder.getAttributeBuilder()\n                    .setDiscard(new DiscardAttributeValueChecker(attr.getDefaultValue()), attr)\n                    .addRejectCheck(DEFINED, attr);\n        }\n    }\n```"
            ],
            [
                126,
                "python",
                "pfprint_all",
                "```python\ndef pfprint_all(iterable, end='\\n', file=None):\n    \"\"\"Prints each item from an iterable.\n\n    :param iterable: An iterable yielding values to print\n    :param end: String to append to the end of printed output\n    :param file: File to which output is printed\n    :rtype: None\n\n    Example::\n\n        >>> @pointfree\n        ... def prefix_all(prefix, iterable):\n        ...     for item in iterable:\n        ...         yield \"%s%s\" % (prefix, item)\n\n        >>> fn = prefix_all(\"An item: \") >> pfprint_all\n\n        >>> fn([\"foo\", \"bar\", \"baz\"])\n        An item: foo\n        An item: bar\n        An item: baz\n\n    \"\"\"\n\n    for item in iterable:\n        pfprint(item, end=end, file=file)\n```"
            ],
            [
                617,
                "python",
                "has_import",
                "```python\ndef has_import(\n    state,\n    name,\n    same_as=False,\n    not_imported_msg=\"Did you import `{{pkg}}`?\",\n    incorrect_as_msg=\"Did you import `{{pkg}}` as `{{alias}}`?\",\n):\n    \"\"\"Checks whether student imported a package or function correctly.\n\n    Python features many ways to import packages.\n    All of these different methods revolve around the ``import``, ``from`` and ``as`` keywords.\n    ``has_import()`` provides a robust way to check whether a student correctly imported a certain package.\n\n    By default, ``has_import()`` allows for different ways of aliasing the imported package or function.\n    If you want to make sure the correct alias was used to refer to the package or function that was imported,\n    set ``same_as=True``.\n\n    Args:\n        name (str): the name of the package that has to be checked.\n        same_as (bool): if True, the alias of the package or function has to be the same. Defaults to False.\n        not_imported_msg (str): feedback message when the package is not imported.\n        incorrect_as_msg (str): feedback message if the alias is wrong.\n\n    :Example:\n\n        Example 1, where aliases don't matter (defaut): ::\n\n            # solution\n            import matplotlib.pyplot as plt\n\n            # sct\n            Ex().has_import(\"matplotlib.pyplot\")\n\n            # passing submissions\n            import matplotlib.pyplot as plt\n            from matplotlib import pyplot as plt\n            import matplotlib.pyplot as pltttt\n\n            # failing submissions\n            import matplotlib as mpl\n\n        Example 2, where the SCT is coded so aliases do matter: ::\n\n            # solution\n            import matplotlib.pyplot as plt\n\n            # sct\n            Ex().has_import(\"matplotlib.pyplot\", same_as=True)\n\n            # passing submissions\n            import matplotlib.pyplot as plt\n            from matplotlib import pyplot as plt\n\n            # failing submissions\n            import matplotlib.pyplot as pltttt\n\n    \"\"\"\n    student_imports = state.ast_dispatcher(\"imports\", state.student_ast)\n    solution_imports = state.ast_dispatcher(\"imports\", state.solution_ast)\n\n    if name not in solution_imports:\n        raise InstructorError(\n            \"`has_import()` couldn't find an import of the package %s in your solution code.\"\n            % name\n        )\n\n    fmt_kwargs = {\"pkg\": name, \"alias\": solution_imports[name]}\n\n    _msg = state.build_message(not_imported_msg, fmt_kwargs)\n    state.do_test(DefinedCollTest(name, student_imports, _msg))\n\n    if same_as:\n        _msg = state.build_message(incorrect_as_msg, fmt_kwargs)\n        state.do_test(EqualTest(solution_imports[name], student_imports[name], _msg))\n\n    return state\n```"
            ],
            [
                349,
                "java",
                "ResourceAdaptorObjectImpl.verifyConfigProperties",
                "```java\nprivate void verifyConfigProperties(ConfigProperties newProperties)\n\t\t\tthrows InvalidConfigurationException {\n\n\t\tif (doTraceLogs) {\n\t\t\tlogger.trace(\"verifyConfigProperties( newProperties = \"\n\t\t\t\t\t+ newProperties + \" )\");\n\t\t}\n\n\t\t// merge properties\n\t\tfor (ConfigProperties.Property configProperty : configProperties\n\t\t\t\t.getProperties()) {\n\t\t\tif (newProperties.getProperty(configProperty.getName()) == null) {\n\t\t\t\tnewProperties.addProperty(configProperty);\n\t\t\t}\n\t\t}\n\t\t// validate result\n\t\tfor (ConfigProperties.Property entityProperty : newProperties\n\t\t\t\t.getProperties()) {\n\t\t\tif (entityProperty.getValue() == null) {\n\t\t\t\tthrow new InvalidConfigurationException(\"the property \"\n\t\t\t\t\t\t+ entityProperty.getName() + \" has null value\");\n\t\t\t}\n\t\t}\n\t\t// validate in ra object\n\t\tobject.raVerifyConfiguration(newProperties);\n\t\t// ok, switch config\n\t\tconfigProperties = newProperties;\n\t}\n```"
            ],
            [
                281,
                "php",
                "View.excerpt",
                "```php\npublic function excerpt(string $string, int $length = 20): string\n\t{\n\t\treturn (strlen($string) > $length) ? substr($string, 0, $length - 3) . '...' : $string;\n\t}\n```"
            ],
            [
                899,
                "javascript",
                "getCampaignInfo",
                "```javascript\nfunction getCampaignInfo(callback,id){\n    if (id===undefined) {\n        return callback(returnError('Empty book id'));\n    }\n    sendRequest( 'campaigns/' + id, 'GET', {}, true, callback );\n}\n```"
            ],
            [
                175,
                "java",
                "Parser.parseTemplateText",
                "```java\nprivate void parseTemplateText(Node parent) throws JasperException {\n\n\tif (!reader.hasMoreInput())\n\t    return;\n\n\tCharArrayWriter ttext = new CharArrayWriter();\n\t// Output the first character\n\tint ch = reader.nextChar();\n        if (ch == '\\\\') {\n            reader.pushChar();\n        } else {\n            ttext.write(ch);\n        }\n\n\twhile (reader.hasMoreInput()) {\n\t    ch = reader.nextChar();\n\t    if (ch == '<') {\n                reader.pushChar();\n                break;\n            }\n\t    else if( ch == '$' || ch == '#') {\n\t\tif (!reader.hasMoreInput()) {\n\t\t    ttext.write(ch);\n\t\t    break;\n                }\n\t\tif (reader.nextChar() == '{') {\n\t\t    reader.pushChar();\n\t\t    reader.pushChar();\n\t\t    break;\n\t\t}\n\t\tttext.write(ch);\n\t\treader.pushChar();\n\t\tcontinue;\n\t    }\n\t    else if (ch == '\\\\') {\n\t\tif (!reader.hasMoreInput()) {\n\t\t    ttext.write('\\\\');\n\t\t    break;\n\t\t}\n                char next = (char)reader.peekChar();\n                // Looking for \\% or \\$\n                // Note that this behavior can be altered by the attributes\n                // el-ignored and deferred-syntax-allowed-as-literal and\n                // similar attributes in a page directive.  However, since\n                // the page direcitve may appear later in the same page, the\n                // '\\' will be regenerated in Generator.java.\n                if (next == '%' || next == '$' || next == '#') {\n                    ch = reader.nextChar();\n                }\n\t    }\n\t    ttext.write(ch);\n\t}\n\tnew Node.TemplateText(ttext.toString(), start, parent);\n    }\n```"
            ],
            [
                1,
                "java",
                "FileUtil.outChars",
                "```java\nprotected static void outChars(final File dest, final char[] data, final String encoding, final boolean append) throws IOException {\n\t\tif (dest.exists()) {\n\t\t\tcheckIsFile(dest);\n\t\t}\n\t\tWriter out = new BufferedWriter(StreamUtil.outputStreamWriterOf(new FileOutputStream(dest, append), encoding));\n\t\ttry {\n\t\t\tout.write(data);\n\t\t} finally {\n\t\t\tStreamUtil.close(out);\n\t\t}\n\t}\n```"
            ],
            [
                21,
                "java",
                "ObjectFactory.createGesamtbelastungbrutto",
                "```java\n@XmlElementDecl(namespace = \"\", name = \"gesamtbelastungbrutto\")\n    @XmlJavaTypeAdapter(Adapter2 .class)\n    public JAXBElement<BigDecimal> createGesamtbelastungbrutto(BigDecimal value) {\n        return new JAXBElement<BigDecimal>(_Gesamtbelastungbrutto_QNAME, BigDecimal.class, null, value);\n    }\n```"
            ],
            [
                140,
                "python",
                "TreeRegression.Cov",
                "```python\ndef Cov(self):\n        \"\"\"\n        calculate the covariance matrix of the tips assuming variance\n        has accumulated along branches of the tree accoriding to the\n        the provided\n        Returns\n        -------\n\n         M : (np.array)\n            covariance matrix with tips arranged standard transersal order.\n        \"\"\"\n        # accumulate the covariance matrix by adding 'squares'\n        M = np.zeros((self.N, self.N))\n        for n in self.tree.find_clades():\n            if n == self.tree.root:\n                continue\n            M[np.meshgrid(n._ii, n._ii)] += self.branch_variance(n)\n        return M\n```"
            ],
            [
                259,
                "go",
                "Observe",
                "```go\nfunc (td *TimeoutDetector) Observe(which uint64) (bool, time.Duration) {\n\ttd.mu.Lock()\n\tdefer td.mu.Unlock()\n\n\tok := true\n\tnow := time.Now()\n\texceed := time.Duration(0)\n\n\tif pt, found := td.records[which]; found {\n\t\texceed = now.Sub(pt) - td.maxDuration\n\t\tif exceed > 0 {\n\t\t\tok = false\n\t\t}\n\t}\n\ttd.records[which] = now\n\treturn ok, exceed\n}\n```"
            ],
            [
                553,
                "python",
                "CassandraToGoogleCloudStorageOperator.convert_tuple_type",
                "```python\ndef convert_tuple_type(cls, name, value):\n        \"\"\"\n        Converts a tuple to RECORD that contains n fields, each will be converted\n        to its corresponding data type in bq and will be named 'field_<index>', where\n        index is determined by the order of the tuple elements defined in cassandra.\n        \"\"\"\n        names = ['field_' + str(i) for i in range(len(value))]\n        values = [cls.convert_value(name, value) for name, value in zip(names, value)]\n        return cls.generate_data_dict(names, values)\n```"
            ],
            [
                212,
                "java",
                "DownloadService.doCheck",
                "```java\nprivate void doCheck() {\n        if (!running) return;\n        if (fileManager == null) return;\n        \n        if (unexpectedErrors > MAX_UNEXPECTED_ERRORS) {\n            log.info(\"Terminating because of errors\");\n            terminate(false);\n            return;\n        }\n\n        Timer.Context waitTimerContext = waitingTimer.time();\n        // Possible infinite thread sleep? This will make sure we fire downloading only when are the files are consumed/merged\n        while (downloadDir.listFiles().length != 0) {\n            log.debug(\"Waiting for files in download directory to clear up. Sleeping for 1 min. If you see this persistently, it means the downloaded files are not getting merged properly/timely\");\n            try { Thread.sleep(60000); } catch (Exception ex) {}\n        }\n        waitTimerContext.stop();\n        if (downloadLock.tryLock()) {\n            try {\n                if (fileManager.hasNewFiles()) {\n                    fileManager.downloadNewFiles(downloadDir);\n                }\n            } catch (Throwable unexpected) {\n                unexpectedErrors += 1;\n                log.error(\"UNEXPECTED; WILL TRY TO RECOVER\");\n                log.error(unexpected.getMessage(), unexpected);\n                // sleep for a minute?\n                if (Thread.interrupted()) {\n                    try {\n                        thread.sleep(60000);\n                    } catch (Exception ex) {\n                        log.error(ex.getMessage(), ex);\n                    }\n                }\n            } finally {\n                downloadLock.unlock();\n            }\n        } else {\n            log.debug(\"Download in progress\");\n        }\n    }\n```"
            ],
            [
                810,
                "java",
                "OgnlContext.popEvaluation",
                "```java\npublic Evaluation popEvaluation()\n    {\n        Evaluation result;\n\n        result = _currentEvaluation;\n        setCurrentEvaluation(result.getParent());\n        if (_currentEvaluation == null) {\n            setLastEvaluation(getKeepLastEvaluation() ? result : null);\n            setRootEvaluation(null);\n            setCurrentNode(null);\n        }\n        return result;\n    }\n```"
            ],
            [
                147,
                "java",
                "OArrays.contains",
                "```java\npublic static <T> boolean contains(final T[] iArray, final T iToFind) {\n    if (iArray == null || iArray.length == 0)\n      return false;\n\n    for (T e : iArray)\n      if (e != null && e.equals(iToFind))\n        return true;\n\n    return false;\n  }\n```"
            ],
            [
                281,
                "java",
                "FilterApi.ltEq",
                "```java\npublic static <T extends Comparable<T>, C extends Column<T> & SupportsLtGt> LtEq<T> ltEq(C column, T value) {\n    return new LtEq<T>(column, value);\n  }\n```"
            ],
            [
                210,
                "python",
                "verify_and_strip",
                "```python\ndef verify_and_strip(resp):\n    \"\"\"Verify checksum and strip header and footer of received frame.\"\"\"\n    if resp[0:2] != b'\\xFE\\xFE':\n        _LOGGER.error(\"Houston, we got problem:\")\n        print_hex(resp)\n        raise Exception(\"Wrong header - got %X%X\" % (resp[0], resp[1]))\n    if resp[-2:] != b'\\xFE\\x0D':\n        raise Exception(\"Wrong footer - got %X%X\" % (resp[-2], resp[-1]))\n    output = resp[2:-2].replace(b'\\xFE\\xF0', b'\\xFE')\n\n    c = checksum(bytearray(output[0:-2]))\n\n    if (256 * output[-2:-1][0] + output[-1:][0]) != c:\n        raise Exception(\"Wrong checksum - got %d expected %d\" % (\n            (256 * output[-2:-1][0] + output[-1:][0]), c))\n\n    return output[0:-2]\n```"
            ],
            [
                735,
                "go",
                "UnmarshalJSON",
                "```go\nfunc (p *Policy) UnmarshalJSON(data []byte) error {\n\t*p = Policy{}\n\ttransports := policyTransportsMap{}\n\tif err := paranoidUnmarshalJSONObject(data, func(key string) interface{} {\n\t\tswitch key {\n\t\tcase \"default\":\n\t\t\treturn &p.Default\n\t\tcase \"transports\":\n\t\t\treturn &transports\n\t\tdefault:\n\t\t\treturn nil\n\t\t}\n\t}); err != nil {\n\t\treturn err\n\t}\n\n\tif p.Default == nil {\n\t\treturn InvalidPolicyFormatError(\"Default policy is missing\")\n\t}\n\tp.Transports = map[string]PolicyTransportScopes(transports)\n\treturn nil\n}\n```"
            ],
            [
                778,
                "java",
                "GraphicalVertex.dumpConstraints",
                "```java\npublic static String dumpConstraints(final Constraint[] constraints) {\n        if ( constraints == null ) {\n            return null;\n        }\n        final StringBuffer buffer = new StringBuffer();\n        for ( int i = 0, length = constraints.length; i < length; i++ ) {\n            buffer.append( constraints[i].toString() + \"<br>\" );\n        }\n        return buffer.toString();\n    }\n```"
            ],
            [
                914,
                "javascript",
                "API",
                "```javascript\nfunction API (apiUrl, requester) {\n  var _this = this;\n  _this.apiUrl = apiUrl;\n\n  // Dependency injection. Allow a custom request module.\n  var request = requester ? requester(apiUrl) : Requester(apiUrl);\n\n  /**\n   * Creates a new user account\n   * @param user {object} the user to be created. Requires username, email, password\n   * @param authUser {object} the user authenticating this request. Requires token or username and password\n   * @param notify {boolean} send notification email to user\n   * @return {Promise<object>} the newly created user\n   */\n  _this.createUser = function (user, authUser, notify) {\n    user.send_notify = notify;\n\n    return request('admin/users', authUser, user).then(stat.checkCreatedResponse);\n  };\n\n  /**\n   * Edits the details on an existing user account\n   * @param user {object} the user who's information will be updated. Requires username (note: the username cannot be changed)\n   * @param authUser {object} the user authenticating this request. Requires token or username and password\n   * @returns {Promise<object>} the updated user object\n     */\n  _this.editUser = function (user, authUser) {\n    return request('admin/users/' + user.username, authUser, user, 'PATCH').then(stat.checkStandardResponse);\n  };\n\n  /**\n   * Deletes a user\n   * @param user {object} the user to delete. Requires username\n   * @param authUser {object} the user authenticating this request. Users cannot delete themselves. Requires token or username and password\n   * @returns {Promise} resolves if successful\n   */\n  _this.deleteUser = function (user, authUser) {\n    if (user.username === authUser.username) {\n      return Promise.reject('Users cannot delete themselves!');\n    }\n      \n    return request('admin/users/' + user.username, authUser, null, 'DELETE').then(stat.checkNoContentResponse);\n  };\n\n  /**\n   * Searches for users that match the query\n   * @param query {string}\n   * @param limit {int} the maximum number of results to return\n   * @param authUser {object} the user authenticating this request. If null the email fields will be empty in the result. Requires token or username and password\n   * @returns {Promise<array>} an array of user objects\n   */\n  _this.searchUsers = function (query, limit, authUser) {\n    limit = limit || 10; // no zero limit allowed\n\n    return request('users/search?q=' + query + '&limit=' + limit, authUser).then(stat.checkOkResponse);\n  };\n\n  /**\n   * Retrieves a user\n   * @param user {object} the user to retrieve. Requires username\n   * @param authUser {object} the user to authenticate as. If null the email field in the response will be empty. Requires token or username and password\n   * @returns {Promise<object>} the found user object\n   */\n  _this.getUser = function (user, authUser) {\n    return request('users/' + user.username, authUser).then(stat.checkStandardResponse);\n  };\n\n  /**\n   * Searches for public repositories that match the query\n   * @param query {string}\n   * @param uid {int} the id of the user whose repositories will be searched. 0 will search all\n   * @param limit {int} the maximum number of results to return\n   * @returns {Promise<array>} an array of repository objects\n   */\n  _this.searchRepos = function (query, uid, limit) {\n    uid = uid || 0;\n    limit = limit || 10;\n\n    return request('repos/search?q=' + query + '&uid=' + uid + '&limit=' + limit).then(stat.checkOkResponse);\n  };\n\n  /**\n   * Creates a new repository for the user\n   * @param repo {object} the repository being created. Requires name, description, private\n   * @param user {object} the user creating the repository. Requires token or username and password\n   * @returns {Promise<object>} the new repository object\n     */\n  _this.createRepo = function (repo, user) {\n    return request('user/repos', user, {\n      name: repo.name,\n      description: repo.description,\n      private: repo.private\n    }, null).then(stat.checkCreatedResponse);\n  };\n\n  /**\n   * Returns information about a single repository\n   * @param repo {object} the repository that will be retrieved. Requires full_name\n   * @param authUser {object} the user authenticating this request. Requires username, password or token\n   * @returns {Promise<object>} the repository object\n   */\n  _this.getRepo = function (repo, authUser) {\n\treturn request('repos/' + repo.full_name, authUser).then(stat.checkStandardResponse);\n  };\n\n  /**\n   * Returns an array of repositories this user has access to\n   * @param user {object} the user who's repositories will be listed. Requires token or username and password\n   * @returns {Promise<array>} an array of repository objects\n   */\n  _this.listRepos = function (user) {\n    return request('user/repos', user).then(stat.checkStandardResponse);\n  };\n\n  /**\n   * Deletes a repository from the user\n   * @param repo {object} the repository to delete. Requires name\n   * @param user {object} the user that owns the repository. Requires token or username and password\n   * @returns {Promise} resolves if successful\n   */\n  _this.deleteRepo = function (repo, user) {\n    return request('repos/' + user.username + '/' + repo.name, user, null, 'DELETE').then(stat.checkNoContentResponse);\n  };\n\n  /**\n   * Creates an authentication token for the user\n   * @param token {object} the token to be created. Requires name\n   * @param user {object} the user creating the token. Requires username, token or password\n   * @returns {Promise<object>} the new token object\n   */\n  _this.createToken = function (token, user) {\n    return request('users/' + user.username + '/tokens', user, {name: token.name}).then(stat.checkCreatedResponse);\n  };\n\n  /**\n   * Returns an array of tokens the user has\n   * @param user {object} the user who's tokens will be listed. Requires username, password\n   * @returns {Promise<array>} an array of token objects\n   */\n  _this.listTokens = function (user) {\n    return request('users/' + user.username + '/tokens', user).then(stat.checkStandardResponse);\n  };\n\n  /**\n   * Creates a public key for the user\n   * @param key {object} the key to be created. Requires title, key\n   * @param user {object} the user creating the key. Requires token or username and password\n   * @returns {Promise<object>} the new public key object\n   */\n  _this.createPublicKey = function (key, user) {\n    return request('user/keys', user, {\n      title: key.title,\n      key: key.key\n    }).then(stat.checkCreatedResponse);\n  };\n\n  /**\n   * Returns an array of public keys that belong to the user\n   * @param user {object} the user who's public keys will be listed. Requires username, token or password\n   * @returns {Promise<array>} an array of public key objects\n   */\n  _this.listPublicKeys = function (user) {\n    return request('users/' + user.username + '/keys', user).then(stat.checkStandardResponse);\n  };\n\n  /**\n   * Returns the full details for a public key\n   * @param key {object} the key that will be retrieved. Requires id\n   * @param user {object} the user who's key will be retrieved. Requires token or username and password\n   * @returns {Promise<object>} the public key object\n   */\n  _this.getPublicKey = function (key, user) {\n    return request('user/keys/' + key.id, user).then(stat.checkStandardResponse);\n  };\n\n  /**\n   * Deletes a public key from the user\n   * @param key {object} the key to be deleted. Requires id\n   * @param user {object} the user who's key will be deleted. Requires token or username and password\n   * @returns {Promise} resolves if successful\n     */\n  _this.deletePublicKey = function (key, user) {\n    return request('user/keys/' + key.id, user, null, 'DELETE').then(stat.checkNoContentResponse);\n  };\n\n  return _this;\n}\n```"
            ],
            [
                143,
                "python",
                "KernelCode._build_scalar_declarations",
                "```python\ndef _build_scalar_declarations(self, with_init=True):\n        \"\"\"Build and return scalar variable declarations\"\"\"\n        # copy scalar declarations from from kernel ast\n        scalar_declarations = [deepcopy(d) for d in self.kernel_ast.block_items\n                               if type(d) is c_ast.Decl and type(d.type) is c_ast.TypeDecl]\n        # add init values to declarations\n        if with_init:\n            random.seed(2342)  # we want reproducible random numbers\n            for d in scalar_declarations:\n                if d.type.type.names[0] in ['double', 'float']:\n                    d.init = c_ast.Constant('float', str(random.uniform(1.0, 0.1)))\n                elif d.type.type.names[0] in ['int', 'long', 'long long',\n                                              'unsigned int', 'unsigned long', 'unsigned long long']:\n                    d.init = c_ast.Constant('int', 2)\n\n        return scalar_declarations\n```"
            ],
            [
                523,
                "java",
                "UtilPolygons2D_F64.convert",
                "```java\npublic static void convert( Polygon2D_F64 input , Quadrilateral_F64 output ) {\n\t\tif( input.size() != 4 )\n\t\t\tthrow new IllegalArgumentException(\"Expected 4-sided polygon as input\");\n\n\t\toutput.a.set(input.get(0));\n\t\toutput.b.set(input.get(1));\n\t\toutput.c.set(input.get(2));\n\t\toutput.d.set(input.get(3));\n\t}\n```"
            ],
            [
                223,
                "javascript",
                "numberOfLeadingZeros",
                "```javascript\nfunction numberOfLeadingZeros(value) {\n    if (value.equals(Long.ZERO)) {\n      return 64;\n    }\n    let n = 1;\n    let x = value.getHighBits();\n    if (x === 0) {\n      n += 32;\n      x = value.getLowBits();\n    }\n    if (x >>> 16 === 0) {\n      n += 16;\n      x <<= 16;\n    }\n    if (x >>> 24 === 0) {\n      n += 8;\n      x <<= 8;\n    }\n    if (x >>> 28 === 0) {\n      n += 4;\n      x <<= 4;\n    }\n    if (x >>> 30 === 0) {\n      n += 2;\n      x <<= 2;\n    }\n    n -= x >>> 31;\n    return n;\n  }\n```"
            ],
            [
                578,
                "java",
                "Condition.create",
                "```java\npublic static Condition create(String ifHeader) throws WebDAVException {\n        StreamTokenizer tokenizer = new StreamTokenizer(new StringReader(ifHeader));\n        // URI characters\n        tokenizer.wordChars('!', '/');\n        tokenizer.wordChars(':', '@');\n        tokenizer.ordinaryChar('(');\n        tokenizer.ordinaryChar(')');\n        tokenizer.ordinaryChar('<');\n        tokenizer.ordinaryChar('>');\n        tokenizer.ordinaryChar('[');\n        tokenizer.ordinaryChar(']');\n        tokenizer.quoteChar('\"');\n        Condition condition = null;\n        try {\n            int token = tokenizer.nextToken();\n            condition = Condition.create(tokenizer);\n            token = tokenizer.ttype;\n            if (token != StreamTokenizer.TT_EOF) {\n                throw new WebDAVException(IResponse.SC_BAD_REQUEST, Policy.bind(\"error.parseMissing\", String.valueOf(token), \"EOF\")); //$NON-NLS-1$ //$NON-NLS-2$\n            }\n        } catch (IOException exc) {\n            // ignore or log?\n        }\n        return condition;\n    }\n```"
            ],
            [
                52,
                "javascript",
                "",
                "```javascript\nfunction(Template){\n\t\treturn [Template.language.tag('exit'),Template.language.tag('exitloop'),Template.language.tag('continue')];\n\t}\n```"
            ],
            [
                242,
                "go",
                "GetRedactedVersion",
                "```go\nfunc (s *Task) GetRedactedVersion() RedactedTask {\n\ts.mutex.RLock()\n\trt := RedactedTask{\n\t\tID:         s.ID,\n\t\tTimestamp:  s.Timestamp,\n\t\tExpires:    s.Expires,\n\t\tStatus:     s.Status,\n\t\tProfile:    s.Profile,\n\t\tCallerName: s.CallerName,\n\t\tMetaData:   s.MetaData,\n\t}\n\ts.mutex.RUnlock()\n\treturn rt\n}\n```"
            ],
            [
                111,
                "python",
                "H2OFrame.convert_H2OFrame_2_DMatrix",
                "```python\ndef convert_H2OFrame_2_DMatrix(self, predictors, yresp, h2oXGBoostModel):\n        '''\n        This method requires that you import the following toolboxes: xgboost, pandas, numpy and scipy.sparse.\n\n        This method will convert an H2OFrame to a DMatrix that can be used by native XGBoost.  The H2OFrame contains\n        numerical and enum columns alone.  Note that H2O one-hot-encoding introduces a missing(NA)\n        column. There can be NAs in any columns.\n\n        Follow the steps below to compare H2OXGBoost and native XGBoost:\n\n        1. Train the H2OXGBoost model with H2OFrame trainFile and generate a prediction:\n        h2oModelD = H2OXGBoostEstimator(**h2oParamsD) # parameters specified as a dict()\n        h2oModelD.train(x=myX, y=y, training_frame=trainFile) # train with H2OFrame trainFile\n        h2oPredict = h2oPredictD = h2oModelD.predict(trainFile)\n\n        2. Derive the DMatrix from H2OFrame:\n        nativeDMatrix = trainFile.convert_H2OFrame_2_DMatrix(myX, y, h2oModelD)\n\n        3. Derive the parameters for native XGBoost:\n        nativeParams = h2oModelD.convert_H2OXGBoostParams_2_XGBoostParams()\n\n        4. Train your native XGBoost model and generate a prediction:\n        nativeModel = xgb.train(params=nativeParams[0], dtrain=nativeDMatrix, num_boost_round=nativeParams[1])\n        nativePredict = nativeModel.predict(data=nativeDMatrix, ntree_limit=nativeParams[1].\n\n        5. Compare the predictions h2oPredict from H2OXGBoost, nativePredict from native XGBoost.\n\n        :param h2oFrame: H2OFrame to be converted to DMatrix for native XGBoost\n        :param predictors: List of predictor columns, can be column names or indices\n        :param yresp: response column, can be column index or name\n        :param h2oXGBoostModel: H2OXGboost model that are built with the same H2OFrame as input earlier\n        :return: DMatrix that can be an input to a native XGBoost model\n        '''\n        import xgboost as xgb\n        import pandas as pd\n        import numpy as np\n        from scipy.sparse import csr_matrix\n\n        assert isinstance(predictors, list) or isinstance(predictors, tuple)\n        assert h2oXGBoostModel._model_json['algo'] == 'xgboost', \\\n            \"convert_H2OFrame_2_DMatrix is used for H2OXGBoost model only.\"\n\n        tempFrame = self[predictors].cbind(self[yresp])\n        colnames = tempFrame.names\n        if type(predictors[0])==type(1): # convert integer indices to column names\n            temp = []\n            for colInd in predictors:\n                temp.append(colnames[colInd])\n            predictors = temp\n\n        if (type(yresp) == type(1)):\n            tempy = colnames[yresp]\n            yresp = tempy # column name of response column\n\n        enumCols = [] # extract enum columns out to process them\n        enumColsIndices = []     # store enum column indices\n        typeDict = self.types\n        for predName in predictors:\n            if str(typeDict[predName])=='enum':\n                enumCols.append(predName)\n                enumColsIndices.append(colnames.index(predName))\n\n        pandaFtrain = tempFrame.as_data_frame(use_pandas=True, header=True)\n        nrows = tempFrame.nrow\n\n        # convert H2OFrame to DMatrix starts here\n        if len(enumCols) > 0:   # enumCols contain all enum column names\n            allDomain = tempFrame.levels() # list all domain levels with column indices\n            domainLen = []\n            for enumIndex in enumColsIndices:\n                if len(allDomain[enumIndex])>0:\n                    domainLen.append(len(allDomain[enumIndex])*-1)\n            incLevel = np.argsort(domainLen) # indices of enum column indices with decreasing domain length\n\n            # need to move enum columns to the front, highest level first\n            c2 = tempFrame[enumCols[incLevel[0]]]\n            tempFrame = tempFrame.drop(enumCols[incLevel[0]])\n            for index in range(1, len(incLevel)):\n                c2 = c2.cbind(tempFrame[enumCols[incLevel[index]]])\n                tempFrame = tempFrame.drop(enumCols[incLevel[index]])\n               \n            enumCols = c2.names\n            tempFrame = c2.cbind(tempFrame)\n            pandaFtrain = tempFrame.as_data_frame(use_pandas=True, header=True) # redo translation from H2O to panda\n        \n            pandaTrainPart = generatePandaEnumCols(pandaFtrain, enumCols[0], nrows, tempFrame[enumCols[0]].categories())\n            pandaFtrain.drop([enumCols[0]], axis=1, inplace=True)\n\n            for colInd in range(1, len(enumCols)):\n                cname=enumCols[colInd]\n                ctemp = generatePandaEnumCols(pandaFtrain, cname,  nrows, tempFrame[enumCols[colInd]].categories())\n                pandaTrainPart=pd.concat([pandaTrainPart, ctemp], axis=1)\n                pandaFtrain.drop([cname], axis=1, inplace=True)\n\n            pandaFtrain = pd.concat([pandaTrainPart, pandaFtrain], axis=1)\n\n        c0= tempFrame[yresp].asnumeric().as_data_frame(use_pandas=True, header=True)\n        pandaFtrain.drop([yresp], axis=1, inplace=True)\n        pandaF = pd.concat([c0, pandaFtrain], axis=1)\n        pandaF.rename(columns={c0.columns[0]:yresp}, inplace=True)\n        newX = list(pandaFtrain.columns.values)\n        data = pandaF.as_matrix(newX)\n        label = pandaF.as_matrix([yresp])\n\n        return xgb.DMatrix(data=csr_matrix(data), label=label) \\\n            if h2oXGBoostModel._model_json['output']['sparse'] else xgb.DMatrix(data=data, label=label)\n```"
            ],
            [
                103,
                "python",
                "OALParser.p_statement_list_1",
                "```python\ndef p_statement_list_1(self, p):\n        '''statement_list : statement SEMICOLON statement_list'''\n        p[0] = p[3]\n        if p[1] is not None:\n            p[0].children.insert(0, p[1])\n```"
            ]
        ]
    },
    "FuncNameTest-All MRR (bs=1,000)": 0.03077585362028777,
    "Examples-Validation": {
        "_type": "table",
        "columns": [
            "Rank",
            "Language",
            "Query",
            "Code"
        ],
        "data": [
            [
                78,
                "python",
                "is_valid_url",
                "```python\ndef is_valid_url(url):\n  \"\"\"\n  Check if a given string is in the correct URL format or not\n\n  :param str url:\n  :return: True or False\n  \"\"\"\n  regex = re.compile(r'^(?:http|ftp)s?://'\n                     r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'\n                     r'localhost|'\n                     r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'\n                     r'(?::\\d+)?'\n                     r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n  if regex.match(url):\n    logger.info(\"URL given as config\")\n    return True\n  else:\n    return False\n```"
            ],
            [
                41,
                "php",
                "QuestionPolicy.destroy",
                "```php\npublic function destroy(UserPolicy $user, Question $question)\n    {\n        return $question->user_id == user_id() && $question->user_type == user_type();\n    }\n```"
            ],
            [
                673,
                "java",
                "BinaryTriplesRedisClusterClient.ssvals",
                "```java\npublic void ssvals(final byte[] keyspace, final byte[] uid, final byte[] serviceCode) {\n        sendCommand(Command.S3SVALS, keyspace, uid, serviceCode);\n    }\n```"
            ],
            [
                500,
                "go",
                "getRole",
                "```go\nfunc getRole(c redis.Conn) (string, error) {\n\tres, err := c.Do(\"ROLE\")\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\trres, ok := res.([]interface{})\n\tif ok {\n\t\treturn redis.String(rres[0], nil)\n\t}\n\treturn \"\", errors.New(\"redigo: can not transform ROLE reply to string\")\n}\n```"
            ],
            [
                343,
                "python",
                "NodeVisitor.lr",
                "```python\ndef lr(self, lis, op):\n        \"\"\"performs this operation on a list from *left to right*\n        op must take 2 args\n        a,b,c  => op(op(a, b), c)\"\"\"\n        it = iter(lis)\n        res = trans(it.next())\n        for e in it:\n            e = trans(e)\n            res = op(res, e)\n        return res\n```"
            ],
            [
                310,
                "python",
                "Ranges.condense_ranges",
                "```python\ndef condense_ranges(cls, ranges):\n        \"\"\"Sorts and removes overlaps\"\"\"\n        result = []\n        if ranges:\n            ranges.sort(key=lambda tup: tup[0])\n            result.append(ranges[0])\n            for i in range(1, len(ranges)):\n                if result[-1][1] + 1 >= ranges[i][0]:\n                    result[-1] = (result[-1][0], max(result[-1][1], ranges[i][1]))\n                else:\n                    result.append(ranges[i])\n        return result\n```"
            ],
            [
                101,
                "javascript",
                "",
                "```javascript\nfunction(baseURL, relativeURL, opts) {\n      opts = opts || {};\n      // remove any remaining space and CRLF\n      baseURL = baseURL.trim();\n      relativeURL = relativeURL.trim();\n      if (!relativeURL) {\n        // 2a) If the embedded URL is entirely empty, it inherits the\n        // entire base URL (i.e., is set equal to the base URL)\n        // and we are done.\n        if (!opts.alwaysNormalize) {\n          return baseURL;\n        }\n        var basePartsForNormalise = URLToolkit.parseURL(baseURL);\n        if (!basePartsForNormalise) {\n          throw new Error('Error trying to parse base URL.');\n        }\n        basePartsForNormalise.path = URLToolkit.normalizePath(basePartsForNormalise.path);\n        return URLToolkit.buildURLFromParts(basePartsForNormalise);\n      }\n      var relativeParts = URLToolkit.parseURL(relativeURL);\n      if (!relativeParts) {\n        throw new Error('Error trying to parse relative URL.');\n      }\n      if (relativeParts.scheme) {\n        // 2b) If the embedded URL starts with a scheme name, it is\n        // interpreted as an absolute URL and we are done.\n        if (!opts.alwaysNormalize) {\n          return relativeURL;\n        }\n        relativeParts.path = URLToolkit.normalizePath(relativeParts.path);\n        return URLToolkit.buildURLFromParts(relativeParts);\n      }\n      var baseParts = URLToolkit.parseURL(baseURL);\n      if (!baseParts) {\n        throw new Error('Error trying to parse base URL.');\n      }\n      if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {\n        // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc\n        // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'\n        var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);\n        baseParts.netLoc = pathParts[1];\n        baseParts.path = pathParts[2];\n      }\n      if (baseParts.netLoc && !baseParts.path) {\n        baseParts.path = '/';\n      }\n      var builtParts = {\n        // 2c) Otherwise, the embedded URL inherits the scheme of\n        // the base URL.\n        scheme: baseParts.scheme,\n        netLoc: relativeParts.netLoc,\n        path: null,\n        params: relativeParts.params,\n        query: relativeParts.query,\n        fragment: relativeParts.fragment\n      };\n      if (!relativeParts.netLoc) {\n        // 3) If the embedded URL's <net_loc> is non-empty, we skip to\n        // Step 7.  Otherwise, the embedded URL inherits the <net_loc>\n        // (if any) of the base URL.\n        builtParts.netLoc = baseParts.netLoc;\n        // 4) If the embedded URL path is preceded by a slash \"/\", the\n        // path is not relative and we skip to Step 7.\n        if (relativeParts.path[0] !== '/') {\n          if (!relativeParts.path) {\n            // 5) If the embedded URL path is empty (and not preceded by a\n            // slash), then the embedded URL inherits the base URL path\n            builtParts.path = baseParts.path;\n            // 5a) if the embedded URL's <params> is non-empty, we skip to\n            // step 7; otherwise, it inherits the <params> of the base\n            // URL (if any) and\n            if (!relativeParts.params) {\n              builtParts.params = baseParts.params;\n              // 5b) if the embedded URL's <query> is non-empty, we skip to\n              // step 7; otherwise, it inherits the <query> of the base\n              // URL (if any) and we skip to step 7.\n              if (!relativeParts.query) {\n                builtParts.query = baseParts.query;\n              }\n            }\n          } else {\n            // 6) The last segment of the base URL's path (anything\n            // following the rightmost slash \"/\", or the entire path if no\n            // slash is present) is removed and the embedded URL's path is\n            // appended in its place.\n            var baseURLPath = baseParts.path;\n            var newPath = baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) + relativeParts.path;\n            builtParts.path = URLToolkit.normalizePath(newPath);\n          }\n        }\n      }\n      if (builtParts.path === null) {\n        builtParts.path = opts.alwaysNormalize ? URLToolkit.normalizePath(relativeParts.path) : relativeParts.path;\n      }\n      return URLToolkit.buildURLFromParts(builtParts);\n    }\n```"
            ],
            [
                494,
                "python",
                "_crosscorr",
                "```python\ndef _crosscorr(x, y, **kwargs):\n    \"\"\"\n    Returns the crosscorrelation sequence between two ndarrays.\n    This is performed by calling fftconvolve on x, y[::-1]\n\n    Parameters\n\n\n    x: ndarray\n    y: ndarray\n    axis: time axis\n    all_lags: {True/False}\n    whether to return all nonzero lags, or to clip the length of r_xy\n    to be the length of x and y. If False, then the zero lag correlation\n    is at index 0. Otherwise, it is found at (len(x) + len(y) - 1)/2\n\n    Notes\n\n\n    cross correlation is defined as\n    rxy[k] := E{X[t]*Y[t+k]}/(E{X*X}E{Y*Y})**.5,\n    where X,Y are zero mean random processes. It is the noramlized cross\n    covariance.\n    \"\"\"\n    sxy = _crosscov(x, y, **kwargs)\n    # estimate sigma_x, sigma_y to normalize\n    sx = np.std(x)\n    sy = np.std(y)\n    return sxy/(sx*sy)\n```"
            ],
            [
                279,
                "python",
                "VirtualResource.set_property_value",
                "```python\ndef set_property_value(self, name, value, dry_run=False):\n        \"\"\"Set or remove property value.\n\n        See DAVResource.set_property_value()\n        \"\"\"\n        if value is None:\n            # We can never remove properties\n            raise DAVError(HTTP_FORBIDDEN)\n        if name == \"{virtres:}tags\":\n            # value is of type etree.Element\n            self.data[\"tags\"] = value.text.split(\",\")\n        elif name == \"{virtres:}description\":\n            # value is of type etree.Element\n            self.data[\"description\"] = value.text\n        elif name in VirtualResource._supportedProps:\n            # Supported property, but read-only\n            raise DAVError(\n                HTTP_FORBIDDEN, err_condition=PRECONDITION_CODE_ProtectedProperty\n            )\n        else:\n            # Unsupported property\n            raise DAVError(HTTP_FORBIDDEN)\n        # Write OK\n        return\n```"
            ],
            [
                879,
                "python",
                "StaticSpaceImpl.del_attr",
                "```python\ndef del_attr(self, name):\n        \"\"\"Implementation of attribute deletion\n\n        ``del space.name`` by user script\n        Called from ``StaticSpace.__delattr__``\n        \"\"\"\n        if name in self.namespace:\n            if name in self.cells:\n                self.del_cells(name)\n            elif name in self.spaces:\n                self.del_space(name)\n            elif name in self.refs:\n                self.del_ref(name)\n            else:\n                raise RuntimeError(\"Must not happen\")\n        else:\n            raise KeyError(\"'%s' not found in Space '%s'\" % (name, self.name))\n```"
            ],
            [
                655,
                "python",
                "update",
                "```python\ndef update(ctx, name, description, tags):\n    \"\"\"Update experiment group.\n\n    Uses [Caching](/references/polyaxon-cli/#caching)\n\n    Example:\n\n    \\b\n    ```bash\n    $ polyaxon group -g 2 update --description=\"new description for this group\"\n    ```\n\n    \\b\n    ```bash\n    $ polyaxon update --tags=\"foo, bar\"\n    ```\n    \"\"\"\n    user, project_name, _group = get_project_group_or_local(ctx.obj.get('project'),\n                                                            ctx.obj.get('group'))\n    update_dict = {}\n\n    if name:\n        update_dict['name'] = name\n\n    if description:\n        update_dict['description'] = description\n\n    tags = validate_tags(tags)\n    if tags:\n        update_dict['tags'] = tags\n\n    if not update_dict:\n        Printer.print_warning('No argument was provided to update the experiment group.')\n        sys.exit(0)\n\n    try:\n        response = PolyaxonClient().experiment_group.update_experiment_group(\n            user, project_name, _group, update_dict)\n    except (PolyaxonHTTPError, PolyaxonShouldExitError, PolyaxonClientException) as e:\n        Printer.print_error('Could not update experiment group `{}`.'.format(_group))\n        Printer.print_error('Error message `{}`.'.format(e))\n        sys.exit(1)\n\n    Printer.print_success(\"Experiment group updated.\")\n    get_group_details(response)\n```"
            ],
            [
                107,
                "python",
                "ContentExtractor.post_cleanup",
                "```python\ndef post_cleanup(self):\n        \"\"\"\\\n        remove any divs that looks like non-content,\n        clusters of links, or paras with no gusto\n        \"\"\"\n        parse_tags = ['p']\n        if self.config.parse_lists:\n            parse_tags.extend(['ul', 'ol'])\n        if self.config.parse_headers:\n            parse_tags.extend(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])\n\n        target_node = self.article.top_node\n        node = self.add_siblings(target_node)\n        for elm in self.parser.getChildren(node):\n            e_tag = self.parser.getTag(elm)\n            if e_tag not in parse_tags:\n                if (self.is_highlink_density(elm) or self.is_table_and_no_para_exist(elm) or\n                        not self.is_nodescore_threshold_met(node, elm)):\n                    self.parser.remove(elm)\n        return node\n```"
            ],
            [
                134,
                "php",
                "Articles_Controller_Admin_Content.actionProperties",
                "```php\nprotected function actionProperties()\n    {\n        $legacyEresus = Eresus_CMS::getLegacyKernel();\n        $sections = $legacyEresus->sections;\n        /** @var TAdminUI $page */\n        $page = Eresus_Kernel::app()->getPage();\n        $section = $sections->get($page->id);\n\n        if ('POST' == $legacyEresus->request['method'])\n        {\n            $section['content'] = arg('content');\n            $sections->update($section);\n\n            HTTP::redirect($page->url(array('action' => 'properties')));\n        }\n\n        $form = array(\n            'name' => 'contentEditor',\n            'caption' => '\u0422\u0435\u043a\u0441\u0442 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435',\n            'width' => '95%',\n            'fields' => array(\n                array('type' => 'hidden', 'name' => 'action', 'value' => 'properties'),\n                array('type' => 'html', 'name' => 'content', 'height' => '400px'),\n            ),\n            'buttons'=> array('ok' => '\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c'),\n        );\n\n        $html = $page->renderForm($form, $section);\n        return $html;\n    }\n```"
            ],
            [
                685,
                "php",
                "AbstractTemplate.make",
                "```php\nprivate function make(string $block, array $vars = null): string\n    {\n        $commonVars = static::COMMON_NAME . static::VARS_PROPERTY_SUFFIX;\n        $blockVars = $block . static::VARS_PROPERTY_SUFFIX;\n        $allVars = [];\n        if (isset($this->$commonVars) && is_array($this->$commonVars)) {\n            $allVars = $this->$commonVars;\n        }\n        if (isset($this->$blockVars) && is_array($this->$blockVars)) {\n            $allVars += $this->$blockVars;\n        }\n        if (isset($vars)) {\n            $allVars += $vars;\n        }\n        $file = $this->path . $this->{$block . static::BLOCK_PROPERTY_SUFFIX} . '.' . static::FILE_EXTENSION;\n\n        $localScope = function ($vars, $file) {\n            ob_start();\n            extract($vars);\n            try {\n                require $file;\n            } catch (\\Exception $exception) {\n                ob_end_clean();\n                throw $exception;\n            }\n            $_ = isset($_) ? str_pad('', $_) : '';\n\n            return str_replace(PHP_EOL, PHP_EOL . $_, PHP_EOL . ob_get_clean());\n        };\n\n        return $localScope($allVars, $file);\n    }\n```"
            ],
            [
                203,
                "php",
                "OrderItemListener.applySaleItemRecursively",
                "```php\nprotected function applySaleItemRecursively(Model\\SaleItemInterface $item)\n    {\n        // If subject has changed\n        if ($this->persistenceHelper->isChanged($item, 'subjectIdentity.identifier')) {\n            $this->stockAssigner->detachSaleItem($item);\n            $this->stockAssigner->assignSaleItem($item);\n        } else {\n            $this->stockAssigner->applySaleItem($item);\n        }\n\n        foreach ($item->getChildren() as $child) {\n            if (\n                $this->persistenceHelper->isScheduledForInsert($child)\n                || (\n                    $this->persistenceHelper->isScheduledForUpdate($child)\n                    && $this->persistenceHelper->isChanged($child, ['quantity', 'subjectIdentity.identifier'])\n                )\n            ) {\n                // Skip this item as the listener will be called on it.\n                /** @see OrderItemListener::onUpdate() */\n                continue;\n            }\n\n            $this->applySaleItemRecursively($child);\n        }\n    }\n```"
            ],
            [
                98,
                "python",
                "_write_callback",
                "```python\ndef _write_callback(connection_id, data_buffer, data_length_pointer):\n    \"\"\"\n    Callback called by Secure Transport to actually write to the socket\n\n    :param connection_id:\n        An integer identifing the connection\n\n    :param data_buffer:\n        A char pointer FFI type containing the data to write\n\n    :param data_length_pointer:\n        A size_t pointer FFI type of the amount of data to write. Will be\n        overwritten with the amount of data actually written on return.\n\n    :return:\n        An integer status code of the result - 0 for success\n    \"\"\"\n\n    try:\n        self = _connection_refs.get(connection_id)\n        if not self:\n            socket = _socket_refs.get(connection_id)\n        else:\n            socket = self._socket\n\n        if not self and not socket:\n            return 0\n\n        data_length = deref(data_length_pointer)\n        data = bytes_from_buffer(data_buffer, data_length)\n\n        if self and not self._done_handshake:\n            self._client_hello += data\n\n        error = None\n        try:\n            sent = socket.send(data)\n        except (socket_.error) as e:\n            error = e.errno\n\n        if error is not None and error != errno.EAGAIN:\n            if error == errno.ECONNRESET or error == errno.EPIPE:\n                return SecurityConst.errSSLClosedNoNotify\n            return SecurityConst.errSSLClosedAbort\n\n        if sent != data_length:\n            pointer_set(data_length_pointer, sent)\n            return SecurityConst.errSSLWouldBlock\n\n        return 0\n    except (KeyboardInterrupt) as e:\n        self._exception = e\n        return SecurityConst.errSSLPeerUserCancelled\n```"
            ],
            [
                203,
                "php",
                "RedirectContext.checkUserAccessToPages",
                "```php\npublic function checkUserAccessToPages($not, TableNode $paths)\n    {\n        $code = empty($not) ? 200 : 403;\n        $fails = [];\n\n        foreach (array_keys($paths->getRowsHash()) as $path) {\n            if (!$this->assertStatusCode($path, $code)) {\n                $fails[] = $path;\n            }\n        }\n\n        if (!empty($fails)) {\n            throw new \\Exception(sprintf(\n                'The following paths: \"%s\" are %s accessible!',\n                implode(', ', $fails),\n                $not ? '' : 'not'\n            ));\n        }\n    }\n```"
            ],
            [
                325,
                "python",
                "TextWrapper._wrap_chunks",
                "```python\ndef _wrap_chunks(self, chunks):\n        \"\"\"_wrap_chunks(chunks : [string]) -> [string]\n\n        Wrap a sequence of text chunks and return a list of lines of\n        length 'self.width' or less.  (If 'break_long_words' is false,\n        some lines may be longer than this.)  Chunks correspond roughly\n        to words and the whitespace between them: each chunk is\n        indivisible (modulo 'break_long_words'), but a line break can\n        come between any two chunks.  Chunks should not have internal\n        whitespace; ie. a chunk is either all whitespace or a \"word\".\n        Whitespace chunks will be removed from the beginning and end of\n        lines, but apart from that whitespace is preserved.\n        \"\"\"\n        lines = []\n        if self.width <= 0:\n            raise ValueError(\"invalid width %r (must be > 0)\" % self.width)\n\n        # Arrange in reverse order so items can be efficiently popped\n        # from a stack of chucks.\n        chunks.reverse()\n\n        while chunks:\n\n            # Start the list of chunks that will make up the current line.\n            # cur_len is just the length of all the chunks in cur_line.\n            cur_line = []\n            cur_len = 0\n\n            # Figure out which static string will prefix this line.\n            if lines:\n                indent = self.subsequent_indent\n            else:\n                indent = self.initial_indent\n\n            # Maximum width for this line.\n            width = self.width - len(indent)\n\n            # First chunk on line is whitespace -- drop it, unless this\n            # is the very beginning of the text (ie. no lines started yet).\n            if self.drop_whitespace and chunks[-1].strip() == '' and lines:\n                # del chunks[-1]\n                chunks.pop()\n\n            while chunks:\n                l = len(chunks[-1])\n\n                # Can at least squeeze this chunk onto the current line.\n                if cur_len + l <= width:\n                    cur_line.append(chunks.pop())\n                    cur_len += l\n\n                # Nope, this line is full.\n                else:\n                    break\n\n            # The current line is full, and the next chunk is too big to\n            # fit on *any* line (not just this one).\n            if chunks and len(chunks[-1]) > width:\n                self._handle_long_word(chunks, cur_line, cur_len, width)\n\n            # If the last chunk on this line is all whitespace, drop it.\n            if self.drop_whitespace and cur_line and cur_line[-1].strip() == '':\n                # del cur_line[-1]\n                cur_line.pop()\n\n            # Convert current line back to a string and store it in list\n            # of all lines (return value).\n            if cur_line:\n                lines.append(indent + ''.join(cur_line))\n\n        return lines\n```"
            ],
            [
                91,
                "java",
                "Multimaps.transformValues",
                "```java\npublic static <K, V1, V2> Multimap<K, V2> transformValues(\n      Multimap<K, V1> fromMultimap, final Function<? super V1, V2> function) {\n    checkNotNull(function);\n    EntryTransformer<K, V1, V2> transformer = Maps.asEntryTransformer(function);\n    return transformEntries(fromMultimap, transformer);\n  }\n```"
            ],
            [
                164,
                "python",
                "MinMaxScaler.fit",
                "```python\ndef fit(self, X, y=None):\n        \"\"\"Compute the minimum and maximum to be used for later scaling.\n\n        Parameters\n        ----------\n        X : array-like, shape [n_samples, n_features]\n            The data used to compute the per-feature minimum and maximum\n            used for later scaling along the features axis.\n        \"\"\"\n        X = check_array(X, copy=self.copy,\n                        dtype=[np.float64, np.float32, np.float16, np.float128])\n\n        feature_range = self.feature_range\n        if feature_range[0] >= feature_range[1]:\n            raise ValueError(\"Minimum of desired feature range must be smaller\"\n                             \" than maximum. Got %s.\" % str(feature_range))\n        if self.fit_feature_range is not None:\n            fit_feature_range = self.fit_feature_range\n            if fit_feature_range[0] >= fit_feature_range[1]:\n                raise ValueError(\"Minimum of desired (fit) feature range must \"\n                                 \"be smaller than maximum. Got %s.\"\n                                 % str(feature_range))\n            if (fit_feature_range[0] < feature_range[0] or\n                    fit_feature_range[1] > feature_range[1]):\n                raise ValueError(\"fit_feature_range must be a subset of \"\n                                 \"feature_range. Got %s, fit %s.\"\n                                 % (str(feature_range),\n                                    str(fit_feature_range)))\n            feature_range = fit_feature_range\n\n        data_min = np.min(X, axis=0)\n        data_range = np.max(X, axis=0) - data_min\n        # Do not scale constant features\n        data_range[data_range == 0.0] = 1.0\n        self.scale_ = (feature_range[1] - feature_range[0]) / data_range\n        self.min_ = feature_range[0] - data_min * self.scale_\n        self.data_range = data_range\n        self.data_min = data_min\n        return self\n```"
            ],
            [
                37,
                "java",
                "ProjectWizardParametersPage.setProjectName",
                "```java\npublic void setProjectName(String projectName) {\n\t\tif (artifactIdCombo.getText().equals(groupIdCombo.getText())) {\n\t\t\tgroupIdCombo.setText(projectName);\n\t\t}\n\t\tartifactIdCombo.setText(projectName);\n\t\tpackageCombo.setText(\"org.\" + projectName.replace('-', '.')); //$NON-NLS-1$\n\t\tvalidate();\n\t}\n```"
            ],
            [
                27,
                "python",
                "contents_of",
                "```python\ndef contents_of(f, encoding='utf-8'):\n    \"\"\"Helper to read the contents of the given file or path into a string with the given encoding.\n    Encoding defaults to 'utf-8', other useful encodings are 'ascii' and 'latin-1'.\"\"\"\n\n    try:\n        contents = f.read()\n    except AttributeError:\n        try:\n            with open(f, 'r') as fp:\n                contents = fp.read()\n        except TypeError:\n            raise ValueError('val must be file or path, but was type <%s>' % type(f).__name__)\n        except OSError:\n            if not isinstance(f, str_types):\n                raise ValueError('val must be file or path, but was type <%s>' % type(f).__name__)\n            raise\n\n    if sys.version_info[0] == 3 and type(contents) is bytes:\n        # in PY3 force decoding of bytes to target encoding\n        return contents.decode(encoding, 'replace')\n    elif sys.version_info[0] == 2 and encoding == 'ascii':\n        # in PY2 force encoding back to ascii\n        return contents.encode('ascii', 'replace')\n    else:\n        # in all other cases, try to decode to target encoding\n        try:\n            return contents.decode(encoding, 'replace')\n        except AttributeError:\n            pass\n    # if all else fails, just return the contents \"as is\"\n    return contents\n```"
            ],
            [
                972,
                "go",
                "read",
                "```go\nfunc (h *segmentHeader) read(rd *bufio.Reader) error {\n\th.segmentLength = rd.ReadInt32()\n\th.segmentOfs = rd.ReadInt32()\n\th.noOfParts = rd.ReadInt16()\n\th.segmentNo = rd.ReadInt16()\n\th.segmentKind = segmentKind(rd.ReadInt8())\n\n\tswitch h.segmentKind {\n\n\tdefault: //error\n\t\trd.Skip(11) //segmentHeaderLength\n\n\tcase skRequest:\n\t\th.messageType = messageType(rd.ReadInt8())\n\t\th.commit = rd.ReadBool()\n\t\th.commandOptions = commandOptions(rd.ReadInt8())\n\t\trd.Skip(8) //segmentHeaderLength\n\n\tcase skReply:\n\t\trd.Skip(1) //reserved\n\t\th.functionCode = functionCode(rd.ReadInt16())\n\t\trd.Skip(8) //segmentHeaderLength\n\n\t}\n\n\tif trace {\n\t\toutLogger.Printf(\"read segment header: %s\", h)\n\t}\n\n\treturn rd.GetError()\n}\n```"
            ],
            [
                706,
                "python",
                "Nemo.register",
                "```python\ndef register(self):\n        \"\"\" Register the app using Blueprint\n\n        :return: Nemo blueprint\n        :rtype: flask.Blueprint\n        \"\"\"\n        if self.app is not None:\n            if not self.blueprint:\n                self.blueprint = self.create_blueprint()\n            self.app.register_blueprint(self.blueprint)\n            if self.cache is None:\n                # We register a fake cache extension.\n                setattr(self.app.jinja_env, \"_fake_cache_extension\", self)\n                self.app.jinja_env.add_extension(FakeCacheExtension)\n            return self.blueprint\n        return None\n```"
            ],
            [
                666,
                "php",
                "Registry.isRegistered",
                "```php\npublic function isRegistered(Model $objModel)\n\t{\n\t\t$intObjectId = spl_object_hash($objModel);\n\n\t\treturn isset($this->arrIdentities[$intObjectId]);\n\t}\n```"
            ],
            [
                666,
                "python",
                "bookmark",
                "```python\ndef bookmark(ctx):\n    \"\"\"Bookmark group.\n\n    Uses [Caching](/references/polyaxon-cli/#caching)\n\n    Examples:\n\n    \\b\n    ```bash\n    $ polyaxon group bookmark\n    ```\n\n    \\b\n    ```bash\n    $ polyaxon group -g 2 bookmark\n    ```\n    \"\"\"\n    user, project_name, _group = get_project_group_or_local(ctx.obj.get('project'),\n                                                            ctx.obj.get('group'))\n\n    try:\n        PolyaxonClient().experiment_group.bookmark(user, project_name, _group)\n    except (PolyaxonHTTPError, PolyaxonShouldExitError, PolyaxonClientException) as e:\n        Printer.print_error('Could not bookmark group `{}`.'.format(_group))\n        Printer.print_error('Error message `{}`.'.format(e))\n        sys.exit(1)\n\n    Printer.print_success(\"Experiments group is bookmarked.\")\n```"
            ],
            [
                270,
                "java",
                "AndroidPublisherHelper.init",
                "```java\npublic static AndroidPublisher init( String applicationName,\n            @Nullable String serviceAccountEmail ) throws IOException, GeneralSecurityException\n    {\n        Preconditions.checkArgument( !Strings.isNullOrEmpty( applicationName ),\n                \"applicationName cannot be null or empty!\" );\n\n        // Authorization.\n        newTrustedTransport();\n        Credential credential;\n        credential = authorizeWithServiceAccount( serviceAccountEmail );\n\n        // Set up and return API client.\n        return new AndroidPublisher.Builder(\n                httpTransport, JSON_FACTORY, credential ).setApplicationName( applicationName )\n                .build();\n    }\n```"
            ],
            [
                528,
                "php",
                "Patch.generate",
                "```php\npublic function generate($sourceDocument, $targetDocument)\n    {\n        if ($sourceDocument === null || $targetDocument === null) {\n            return $targetDocument;\n        }\n\n        if ($sourceDocument == new \\stdClass()) {\n            return null;\n        }\n\n        if (is_array($sourceDocument)) {\n            if ($sourceDocument !== $targetDocument) {\n                return $targetDocument;\n            }\n\n            return null;\n        }\n\n        $patchDocument = new \\stdClass();\n        $sourceDocumentVars = get_object_vars($sourceDocument);\n        $targetDocumentVars = get_object_vars($targetDocument);\n\n        foreach ($targetDocumentVars as $var => $value) {\n            if (!in_array($var, array_keys($sourceDocumentVars))\n                || !in_array($value, array_values($sourceDocumentVars))\n            ) {\n                $patchDocument->$var = $value;\n            }\n        }\n\n        foreach ($sourceDocumentVars as $var => $value) {\n            if ($targetDocumentVars === []) {\n                $patchDocument->$var = null;\n                break;\n            }\n\n            if (is_object($value)) {\n                if ($sourceDocument->$var !== null && is_object($sourceDocument->$var)) {\n                    $subPatch = $this->generate($sourceDocument->$var, $targetDocument->$var);\n                    if ($subPatch !== null) {\n                        $patchDocument->$var = $subPatch;\n                    }\n                }\n            } elseif (!in_array($var, array_keys($targetDocumentVars))\n                      || !in_array($value, array_values($targetDocumentVars))) {\n                $sourceDocument->$var = null;\n                if (!in_array($var, array_keys($targetDocumentVars))) {\n                    $patchDocument->$var = null;\n                }\n            }\n        }\n\n        if (count(get_object_vars($patchDocument)) > 0) {\n            return $patchDocument;\n        }\n\n        return null;\n    }\n```"
            ],
            [
                60,
                "java",
                "AtomicDoubleArray.set",
                "```java\npublic final void set(int i, double newValue) {\n    long next = doubleToRawLongBits(newValue);\n    longs.set(i, next);\n  }\n```"
            ],
            [
                1,
                "go",
                "RemoveTask",
                "```go\nfunc (mr *MockTaskEngineStateMockRecorder) RemoveTask(arg0 interface{}) *gomock.Call {\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"RemoveTask\", reflect.TypeOf((*MockTaskEngineState)(nil).RemoveTask), arg0)\n}\n```"
            ],
            [
                82,
                "go",
                "Render",
                "```go\nfunc (c *Controller) Render(templateStr string, vars interface{}) *OkResponse {\n\tresponse := NewResponse()\n\tresponse.SetContent(c.RenderView(templateStr, vars))\n\treturn response\n}\n```"
            ],
            [
                820,
                "php",
                "Client.updateTask",
                "```php\npublic function updateTask($process_id, $task_id, $task_update_item)\n    {\n        list($response) = $this->updateTaskWithHttpInfo($process_id, $task_id, $task_update_item);\n        return $response;\n    }\n```"
            ],
            [
                353,
                "javascript",
                "constraintsCall",
                "```javascript\nfunction constraintsCall(constraints, connectType) {\n    let emitterCall = new EventEmitter();\n    // if docs found in couchDB database\n    constraintsToQuery(constraints).on('docsFound', (docsResults) => {\n        logger_1.logger.log('info', `Found ${docsResults.docs.length} docs for those constraints from ${connectType} request`);\n        logger_1.logger.log('debug', `Doc list found \\n ${JSON.stringify(docsResults)}`);\n        logger_1.logger.log('debug', `constraints: ${JSON.stringify(constraints)}`);\n        emitterCall.emit(`${connectType}Succeed`, docsResults.docs);\n    })\n        // if docs not found in couchDB database\n        .on('noDocsFound', (docsResults) => {\n        logger_1.logger.log('info', `No docs founds for constraints`);\n        logger_1.logger.log('debug', `constraints: \\n ${JSON.stringify(constraints)}`);\n        emitterCall.emit(`${connectType}NoResults`, docsResults.docs);\n    })\n        // if an error occured\n        .on('errorOnConstraints', (err) => {\n        logger_1.logger.log('warn', `Constraints are empty or not in the right format`);\n        emitterCall.emit(`${connectType}Failed`, err);\n    });\n    return emitterCall;\n}\n```"
            ],
            [
                69,
                "java",
                "JsonReader.jsonToMaps",
                "```java\npublic static Map jsonToMaps(String json, Map<String, Object> optionalArgs)\n    {\n        try\n        {\n            if (optionalArgs == null)\n            {\n                optionalArgs = new HashMap<String, Object>();\n            }\n            optionalArgs.put(USE_MAPS, true);\n            ByteArrayInputStream ba = new ByteArrayInputStream(json.getBytes(\"UTF-8\"));\n            JsonReader jr = new JsonReader(ba, optionalArgs);\n            Object ret = jr.readObject();\n            jr.close();\n\n            return adjustOutputMap(ret);\n        }\n        catch (UnsupportedEncodingException e)\n        {\n            throw new JsonIoException(\"Could not convert JSON to Maps because your JVM does not support UTF-8\", e);\n        }\n    }\n```"
            ],
            [
                199,
                "java",
                "MainActivity.runTableGettingStartedSample",
                "```java\npublic void runTableGettingStartedSample(View view) {\n        new TableGettingStartedTask(this,\n                (TextView) findViewById(R.id.textView)).execute();\n    }\n```"
            ],
            [
                179,
                "php",
                "MWSFinancesService_Model_ShipmentEvent.setShipmentFeeAdjustmentList",
                "```php\npublic function setShipmentFeeAdjustmentList($value)\n    {\n        if (!$this->_isNumericArray($value)) {\n            $value = array ($value);\n        }\n        $this->_fields['ShipmentFeeAdjustmentList']['FieldValue'] = $value;\n        return $this;\n    }\n```"
            ],
            [
                528,
                "python",
                "Command.get_course_completions",
                "```python\ndef get_course_completions(self, enterprise_customer, days):\n        \"\"\"\n        Get course completions via PersistentCourseGrade for all the learners of given enterprise customer.\n\n        Arguments:\n            enterprise_customer (EnterpriseCustomer): Include Course enrollments for learners\n                of this enterprise customer.\n            days (int): Include course enrollment of this number of days.\n\n        Returns:\n            (list): A list of PersistentCourseGrade objects.\n        \"\"\"\n        return PersistentCourseGrade.objects.filter(\n            passed_timestamp__gt=datetime.datetime.now() - datetime.timedelta(days=days)\n        ).filter(\n            user_id__in=enterprise_customer.enterprise_customer_users.values_list('user_id', flat=True)\n        )\n```"
            ],
            [
                984,
                "php",
                "Model._update",
                "```php\nprotected function _update(array $cols, $where = null, ?array $bind = null, ?int $limit = null) {\n        $query = self::Db()->update($this->_table)->cols($cols);\n        if (isset($where))\n            $query->where($where);\n        if (isset($bind))\n            $query->bindValues($bind);\n        if (isset($limit))\n            $query->limit($limit);\n        return $query->query();\n    }\n```"
            ],
            [
                53,
                "java",
                "AutoCompleteSettings.getAutoType",
                "```java\npublic AutoCompleteBehavior.Type getAutoType()\n    {\n        if (this.autoType == null) {\n            if (isRequired()) {\n                setAutoType(Type.COMPLETE);\n            } else {\n                setAutoType(Type.SUGGESTION);\n            }\n        }\n        return this.autoType;\n    }\n```"
            ],
            [
                808,
                "ruby",
                "CubaApi.Utils.no_body",
                "```ruby\ndef no_body( status )\n      res.status = ::Rack::Utils.status_code( status )\n      res.write ::Rack::Utils::HTTP_STATUS_CODES[ res.status ]\n      res['Content-Type' ] = 'text/plain'\n    end\n```"
            ],
            [
                385,
                "java",
                "SocializeUrlLauncher.launch",
                "```java\n@Override\n\tpublic boolean launch(final Activity context, Bundle data) {\n\t\tString url = data.getString(Socialize.DIRECT_URL);\n\t\t\n\t\tif(!StringUtils.isEmpty(url)) {\n\t\t\t\n\t\t\tfinal DirectUrlWebView webView = directUrlWebViewFactory.getBean();\n\t\t\twebView.setListener(directUrlListener);\n\t\t\t\n\t\t\tDialog dialog = dialogFactory.build(context, webView, true);\n\t\t\t\n\t\t\tdialog.setOnCancelListener(new OnCancelListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onCancel(DialogInterface dialog) {\n\t\t\t\t\thandleCloseEvent(webView, context);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tdialog.setOnDismissListener(new OnDismissListener() {\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onDismiss(DialogInterface dialog) {\n\t\t\t\t\thandleCloseEvent(webView, context);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tdialog.setOnKeyListener(new OnKeyListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {\n\t\t\t\t\tif(keyCode == KeyEvent.KEYCODE_BACK) {\n\t\t\t\t\t\tif(webView.canGoBack()) {\n\t\t\t\t\t\t\twebView.goBack();\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\n\t\t\tboolean show = true;\n\t\t\t\n\t\t\tif(directUrlListener != null) {\n\t\t\t\tshow = directUrlListener.onBeforePageLoaded(webView, url);\n\t\t\t}\n\t\t\t\n\t\t\tif(show) {\n\t\t\t\tdialog.show();\n\t\t\t\twebView.loadUrl(url);\n\t\t\t}\n\t\t\t\n\t\t\treturn show;\n\t\t}\n\t\telse {\n\t\t\thandleWarn(\"No url found under key [\" +\n\t\t\t\t\tSocialize.DIRECT_URL +\n\t\t\t\t\t\"]\");\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n```"
            ],
            [
                270,
                "java",
                "MoreFiles.deleteRecursivelyInsecure",
                "```java\nprivate static @Nullable Collection<IOException> deleteRecursivelyInsecure(Path path) {\n    Collection<IOException> exceptions = null;\n    try {\n      if (Files.isDirectory(path, NOFOLLOW_LINKS)) {\n        try (DirectoryStream<Path> stream = Files.newDirectoryStream(path)) {\n          exceptions = deleteDirectoryContentsInsecure(stream);\n        }\n      }\n\n      // If exceptions is not null, something went wrong trying to delete the contents of the\n      // directory, so we shouldn't try to delete the directory as it will probably fail.\n      if (exceptions == null) {\n        Files.delete(path);\n      }\n\n      return exceptions;\n    } catch (IOException e) {\n      return addException(exceptions, e);\n    }\n  }\n```"
            ],
            [
                177,
                "ruby",
                "Wants.MIMEParse.best_match",
                "```ruby\ndef best_match(supported, header)\n    parsed_header = header.split(\",\").map { |r| parse_media_range(r) }\n\n    weighted_matches = supported.map do |mime_type|\n      [fitness_and_quality_parsed(mime_type, parsed_header), mime_type]\n    end\n\n    weighted_matches.sort!\n\n    weighted_matches.last[0][1].zero? ? nil : weighted_matches.last[1]\n  end\n```"
            ],
            [
                951,
                "php",
                "Template.previewRoute",
                "```php\npublic function previewRoute($strName, $arrParams=array())\n\t{\n\t\t$objRouter = System::getContainer()->get('router');\n\t\t$objContext = $objRouter->getContext();\n\n\t\t$objPreviewContext = clone $objContext;\n\t\t$objPreviewContext->setBaseUrl('/preview.php');\n\n\t\t$objRouter->setContext($objPreviewContext);\n\n\t\t$strUrl = $objRouter->generate($strName, $arrParams);\n\t\t$strUrl = substr($strUrl, \\strlen(Environment::get('path')) + 1);\n\n\t\t$objRouter->setContext($objContext);\n\n\t\treturn ampersand($strUrl);\n\t}\n```"
            ],
            [
                732,
                "python",
                "SDRClassifierRegion.setParameter",
                "```python\ndef setParameter(self, name, index, value):\n    \"\"\"\n    Overrides :meth:`nupic.bindings.regions.PyRegion.PyRegion.setParameter`.\n    \"\"\"\n    if name == \"learningMode\":\n      self.learningMode = bool(int(value))\n    elif name == \"inferenceMode\":\n      self.inferenceMode = bool(int(value))\n    else:\n      return PyRegion.setParameter(self, name, index, value)\n```"
            ],
            [
                38,
                "php",
                "RelationshipField.validate",
                "```php\npublic function validate(\\ElggEntity $entity) {\n\n\t\t$validation = new ValidationStatus();\n\n\t\t$value = array_filter((array) get_input($this->getShortname(), array()));\n\n\t\tif ($this->isRequired() && (!$value || !count($value))) {\n\t\t\t$validation->setFail(elgg_echo('prototyper:validate:error:required', array($this->getLabel())));\n\t\t}\n\n\t\tif (is_array($value)) {\n\t\t\tforeach ($value as $val) {\n\t\t\t\t$validation = $this->applyValidationRules($val, $validation, $entity);\n\t\t\t}\n\t\t}\n\n\t\treturn $validation;\n\t}\n```"
            ],
            [
                787,
                "python",
                "TemporalMemory._destroyMinPermanenceSynapses",
                "```python\ndef _destroyMinPermanenceSynapses(cls, connections, random, segment,\n                                    nDestroy, excludeCells):\n    \"\"\"\n    Destroy nDestroy synapses on the specified segment, but don't destroy\n    synapses to the \"excludeCells\".\n    \"\"\"\n\n    destroyCandidates = sorted(\n      (synapse for synapse in connections.synapsesForSegment(segment)\n       if synapse.presynapticCell not in excludeCells),\n      key=lambda s: s._ordinal\n    )\n\n    for _ in xrange(nDestroy):\n      if len(destroyCandidates) == 0:\n        break\n\n      minSynapse = None\n      minPermanence = float(\"inf\")\n\n      for synapse in destroyCandidates:\n        if synapse.permanence < minPermanence - EPSILON:\n          minSynapse = synapse\n          minPermanence = synapse.permanence\n\n      connections.destroySynapse(minSynapse)\n      destroyCandidates.remove(minSynapse)\n```"
            ],
            [
                51,
                "go",
                "GetOrderBy",
                "```go\nfunc (c *ChangeRequest) GetOrderBy() string {\n\tif c == nil || c.OrderBy == nil {\n\t\treturn \"\"\n\t}\n\treturn *c.OrderBy\n}\n```"
            ],
            [
                37,
                "java",
                "JsonUtilities.assertIsStartObjectJsonToken",
                "```java\npublic static void assertIsStartObjectJsonToken(final JsonParser parser) throws JsonParseException {\n        if (!(parser.getCurrentToken() == JsonToken.START_OBJECT)) {\n            throw new JsonParseException(SR.EXPECTED_START_OBJECT, parser.getCurrentLocation());\n        }\n    }\n```"
            ],
            [
                202,
                "python",
                "Joint.stop_erps",
                "```python\ndef stop_erps(self, stop_erps):\n        '''Set the ERP values for this object's DOF limits.\n\n        Parameters\n        ----------\n        stop_erps : float or sequence of float\n            An ERP value to set on all degrees of freedom limits, or a list\n            containing one such value for each degree of freedom limit.\n        '''\n        _set_params(self.ode_obj, 'StopERP', stop_erps, self.ADOF + self.LDOF)\n```"
            ]
        ]
    },
    "Validation-All MRR (bs=1,000)": 0.03409172266609956,
    "Examples-Test-ruby": {
        "_type": "table",
        "columns": [
            "Rank",
            "Language",
            "Query",
            "Code"
        ],
        "data": [
            [
                160,
                "ruby",
                "Omnibus.Project.package",
                "```ruby\ndef package(id, &block)\n      unless block\n        raise InvalidValue.new(:package, \"have a block\")\n      end\n\n      packagers[id] << block\n    end\n```"
            ],
            [
                65,
                "ruby",
                "IdValidator.Validator.get_info",
                "```ruby\ndef get_info(id_card)\n      return false unless is_valid?(id_card)\n\n      code = get_id_argument(id_card)\n      address_info = get_address_info(code[:address_code])\n\n      {\n        address_code: code[:address_code],\n        address: IdValidator::Concern::Func.format_address_info(address_info),\n        abandoned: check_is_abandoned(code[:address_code]),\n        birthday_code: IdValidator::Concern::Func.format_birthday_code(code[:birthday_code]),\n        constellation: get_constellation(code[:birthday_code]),\n        chinese_zodiac: get_chinese_zodiac(code[:birthday_code]),\n        sex: code[:order_code].to_i % 2,\n        length: code[:type],\n        check_bit: code[:check_bit]\n      }\n    end\n```"
            ],
            [
                812,
                "ruby",
                "Flor.Hook.extract_filters",
                "```ruby\ndef extract_filters(h)\n\n      r = {}\n      r[:consumed] = h['consumed']\n      r[:point] = Flor.h_fetch_a(h, 'points', 'point', nil)\n      r[:nid] = Flor.h_fetch_a(h, 'nids', 'nid', nil)\n      r[:heap] = Flor.h_fetch_a(h, 'heaps', 'heap', nil)\n      r[:heat] = Flor.h_fetch_a(h, 'heats', 'heat', nil)\n      #opts[:name] = data['names']\n\n      r\n    end\n```"
            ],
            [
                654,
                "ruby",
                "KubernetesDeploy.DeferredSummaryLogging.print_summary",
                "```ruby\ndef print_summary(status)\n      status_string = status.to_s.humanize.upcase\n      if status == :success\n        heading(\"Result: \", status_string, :green)\n        level = :info\n      elsif status == :timed_out\n        heading(\"Result: \", status_string, :yellow)\n        level = :fatal\n      else\n        heading(\"Result: \", status_string, :red)\n        level = :fatal\n      end\n\n      if (actions_sentence = summary.actions_sentence.presence)\n        public_send(level, actions_sentence)\n        blank_line(level)\n      end\n\n      summary.paragraphs.each do |para|\n        msg_lines = para.split(\"\\n\")\n        msg_lines.each { |line| public_send(level, line) }\n        blank_line(level) unless para == summary.paragraphs.last\n      end\n    end\n```"
            ],
            [
                214,
                "ruby",
                "JobIteration.EnumeratorBuilder.build_active_record_enumerator_on_batches",
                "```ruby\ndef build_active_record_enumerator_on_batches(scope, cursor:, **args)\n      enum = build_active_record_enumerator(\n        scope,\n        cursor: cursor,\n        **args\n      ).batches\n      wrap(self, enum)\n    end\n```"
            ],
            [
                332,
                "ruby",
                "TensorStream.Ops.random_normal",
                "```ruby\ndef random_normal(shape, dtype: :float32, mean: 0.0, stddev: 1.0, seed: nil, name: nil)\n      options = {dtype: dtype, mean: mean, stddev: stddev, seed: seed, name: name}\n      _op(:random_standard_normal, shape, options)\n    end\n```"
            ],
            [
                671,
                "ruby",
                "PhraseApp.Client.job_locale_update",
                "```ruby\ndef job_locale_update(project_id, job_id, id, params)\n      path = sprintf(\"/api/v2/projects/%s/jobs/%s/locales/%s\", project_id, job_id, id)\n      data_hash = {}\n      post_body = nil\n  \n      if params.present?\n        unless params.kind_of?(PhraseApp::RequestParams::JobLocaleParams)\n          raise PhraseApp::ParamsHelpers::ParamsError.new(\"Expects params to be kind_of PhraseApp::RequestParams::JobLocaleParams\")\n        end\n      end\n  \n      data_hash = params.to_h\n      err = params.validate\n      if err != nil\n        return nil, err\n      end\n      reqHelper = PhraseApp::ParamsHelpers::BodyTypeHelper.new(data_hash, post_body)\n      rc, err = PhraseApp.send_request(@credentials, \"PATCH\", path, reqHelper.ctype, reqHelper.body, 200)\n      if err != nil\n        return nil, err\n      end\n      \n      return PhraseApp::ResponseObjects::JobLocale.new(JSON.load(rc.body)), err\n    end\n```"
            ],
            [
                374,
                "ruby",
                "RedisLocks.Semaphore.unlock",
                "```ruby\ndef unlock(token = @tokens.pop)\n      return unless token\n\n      removed = false\n\n      @redis.with do |conn|\n        removed = conn.zrem grabbed_key, token\n        if removed\n          conn.lpush available_key, 1\n        end\n      end\n\n      removed\n    end\n```"
            ],
            [
                748,
                "ruby",
                "Rufus::Edo.TableCore.delete",
                "```ruby\ndef delete (k)\n\n      k = k.to_s\n\n      val = @db[k]\n      return nil unless val\n\n      @db.out(k) || raise_error\n      val\n    end\n```"
            ],
            [
                251,
                "ruby",
                "ActiveRecordSurvey.Node::Question.before_destroy_rebuild_node_map",
                "```ruby\ndef before_destroy_rebuild_node_map\n\n\t\t\t\tself.survey.node_maps.select { |i|\n\t\t\t\t\ti.node == self\n\t\t\t\t}.each { |node_map|\n\t\t\t\t\t# Remap all of this nodes children to the parent\n\t\t\t\t\tnode_map.children.each  { |child|\n\t\t\t\t\t\tif !child.node.class.ancestors.include?(::ActiveRecordSurvey::Node::Answer)\n\t\t\t\t\t\t\tnode_map.parent.children << child\n\t\t\t\t\t\tend\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttrue\n\t\t\tend\n```"
            ],
            [
                54,
                "ruby",
                "Hemingway.FootnoteNode.footnote_html",
                "```ruby\ndef footnote_html(id, time)\n      footnote_label = Build.tag(\"span\", Build.tag(\"sup\", id.to_s), :class => \"footnote-number\")\n      footnote_content = sequence.elements.map { |s| s.html }.join\n      Build.tag(\"div\", footnote_label + footnote_content, :id => \"footnote#{id}#{time}\", :class => \"footnote\")\n    end\n```"
            ],
            [
                853,
                "ruby",
                "MiniGL.Button.draw",
                "```ruby\ndef draw(alpha = 0xff, z_index = 0, color = 0xffffff)\n      return unless @visible\n\n      color = (alpha << 24) | color\n      text_color =\n        if @enabled\n          if @state == :down\n            @down_text_color\n          else\n            @state == :over ? @over_text_color : @text_color\n          end\n        else\n          @disabled_text_color\n        end\n      text_color = (alpha << 24) | text_color\n      @img[@img_index].draw @x, @y, z_index, @scale_x, @scale_y, color if @img\n      if @text\n        if @center_x or @center_y\n          rel_x = @center_x ? 0.5 : 0\n          rel_y = @center_y ? 0.5 : 0\n          @font.draw_text_rel @text, @text_x, @text_y, z_index, rel_x, rel_y, @scale_x, @scale_y, text_color\n        else\n          @font.draw_text @text, @text_x, @text_y, z_index, @scale_x, @scale_y, text_color\n        end\n      end\n    end\n```"
            ],
            [
                101,
                "ruby",
                "FastTCPN.TCPN.transition",
                "```ruby\ndef transition(name)\n      t = find_transition name\n      if t.nil?\n        t = Transition.new name, self\n        @transitions << t\n      end\n      t\n    end\n```"
            ],
            [
                505,
                "ruby",
                "Yast.SpellcheckTask.read_spell_config",
                "```ruby\ndef read_spell_config(file)\n      return {} unless File.exist?(file)\n\n      puts \"Loading config file (#{file})...\" if verbose == true\n      require \"yaml\"\n      YAML.load_file(file)\n    end\n```"
            ],
            [
                178,
                "ruby",
                "Eve.JavascriptHelper.link_to_trust_request",
                "```ruby\ndef link_to_trust_request(text, trust_url = \"http://#{request.host}/\", *args)\n      trust_url = url_for(trust_url.merge(:only_path => false)) if trust_url.kind_of?(Hash)\n      link_to_function text, \"CCPEVE.requestTrust(#{trust_url.inspect})\", *args\n    end\n```"
            ],
            [
                144,
                "ruby",
                "RSqoot.Deal.uniq_deals",
                "```ruby\ndef uniq_deals(deals = [])\n      titles = deals.map(&:title).uniq\n      titles.map do |title|\n        deals.map do |deal|\n          deal if deal.try(:title) == title\n        end.compact.last\n      end.flatten\n    end\n```"
            ],
            [
                398,
                "ruby",
                "SysVIPC.Semaphore.ipc_set",
                "```ruby\ndef ipc_set(semid_ds)\n      unless Semid_ds === semid_ds\n\traise ArgumentError,\n\t  \"argument to ipc_set must be a Semid_ds\"\n      end\n      check_result(semctl(@semid, 0, IPC_SET, semid_ds))\n    end\n```"
            ],
            [
                34,
                "ruby",
                "Elephrame.Trace.setup_tracery",
                "```ruby\ndef setup_tracery dir_path\n      raise \"Provided path not a directory\" unless Dir.exist?(dir_path)\n\n      @grammar = {}\n      Dir.open(dir_path) do |dir|\n        dir.each do |file|\n          # skip our current and parent dir\n          next if file =~ /^\\.\\.?$/\n\n          # read the rule file into the files hash\n          @grammar[file.split('.').first] =\n            createGrammar(JSON.parse(File.read(\"#{dir_path}/#{file}\")))\n        end\n      end\n\n      # go ahead and makes a default mention-handler\n      #  if we have a reply rule file\n      unless @grammar['reply'].nil?\n        on_reply { |bot|\n          bot.reply_with_mentions('#default#', rules: 'reply')\n        }\n      end\n    end\n```"
            ],
            [
                468,
                "ruby",
                "GHTorrent.Mirror.transaction",
                "```ruby\ndef transaction(&block)\n      db\n      persister\n\n      result = nil\n      start_time = Time.now\n      begin\n        db.transaction(:rollback => :reraise, :isolation => :repeatable,\n                        :retry_on => @retry_on_error, :num_retries => 3) do\n          result = yield block\n        end\n        total = Time.now.to_ms - start_time.to_ms\n        debug \"Transaction committed (#{total} ms)\"\n        result\n      rescue StandardError => e\n        total = Time.now.to_ms - start_time.to_ms\n        warn \"Transaction failed (#{total} ms)\"\n        raise e\n      ensure\n        GC.start\n      end\n    end\n```"
            ],
            [
                880,
                "ruby",
                "Fit4Ruby.GlobalFitMessage.field",
                "```ruby\ndef field(number, type, name, opts = {})\n      field = Field.new(type, name, opts)\n      register_field_by_name(field, name)\n      register_field_by_number(field, number)\n    end\n```"
            ],
            [
                406,
                "ruby",
                "RbNaCl.SimpleBox.box",
                "```ruby\ndef box(message)\n      nonce = generate_nonce\n      cipher_text = @box.box(nonce, message)\n      nonce + cipher_text\n    end\n```"
            ],
            [
                725,
                "ruby",
                "SentenceBuilder.Builder.get_hash",
                "```ruby\ndef get_hash(params = {}, sorted = true)\n      get_nodes(sorted).map{|n| n.to_hash(params[n.name])}\n    end\n```"
            ],
            [
                25,
                "ruby",
                "FootballRuby.Client.league_table",
                "```ruby\ndef league_table(id, opts={})\n      raise IdMissingError, 'missing id' if id.nil?\n\n      match_day = opts[:match_day]\n\n      uri = \"competitions/#{id}/leagueTable/\"\n      url = match_day.nil? ? uri : \"#{uri}?matchday=#{match_day}\"\n\n      json_response get(url)\n    end\n```"
            ],
            [
                81,
                "ruby",
                "Snoo.LinksComments.info",
                "```ruby\ndef info opts = {}\n      query = { limit: 100 }\n      query.merge! opts\n      get('/api/info.json', query: query)\n    end\n```"
            ],
            [
                625,
                "ruby",
                "Mixml.Tool.execute",
                "```ruby\ndef execute(program = nil, &block)\n            if not program.nil? then\n                instance_eval(program)\n            end\n\n            if not block.nil? then\n                Docile.dsl_eval(self, &block)\n            end\n        end\n```"
            ],
            [
                527,
                "ruby",
                "GHTorrent.Retriever.retrieve_commit_comments",
                "```ruby\ndef retrieve_commit_comments(owner, repo, sha)\n      retrieved_comments = paged_api_request(ghurl \"repos/#{owner}/#{repo}/commits/#{sha}/comments\")\n\n      retrieved_comments.each { |x|\n        if persister.find(:commit_comments, { 'commit_id' => x['commit_id'],\n                                              'id' => x['id']}).empty?\n          persister.store(:commit_comments, x)\n        end\n      }\n      persister.find(:commit_comments, {'commit_id' => sha})\n    end\n```"
            ],
            [
                910,
                "ruby",
                "TensorStream.Ops.eye",
                "```ruby\ndef eye(num_rows, num_columns: nil, dtype: :float32, name: nil)\n      _op(:eye, num_rows, num_columns || num_rows, data_type: dtype, name: name)\n    end\n```"
            ],
            [
                875,
                "ruby",
                "Omnibus.Packager::WindowsBase.certificate_subject",
                "```ruby\ndef certificate_subject\n      return \"CN=#{project.package_name}\" unless signing_identity\n      store = machine_store? ? \"LocalMachine\" : \"CurrentUser\"\n      cmd = Array.new.tap do |arr|\n        arr << \"powershell.exe\"\n        arr << \"-ExecutionPolicy Bypass\"\n        arr << \"-NoProfile\"\n        arr << \"-Command (Get-Item Cert:/#{store}/#{cert_store_name}/#{thumbprint}).Subject\"\n      end.join(\" \")\n\n      shellout!(cmd).stdout.strip\n    end\n```"
            ],
            [
                261,
                "ruby",
                "TensorStream.Utils.apply_data_type_coercion",
                "```ruby\ndef apply_data_type_coercion(*args)\n      coerced_type = check_data_types(*args)\n      args.map { |a| a.is_a?(Tensor) ? a : convert_to_tensor(a, dtype: coerced_type) }\n    end\n```"
            ],
            [
                847,
                "ruby",
                "Exonio.Financial.pmt",
                "```ruby\ndef pmt(rate, nper, pv, fv = 0, end_or_beginning = 0)\n      temp = (1 + rate) ** nper\n      fact = (1 + rate * end_or_beginning) * (temp - 1) / rate\n\n      -(fv + pv * temp) / fact\n    end\n```"
            ],
            [
                401,
                "ruby",
                "Omnibus.Packager::MSI.parameters",
                "```ruby\ndef parameters(val = NULL)\n      if null?(val)\n        @parameters || {}\n      else\n        unless val.is_a?(Hash)\n          raise InvalidValue.new(:parameters, \"be a Hash\")\n        end\n\n        @parameters = val\n      end\n    end\n```"
            ],
            [
                949,
                "ruby",
                "Lego.Model.as_json",
                "```ruby\ndef as_json(opts={})\n      raise NotImplementedError, 'as_json with arguments' unless opts.empty?\n      {}.tap do |h|\n        attributes.each do |attr, val|\n          h[attr] = val.as_json\n        end\n      end\n    end\n```"
            ],
            [
                289,
                "ruby",
                "ETL.Engine.execute_screens",
                "```ruby\ndef execute_screens(control, timing = :before_post_process)\n      screens = case timing\n        when :after_post_process\n          control.after_post_process_screens\n        else # default to before post-process screens\n          control.screens\n        end\n      [:fatal,:error,:warn].each do |type|\n        screens[type].each do |block|\n          begin\n            block.call\n          rescue => e\n            case type\n            when :fatal\n              raise FatalScreenError, e\n            when :error\n              raise ScreenError, e\n            when :warn\n              say \"Screen warning: #{e}\"\n            end\n          end\n        end\n      end\n    end\n```"
            ],
            [
                425,
                "ruby",
                "AMEE.Connection.v3_put",
                "```ruby\ndef v3_put(path, options = {})\n      # Expire cached objects from parent on down\n      expire_matching \"#{parent_path(path)}.*\"\n      # Create request parameters\n      put_params = { \n        :method => \"put\",\n        :body => options[:body] ? options[:body] : form_encode(options)\n      }\n      if options[:content_type]\n        put_params[:headers] = {\n          :'Content-Type' => content_type(options[:content_type])\n        }\n      end\n      # Request\n      v3_do_request(put_params, path)\n    end\n```"
            ],
            [
                215,
                "ruby",
                "Omnibus.Packager::Base.run!",
                "```ruby\ndef run!\n      # Ensure the package directory exists\n      create_directory(Config.package_dir)\n\n      measure(\"Packaging time\") do\n        # Run the setup and build sequences\n        instance_eval(&self.class.setup) if self.class.setup\n        instance_eval(&self.class.build) if self.class.build\n\n        # Render the metadata\n        Metadata.generate(package_path, project)\n\n        # Ensure the temporary directory is removed at the end of a successful\n        # run. Without removal, successful builds will \"leak\" in /tmp and cause\n        # increased disk usage.\n        #\n        # Instead of having this as an +ensure+ block, failed builds will persist\n        # this directory so developers can go poke around and figure out why the\n        # build failed.\n        remove_directory(staging_dir)\n      end\n    end\n```"
            ],
            [
                610,
                "ruby",
                "Seeds.Core.install_seed",
                "```ruby\ndef install_seed(seed, dirname)\n      # if remote url has changed, remove directory and clone again\n      remote_url = `\n        cd #{Shellwords.escape(dirname)} 2>&1 &&\n        git remote show origin -n | grep Fetch | awk '{ print $3 }' 2>&1\n      `.strip\n      if remote_url != seed.url\n        FileUtils.rm_rf(dirname)\n      end\n\n      # clone and return if not exists\n      if not File.exist?(dirname)\n        say \"Installing #{seed.name} (#{seed.version or seed.commit})\".green\n\n        command = \"git clone #{seed.url}\"\n        command += \" -b #{seed.version}\" if seed.version\n        command += \" #{Shellwords.escape(dirname)} 2>&1\"\n        output = `#{command}`\n\n        unable_to_access = output.include?(\"unable to access\")\n        if unable_to_access and output.include?(\"Failed to connect to\")\n          raise Seeds::Exception.new\\\n            \"#{seed.name}: Failed to connect to #{seed.url}. \\n#{output}\"\n        end\n\n        not_found = output.include?(\"not found\")\n        if not_found and output.include?(\"repository\")\n          raise Seeds::Exception.new\\\n            \"#{seed.name}: Couldn't find the repository.\"\n        elsif not_found and output.include?(\"upstream\")\n          raise Seeds::Exception.new\\\n            \"#{seed.name}: Couldn't find the tag `#{seed.version}`.\"\n        end\n\n        if seed.commit and not seed.version # checkout to commit\n          output = `cd #{Shellwords.escape(dirname)} 2>&1 &&\\\n                    git checkout #{seed.commit} 2>&1`\n          if output.include?(\"did not match any\")\n            raise Seeds::Exception.new\\\n              \"#{seed.name}: Couldn't find the commit `#{seed.commit}`.\"\n          end\n        end\n\n        return\n      end\n\n      # discard local changes\n      `cd #{Shellwords.escape(dirname)} 2>&1 &&\\\n       git reset HEAD --hard 2>&1 &&\\\n       git checkout . 2>&1 &&\\\n       git clean -fd 2>&1`\n\n      if lock = self.locks[seed.name]\n        lock_version = lock.version\n        lock_commit = lock.commit\n      end\n\n      if seed.version == lock_version and seed.commit == lock_commit\n        say \"Using #{seed.name} (#{lock_version or lock_commit})\"\n        return\n      end\n\n      if seed.version\n        say \"Installing #{seed.name} #{seed.version}\"\\\n            \" (was #{lock_version or lock_commit})\".green\n        output = `cd #{Shellwords.escape(dirname)} 2>&1 &&\\\n                 git fetch origin #{seed.version} --tags 2>&1 &&\\\n                 git checkout #{seed.version} 2>&1`\n        if output.include?(\"Couldn't find\")\n          raise Seeds::Exception.new\\\n            \"#{seed.name}: Couldn't find the tag or branch `#{seed.version}`.\"\n        end\n\n      elsif seed.commit\n        say \"Installing #{seed.name} #{seed.commit}\"\\\n            \" (was #{lock_version or lock_commit})\".green\n        output = `cd #{Shellwords.escape(dirname)} 2>&1 &&\n                  git checkout master 2>&1 &&\n                  git pull 2>&1 &&\n                  git checkout #{seed.commit} 2>&1`\n        if output.include?(\"did not match any\")\n          raise Seeds::Exception.new\\\n            \"#{seed.name}: Couldn't find the commit `#{seed.commit}`.\".red\n        end\n      end\n\n    end\n```"
            ],
            [
                304,
                "ruby",
                "Pose.Search.limit_ids",
                "```ruby\ndef limit_ids result\n      return unless @query.has_limit?\n      result.each do |clazz, ids|\n        result[clazz] = ids.slice 0, @query.limit\n      end\n    end\n```"
            ],
            [
                144,
                "ruby",
                "ActiveRecordSurvey.Node.before_destroy_rebuild_node_map",
                "```ruby\ndef before_destroy_rebuild_node_map\n\t\t\t\t# All the node_maps from this node\n\t\t\t\tself.survey.node_maps.select { |i|\n\t\t\t\t\ti.node == self\n\t\t\t\t}.each { |node_map|\n\t\t\t\t\t# Remap all of this nodes children to the parent\n\t\t\t\t\tnode_map.children.each  { |child|\n\t\t\t\t\t\tnode_map.parent.children << child\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttrue\n\t\t\tend\n```"
            ],
            [
                192,
                "ruby",
                "Pres.ViewDelegation.method_missing",
                "```ruby\ndef method_missing(method, *args, &block)\n      if view_context.respond_to?(method, true)\n        view_context.send(method, *args, &block)\n      else\n        super\n      end\n    end\n```"
            ],
            [
                620,
                "ruby",
                "RackCAS.RedisStore.find_session",
                "```ruby\ndef find_session(env, sid)\n      if sid.nil?\n        sid = generate_sid\n        data = nil\n      else\n        unless session = Session.find_by_id(sid)\n          session = {}\n          # force generation of new sid since there is no associated session\n          sid = generate_sid\n        end\n        data = unpack(session['data'])\n      end\n\n      [sid, data]\n    end\n```"
            ],
            [
                354,
                "ruby",
                "Elephrame.Reply.reply_with_mentions",
                "```ruby\ndef reply_with_mentions(text, *options)\n      # build up a string of all accounts mentioned in the post\n      #  unless that account is our own, or the tagged account\n      #  has #NoBot\n      mentions = @mention_data[:mentions].collect do |m|\n        \"@#{m.acct}\" unless m.acct == @username or no_bot? m.id\n      end.join ' '\n      \n      reply(\"#{mentions.strip} #{text}\", *options)\n    end\n```"
            ],
            [
                856,
                "ruby",
                "Metro.Scene.after",
                "```ruby\ndef after(ticks,&block)\n      tick = OnUpdateOperation.new interval: ticks, context: self\n      tick.on_complete(&block)\n      enqueue tick\n    end\n```"
            ],
            [
                226,
                "ruby",
                "TensorStream.Ops.zeros_like",
                "```ruby\ndef zeros_like(tensor, dtype: nil, name: nil)\n      _op(:zeros_like, tensor, data_type: dtype, name: name)\n    end\n```"
            ],
            [
                296,
                "ruby",
                "CliftonXml.XmlDocument.create_xml_declaration",
                "```ruby\ndef create_xml_declaration(version, encoding)\r\n      declNode = XmlDeclarationNode.new() {\r\n        @attributes << XmlAttribute.new() {@name='version'; @value=version}\r\n        @attributes << XmlAttribute.new() {@name='encoding'; @value=encoding}\r\n      }\r\n\r\n      declNode.xml_document = self\r\n\r\n      declNode\r\n    end\n```"
            ],
            [
                663,
                "ruby",
                "SocialMediaMonitoring.Client.categories",
                "```ruby\ndef categories(country)\n      begin\n      results = Mash.new(self.class.get('/categories', :query => {:country => country}.merge(self.default_options)))\n    rescue => e\n      key_error e\n    end\n    end\n```"
            ],
            [
                638,
                "ruby",
                "SBDB.DB.each",
                "```ruby\ndef each key = nil, val = nil, &exe\n\t\t\tcursor {|c| c.each key, val, &exe }\n\t\tend\n```"
            ],
            [
                16,
                "ruby",
                "Metaforce.Job::Deploy.zip_file",
                "```ruby\ndef zip_file\n      path = Dir.mktmpdir\n      File.join(path, 'deploy.zip').tap do |path|\n        Zip::File.open(path, Zip::File::CREATE) do |zip|\n          Dir[\"#{@path}/**/**\"].each do |file|\n            zip.add(file.sub(\"#{File.dirname(@path)}/\", ''), file)\n          end\n        end\n      end\n    end\n```"
            ],
            [
                338,
                "ruby",
                "X12.XMLDefinitions.parse_table",
                "```ruby\ndef parse_table(e)\r\n      name, min, max, type, required, validation = parse_attributes(e)\r\n\r\n      content = e.find(\"Entry\").inject({}) {|t, entry|\r\n        t[entry.attributes[\"name\"]] = entry.attributes[\"value\"]\r\n        t\r\n      }\r\n      Table.new(name, content)\r\n    end\n```"
            ],
            [
                292,
                "ruby",
                "CMSScanner.Target.scope_url_pattern",
                "```ruby\ndef scope_url_pattern\n      return @scope_url_pattern if @scope_url_pattern\n\n      domains = [uri.host + uri.path]\n\n      domains += if scope.domains.empty?\n                   [*scope.invalid_domains[1..-1]]\n                 else\n                   [*scope.domains[1..-1]].map(&:to_s) + scope.invalid_domains\n                 end\n\n      domains.map! { |d| Regexp.escape(d.gsub(%r{/$}, '')).gsub('\\*', '.*').gsub('/', '\\\\\\\\\\?/') }\n\n      domains[0].gsub!(Regexp.escape(uri.host), Regexp.escape(uri.host) + '(?::\\\\d+)?') if uri.port\n\n      @scope_url_pattern = %r{https?:\\\\?/\\\\?/(?:#{domains.join('|')})\\\\?/?}i\n    end\n```"
            ],
            [
                393,
                "ruby",
                "CITA.Http.conn",
                "```ruby\ndef conn\n      Faraday.new(url: url) do |faraday|\n        faraday.headers[\"Content-Type\"] = \"application/json\"\n        faraday.request  :url_encoded # form-encode POST params\n        faraday.adapter  Faraday.default_adapter # make requests with Net::HTTP\n      end\n    end\n```"
            ]
        ]
    },
    "Test-ruby MRR (bs=1,000)": 0.024097075535192886,
    "Examples-FuncNameTest-ruby": {
        "_type": "table",
        "columns": [
            "Rank",
            "Language",
            "Query",
            "Code"
        ],
        "data": [
            [
                897,
                "ruby",
                "Omnibus.Project.package",
                "```ruby\ndef package(id, &block)\n      unless block\n        raise InvalidValue.new(:package, \"have a block\")\n      end\n\n      packagers[id] << block\n    end\n```"
            ],
            [
                767,
                "ruby",
                "IdValidator.Validator.get_info",
                "```ruby\ndef get_info(id_card)\n      return false unless is_valid?(id_card)\n\n      code = get_id_argument(id_card)\n      address_info = get_address_info(code[:address_code])\n\n      {\n        address_code: code[:address_code],\n        address: IdValidator::Concern::Func.format_address_info(address_info),\n        abandoned: check_is_abandoned(code[:address_code]),\n        birthday_code: IdValidator::Concern::Func.format_birthday_code(code[:birthday_code]),\n        constellation: get_constellation(code[:birthday_code]),\n        chinese_zodiac: get_chinese_zodiac(code[:birthday_code]),\n        sex: code[:order_code].to_i % 2,\n        length: code[:type],\n        check_bit: code[:check_bit]\n      }\n    end\n```"
            ],
            [
                763,
                "ruby",
                "Flor.Hook.extract_filters",
                "```ruby\ndef extract_filters(h)\n\n      r = {}\n      r[:consumed] = h['consumed']\n      r[:point] = Flor.h_fetch_a(h, 'points', 'point', nil)\n      r[:nid] = Flor.h_fetch_a(h, 'nids', 'nid', nil)\n      r[:heap] = Flor.h_fetch_a(h, 'heaps', 'heap', nil)\n      r[:heat] = Flor.h_fetch_a(h, 'heats', 'heat', nil)\n      #opts[:name] = data['names']\n\n      r\n    end\n```"
            ],
            [
                877,
                "ruby",
                "KubernetesDeploy.DeferredSummaryLogging.print_summary",
                "```ruby\ndef print_summary(status)\n      status_string = status.to_s.humanize.upcase\n      if status == :success\n        heading(\"Result: \", status_string, :green)\n        level = :info\n      elsif status == :timed_out\n        heading(\"Result: \", status_string, :yellow)\n        level = :fatal\n      else\n        heading(\"Result: \", status_string, :red)\n        level = :fatal\n      end\n\n      if (actions_sentence = summary.actions_sentence.presence)\n        public_send(level, actions_sentence)\n        blank_line(level)\n      end\n\n      summary.paragraphs.each do |para|\n        msg_lines = para.split(\"\\n\")\n        msg_lines.each { |line| public_send(level, line) }\n        blank_line(level) unless para == summary.paragraphs.last\n      end\n    end\n```"
            ],
            [
                734,
                "ruby",
                "JobIteration.EnumeratorBuilder.build_active_record_enumerator_on_batches",
                "```ruby\ndef build_active_record_enumerator_on_batches(scope, cursor:, **args)\n      enum = build_active_record_enumerator(\n        scope,\n        cursor: cursor,\n        **args\n      ).batches\n      wrap(self, enum)\n    end\n```"
            ],
            [
                588,
                "ruby",
                "TensorStream.Ops.random_normal",
                "```ruby\ndef random_normal(shape, dtype: :float32, mean: 0.0, stddev: 1.0, seed: nil, name: nil)\n      options = {dtype: dtype, mean: mean, stddev: stddev, seed: seed, name: name}\n      _op(:random_standard_normal, shape, options)\n    end\n```"
            ],
            [
                945,
                "ruby",
                "PhraseApp.Client.job_locale_update",
                "```ruby\ndef job_locale_update(project_id, job_id, id, params)\n      path = sprintf(\"/api/v2/projects/%s/jobs/%s/locales/%s\", project_id, job_id, id)\n      data_hash = {}\n      post_body = nil\n  \n      if params.present?\n        unless params.kind_of?(PhraseApp::RequestParams::JobLocaleParams)\n          raise PhraseApp::ParamsHelpers::ParamsError.new(\"Expects params to be kind_of PhraseApp::RequestParams::JobLocaleParams\")\n        end\n      end\n  \n      data_hash = params.to_h\n      err = params.validate\n      if err != nil\n        return nil, err\n      end\n      reqHelper = PhraseApp::ParamsHelpers::BodyTypeHelper.new(data_hash, post_body)\n      rc, err = PhraseApp.send_request(@credentials, \"PATCH\", path, reqHelper.ctype, reqHelper.body, 200)\n      if err != nil\n        return nil, err\n      end\n      \n      return PhraseApp::ResponseObjects::JobLocale.new(JSON.load(rc.body)), err\n    end\n```"
            ],
            [
                639,
                "ruby",
                "RedisLocks.Semaphore.unlock",
                "```ruby\ndef unlock(token = @tokens.pop)\n      return unless token\n\n      removed = false\n\n      @redis.with do |conn|\n        removed = conn.zrem grabbed_key, token\n        if removed\n          conn.lpush available_key, 1\n        end\n      end\n\n      removed\n    end\n```"
            ],
            [
                567,
                "ruby",
                "Rufus::Edo.TableCore.delete",
                "```ruby\ndef delete (k)\n\n      k = k.to_s\n\n      val = @db[k]\n      return nil unless val\n\n      @db.out(k) || raise_error\n      val\n    end\n```"
            ],
            [
                94,
                "ruby",
                "ActiveRecordSurvey.Node::Question.before_destroy_rebuild_node_map",
                "```ruby\ndef before_destroy_rebuild_node_map\n\n\t\t\t\tself.survey.node_maps.select { |i|\n\t\t\t\t\ti.node == self\n\t\t\t\t}.each { |node_map|\n\t\t\t\t\t# Remap all of this nodes children to the parent\n\t\t\t\t\tnode_map.children.each  { |child|\n\t\t\t\t\t\tif !child.node.class.ancestors.include?(::ActiveRecordSurvey::Node::Answer)\n\t\t\t\t\t\t\tnode_map.parent.children << child\n\t\t\t\t\t\tend\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttrue\n\t\t\tend\n```"
            ],
            [
                120,
                "ruby",
                "Hemingway.FootnoteNode.footnote_html",
                "```ruby\ndef footnote_html(id, time)\n      footnote_label = Build.tag(\"span\", Build.tag(\"sup\", id.to_s), :class => \"footnote-number\")\n      footnote_content = sequence.elements.map { |s| s.html }.join\n      Build.tag(\"div\", footnote_label + footnote_content, :id => \"footnote#{id}#{time}\", :class => \"footnote\")\n    end\n```"
            ],
            [
                238,
                "ruby",
                "MiniGL.Button.draw",
                "```ruby\ndef draw(alpha = 0xff, z_index = 0, color = 0xffffff)\n      return unless @visible\n\n      color = (alpha << 24) | color\n      text_color =\n        if @enabled\n          if @state == :down\n            @down_text_color\n          else\n            @state == :over ? @over_text_color : @text_color\n          end\n        else\n          @disabled_text_color\n        end\n      text_color = (alpha << 24) | text_color\n      @img[@img_index].draw @x, @y, z_index, @scale_x, @scale_y, color if @img\n      if @text\n        if @center_x or @center_y\n          rel_x = @center_x ? 0.5 : 0\n          rel_y = @center_y ? 0.5 : 0\n          @font.draw_text_rel @text, @text_x, @text_y, z_index, rel_x, rel_y, @scale_x, @scale_y, text_color\n        else\n          @font.draw_text @text, @text_x, @text_y, z_index, @scale_x, @scale_y, text_color\n        end\n      end\n    end\n```"
            ],
            [
                976,
                "ruby",
                "FastTCPN.TCPN.transition",
                "```ruby\ndef transition(name)\n      t = find_transition name\n      if t.nil?\n        t = Transition.new name, self\n        @transitions << t\n      end\n      t\n    end\n```"
            ],
            [
                86,
                "ruby",
                "Yast.SpellcheckTask.read_spell_config",
                "```ruby\ndef read_spell_config(file)\n      return {} unless File.exist?(file)\n\n      puts \"Loading config file (#{file})...\" if verbose == true\n      require \"yaml\"\n      YAML.load_file(file)\n    end\n```"
            ],
            [
                62,
                "ruby",
                "Eve.JavascriptHelper.link_to_trust_request",
                "```ruby\ndef link_to_trust_request(text, trust_url = \"http://#{request.host}/\", *args)\n      trust_url = url_for(trust_url.merge(:only_path => false)) if trust_url.kind_of?(Hash)\n      link_to_function text, \"CCPEVE.requestTrust(#{trust_url.inspect})\", *args\n    end\n```"
            ],
            [
                316,
                "ruby",
                "RSqoot.Deal.uniq_deals",
                "```ruby\ndef uniq_deals(deals = [])\n      titles = deals.map(&:title).uniq\n      titles.map do |title|\n        deals.map do |deal|\n          deal if deal.try(:title) == title\n        end.compact.last\n      end.flatten\n    end\n```"
            ],
            [
                276,
                "ruby",
                "SysVIPC.Semaphore.ipc_set",
                "```ruby\ndef ipc_set(semid_ds)\n      unless Semid_ds === semid_ds\n\traise ArgumentError,\n\t  \"argument to ipc_set must be a Semid_ds\"\n      end\n      check_result(semctl(@semid, 0, IPC_SET, semid_ds))\n    end\n```"
            ],
            [
                758,
                "ruby",
                "Elephrame.Trace.setup_tracery",
                "```ruby\ndef setup_tracery dir_path\n      raise \"Provided path not a directory\" unless Dir.exist?(dir_path)\n\n      @grammar = {}\n      Dir.open(dir_path) do |dir|\n        dir.each do |file|\n          # skip our current and parent dir\n          next if file =~ /^\\.\\.?$/\n\n          # read the rule file into the files hash\n          @grammar[file.split('.').first] =\n            createGrammar(JSON.parse(File.read(\"#{dir_path}/#{file}\")))\n        end\n      end\n\n      # go ahead and makes a default mention-handler\n      #  if we have a reply rule file\n      unless @grammar['reply'].nil?\n        on_reply { |bot|\n          bot.reply_with_mentions('#default#', rules: 'reply')\n        }\n      end\n    end\n```"
            ],
            [
                900,
                "ruby",
                "GHTorrent.Mirror.transaction",
                "```ruby\ndef transaction(&block)\n      db\n      persister\n\n      result = nil\n      start_time = Time.now\n      begin\n        db.transaction(:rollback => :reraise, :isolation => :repeatable,\n                        :retry_on => @retry_on_error, :num_retries => 3) do\n          result = yield block\n        end\n        total = Time.now.to_ms - start_time.to_ms\n        debug \"Transaction committed (#{total} ms)\"\n        result\n      rescue StandardError => e\n        total = Time.now.to_ms - start_time.to_ms\n        warn \"Transaction failed (#{total} ms)\"\n        raise e\n      ensure\n        GC.start\n      end\n    end\n```"
            ],
            [
                567,
                "ruby",
                "Fit4Ruby.GlobalFitMessage.field",
                "```ruby\ndef field(number, type, name, opts = {})\n      field = Field.new(type, name, opts)\n      register_field_by_name(field, name)\n      register_field_by_number(field, number)\n    end\n```"
            ],
            [
                504,
                "ruby",
                "RbNaCl.SimpleBox.box",
                "```ruby\ndef box(message)\n      nonce = generate_nonce\n      cipher_text = @box.box(nonce, message)\n      nonce + cipher_text\n    end\n```"
            ],
            [
                193,
                "ruby",
                "SentenceBuilder.Builder.get_hash",
                "```ruby\ndef get_hash(params = {}, sorted = true)\n      get_nodes(sorted).map{|n| n.to_hash(params[n.name])}\n    end\n```"
            ],
            [
                38,
                "ruby",
                "FootballRuby.Client.league_table",
                "```ruby\ndef league_table(id, opts={})\n      raise IdMissingError, 'missing id' if id.nil?\n\n      match_day = opts[:match_day]\n\n      uri = \"competitions/#{id}/leagueTable/\"\n      url = match_day.nil? ? uri : \"#{uri}?matchday=#{match_day}\"\n\n      json_response get(url)\n    end\n```"
            ],
            [
                735,
                "ruby",
                "Snoo.LinksComments.info",
                "```ruby\ndef info opts = {}\n      query = { limit: 100 }\n      query.merge! opts\n      get('/api/info.json', query: query)\n    end\n```"
            ],
            [
                296,
                "ruby",
                "Mixml.Tool.execute",
                "```ruby\ndef execute(program = nil, &block)\n            if not program.nil? then\n                instance_eval(program)\n            end\n\n            if not block.nil? then\n                Docile.dsl_eval(self, &block)\n            end\n        end\n```"
            ],
            [
                242,
                "ruby",
                "GHTorrent.Retriever.retrieve_commit_comments",
                "```ruby\ndef retrieve_commit_comments(owner, repo, sha)\n      retrieved_comments = paged_api_request(ghurl \"repos/#{owner}/#{repo}/commits/#{sha}/comments\")\n\n      retrieved_comments.each { |x|\n        if persister.find(:commit_comments, { 'commit_id' => x['commit_id'],\n                                              'id' => x['id']}).empty?\n          persister.store(:commit_comments, x)\n        end\n      }\n      persister.find(:commit_comments, {'commit_id' => sha})\n    end\n```"
            ],
            [
                243,
                "ruby",
                "TensorStream.Ops.eye",
                "```ruby\ndef eye(num_rows, num_columns: nil, dtype: :float32, name: nil)\n      _op(:eye, num_rows, num_columns || num_rows, data_type: dtype, name: name)\n    end\n```"
            ],
            [
                622,
                "ruby",
                "Omnibus.Packager::WindowsBase.certificate_subject",
                "```ruby\ndef certificate_subject\n      return \"CN=#{project.package_name}\" unless signing_identity\n      store = machine_store? ? \"LocalMachine\" : \"CurrentUser\"\n      cmd = Array.new.tap do |arr|\n        arr << \"powershell.exe\"\n        arr << \"-ExecutionPolicy Bypass\"\n        arr << \"-NoProfile\"\n        arr << \"-Command (Get-Item Cert:/#{store}/#{cert_store_name}/#{thumbprint}).Subject\"\n      end.join(\" \")\n\n      shellout!(cmd).stdout.strip\n    end\n```"
            ],
            [
                171,
                "ruby",
                "TensorStream.Utils.apply_data_type_coercion",
                "```ruby\ndef apply_data_type_coercion(*args)\n      coerced_type = check_data_types(*args)\n      args.map { |a| a.is_a?(Tensor) ? a : convert_to_tensor(a, dtype: coerced_type) }\n    end\n```"
            ],
            [
                204,
                "ruby",
                "Exonio.Financial.pmt",
                "```ruby\ndef pmt(rate, nper, pv, fv = 0, end_or_beginning = 0)\n      temp = (1 + rate) ** nper\n      fact = (1 + rate * end_or_beginning) * (temp - 1) / rate\n\n      -(fv + pv * temp) / fact\n    end\n```"
            ],
            [
                649,
                "ruby",
                "Omnibus.Packager::MSI.parameters",
                "```ruby\ndef parameters(val = NULL)\n      if null?(val)\n        @parameters || {}\n      else\n        unless val.is_a?(Hash)\n          raise InvalidValue.new(:parameters, \"be a Hash\")\n        end\n\n        @parameters = val\n      end\n    end\n```"
            ],
            [
                70,
                "ruby",
                "Lego.Model.as_json",
                "```ruby\ndef as_json(opts={})\n      raise NotImplementedError, 'as_json with arguments' unless opts.empty?\n      {}.tap do |h|\n        attributes.each do |attr, val|\n          h[attr] = val.as_json\n        end\n      end\n    end\n```"
            ],
            [
                10,
                "ruby",
                "ETL.Engine.execute_screens",
                "```ruby\ndef execute_screens(control, timing = :before_post_process)\n      screens = case timing\n        when :after_post_process\n          control.after_post_process_screens\n        else # default to before post-process screens\n          control.screens\n        end\n      [:fatal,:error,:warn].each do |type|\n        screens[type].each do |block|\n          begin\n            block.call\n          rescue => e\n            case type\n            when :fatal\n              raise FatalScreenError, e\n            when :error\n              raise ScreenError, e\n            when :warn\n              say \"Screen warning: #{e}\"\n            end\n          end\n        end\n      end\n    end\n```"
            ],
            [
                537,
                "ruby",
                "AMEE.Connection.v3_put",
                "```ruby\ndef v3_put(path, options = {})\n      # Expire cached objects from parent on down\n      expire_matching \"#{parent_path(path)}.*\"\n      # Create request parameters\n      put_params = { \n        :method => \"put\",\n        :body => options[:body] ? options[:body] : form_encode(options)\n      }\n      if options[:content_type]\n        put_params[:headers] = {\n          :'Content-Type' => content_type(options[:content_type])\n        }\n      end\n      # Request\n      v3_do_request(put_params, path)\n    end\n```"
            ],
            [
                371,
                "ruby",
                "Omnibus.Packager::Base.run!",
                "```ruby\ndef run!\n      # Ensure the package directory exists\n      create_directory(Config.package_dir)\n\n      measure(\"Packaging time\") do\n        # Run the setup and build sequences\n        instance_eval(&self.class.setup) if self.class.setup\n        instance_eval(&self.class.build) if self.class.build\n\n        # Render the metadata\n        Metadata.generate(package_path, project)\n\n        # Ensure the temporary directory is removed at the end of a successful\n        # run. Without removal, successful builds will \"leak\" in /tmp and cause\n        # increased disk usage.\n        #\n        # Instead of having this as an +ensure+ block, failed builds will persist\n        # this directory so developers can go poke around and figure out why the\n        # build failed.\n        remove_directory(staging_dir)\n      end\n    end\n```"
            ],
            [
                427,
                "ruby",
                "Seeds.Core.install_seed",
                "```ruby\ndef install_seed(seed, dirname)\n      # if remote url has changed, remove directory and clone again\n      remote_url = `\n        cd #{Shellwords.escape(dirname)} 2>&1 &&\n        git remote show origin -n | grep Fetch | awk '{ print $3 }' 2>&1\n      `.strip\n      if remote_url != seed.url\n        FileUtils.rm_rf(dirname)\n      end\n\n      # clone and return if not exists\n      if not File.exist?(dirname)\n        say \"Installing #{seed.name} (#{seed.version or seed.commit})\".green\n\n        command = \"git clone #{seed.url}\"\n        command += \" -b #{seed.version}\" if seed.version\n        command += \" #{Shellwords.escape(dirname)} 2>&1\"\n        output = `#{command}`\n\n        unable_to_access = output.include?(\"unable to access\")\n        if unable_to_access and output.include?(\"Failed to connect to\")\n          raise Seeds::Exception.new\\\n            \"#{seed.name}: Failed to connect to #{seed.url}. \\n#{output}\"\n        end\n\n        not_found = output.include?(\"not found\")\n        if not_found and output.include?(\"repository\")\n          raise Seeds::Exception.new\\\n            \"#{seed.name}: Couldn't find the repository.\"\n        elsif not_found and output.include?(\"upstream\")\n          raise Seeds::Exception.new\\\n            \"#{seed.name}: Couldn't find the tag `#{seed.version}`.\"\n        end\n\n        if seed.commit and not seed.version # checkout to commit\n          output = `cd #{Shellwords.escape(dirname)} 2>&1 &&\\\n                    git checkout #{seed.commit} 2>&1`\n          if output.include?(\"did not match any\")\n            raise Seeds::Exception.new\\\n              \"#{seed.name}: Couldn't find the commit `#{seed.commit}`.\"\n          end\n        end\n\n        return\n      end\n\n      # discard local changes\n      `cd #{Shellwords.escape(dirname)} 2>&1 &&\\\n       git reset HEAD --hard 2>&1 &&\\\n       git checkout . 2>&1 &&\\\n       git clean -fd 2>&1`\n\n      if lock = self.locks[seed.name]\n        lock_version = lock.version\n        lock_commit = lock.commit\n      end\n\n      if seed.version == lock_version and seed.commit == lock_commit\n        say \"Using #{seed.name} (#{lock_version or lock_commit})\"\n        return\n      end\n\n      if seed.version\n        say \"Installing #{seed.name} #{seed.version}\"\\\n            \" (was #{lock_version or lock_commit})\".green\n        output = `cd #{Shellwords.escape(dirname)} 2>&1 &&\\\n                 git fetch origin #{seed.version} --tags 2>&1 &&\\\n                 git checkout #{seed.version} 2>&1`\n        if output.include?(\"Couldn't find\")\n          raise Seeds::Exception.new\\\n            \"#{seed.name}: Couldn't find the tag or branch `#{seed.version}`.\"\n        end\n\n      elsif seed.commit\n        say \"Installing #{seed.name} #{seed.commit}\"\\\n            \" (was #{lock_version or lock_commit})\".green\n        output = `cd #{Shellwords.escape(dirname)} 2>&1 &&\n                  git checkout master 2>&1 &&\n                  git pull 2>&1 &&\n                  git checkout #{seed.commit} 2>&1`\n        if output.include?(\"did not match any\")\n          raise Seeds::Exception.new\\\n            \"#{seed.name}: Couldn't find the commit `#{seed.commit}`.\".red\n        end\n      end\n\n    end\n```"
            ],
            [
                920,
                "ruby",
                "Pose.Search.limit_ids",
                "```ruby\ndef limit_ids result\n      return unless @query.has_limit?\n      result.each do |clazz, ids|\n        result[clazz] = ids.slice 0, @query.limit\n      end\n    end\n```"
            ],
            [
                68,
                "ruby",
                "ActiveRecordSurvey.Node.before_destroy_rebuild_node_map",
                "```ruby\ndef before_destroy_rebuild_node_map\n\t\t\t\t# All the node_maps from this node\n\t\t\t\tself.survey.node_maps.select { |i|\n\t\t\t\t\ti.node == self\n\t\t\t\t}.each { |node_map|\n\t\t\t\t\t# Remap all of this nodes children to the parent\n\t\t\t\t\tnode_map.children.each  { |child|\n\t\t\t\t\t\tnode_map.parent.children << child\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttrue\n\t\t\tend\n```"
            ],
            [
                18,
                "ruby",
                "Pres.ViewDelegation.method_missing",
                "```ruby\ndef method_missing(method, *args, &block)\n      if view_context.respond_to?(method, true)\n        view_context.send(method, *args, &block)\n      else\n        super\n      end\n    end\n```"
            ],
            [
                162,
                "ruby",
                "RackCAS.RedisStore.find_session",
                "```ruby\ndef find_session(env, sid)\n      if sid.nil?\n        sid = generate_sid\n        data = nil\n      else\n        unless session = Session.find_by_id(sid)\n          session = {}\n          # force generation of new sid since there is no associated session\n          sid = generate_sid\n        end\n        data = unpack(session['data'])\n      end\n\n      [sid, data]\n    end\n```"
            ],
            [
                893,
                "ruby",
                "Elephrame.Reply.reply_with_mentions",
                "```ruby\ndef reply_with_mentions(text, *options)\n      # build up a string of all accounts mentioned in the post\n      #  unless that account is our own, or the tagged account\n      #  has #NoBot\n      mentions = @mention_data[:mentions].collect do |m|\n        \"@#{m.acct}\" unless m.acct == @username or no_bot? m.id\n      end.join ' '\n      \n      reply(\"#{mentions.strip} #{text}\", *options)\n    end\n```"
            ],
            [
                833,
                "ruby",
                "Metro.Scene.after",
                "```ruby\ndef after(ticks,&block)\n      tick = OnUpdateOperation.new interval: ticks, context: self\n      tick.on_complete(&block)\n      enqueue tick\n    end\n```"
            ],
            [
                284,
                "ruby",
                "TensorStream.Ops.zeros_like",
                "```ruby\ndef zeros_like(tensor, dtype: nil, name: nil)\n      _op(:zeros_like, tensor, data_type: dtype, name: name)\n    end\n```"
            ],
            [
                664,
                "ruby",
                "CliftonXml.XmlDocument.create_xml_declaration",
                "```ruby\ndef create_xml_declaration(version, encoding)\r\n      declNode = XmlDeclarationNode.new() {\r\n        @attributes << XmlAttribute.new() {@name='version'; @value=version}\r\n        @attributes << XmlAttribute.new() {@name='encoding'; @value=encoding}\r\n      }\r\n\r\n      declNode.xml_document = self\r\n\r\n      declNode\r\n    end\n```"
            ],
            [
                451,
                "ruby",
                "SocialMediaMonitoring.Client.categories",
                "```ruby\ndef categories(country)\n      begin\n      results = Mash.new(self.class.get('/categories', :query => {:country => country}.merge(self.default_options)))\n    rescue => e\n      key_error e\n    end\n    end\n```"
            ],
            [
                768,
                "ruby",
                "SBDB.DB.each",
                "```ruby\ndef each key = nil, val = nil, &exe\n\t\t\tcursor {|c| c.each key, val, &exe }\n\t\tend\n```"
            ],
            [
                720,
                "ruby",
                "Metaforce.Job::Deploy.zip_file",
                "```ruby\ndef zip_file\n      path = Dir.mktmpdir\n      File.join(path, 'deploy.zip').tap do |path|\n        Zip::File.open(path, Zip::File::CREATE) do |zip|\n          Dir[\"#{@path}/**/**\"].each do |file|\n            zip.add(file.sub(\"#{File.dirname(@path)}/\", ''), file)\n          end\n        end\n      end\n    end\n```"
            ],
            [
                258,
                "ruby",
                "X12.XMLDefinitions.parse_table",
                "```ruby\ndef parse_table(e)\r\n      name, min, max, type, required, validation = parse_attributes(e)\r\n\r\n      content = e.find(\"Entry\").inject({}) {|t, entry|\r\n        t[entry.attributes[\"name\"]] = entry.attributes[\"value\"]\r\n        t\r\n      }\r\n      Table.new(name, content)\r\n    end\n```"
            ],
            [
                756,
                "ruby",
                "CMSScanner.Target.scope_url_pattern",
                "```ruby\ndef scope_url_pattern\n      return @scope_url_pattern if @scope_url_pattern\n\n      domains = [uri.host + uri.path]\n\n      domains += if scope.domains.empty?\n                   [*scope.invalid_domains[1..-1]]\n                 else\n                   [*scope.domains[1..-1]].map(&:to_s) + scope.invalid_domains\n                 end\n\n      domains.map! { |d| Regexp.escape(d.gsub(%r{/$}, '')).gsub('\\*', '.*').gsub('/', '\\\\\\\\\\?/') }\n\n      domains[0].gsub!(Regexp.escape(uri.host), Regexp.escape(uri.host) + '(?::\\\\d+)?') if uri.port\n\n      @scope_url_pattern = %r{https?:\\\\?/\\\\?/(?:#{domains.join('|')})\\\\?/?}i\n    end\n```"
            ],
            [
                837,
                "ruby",
                "CITA.Http.conn",
                "```ruby\ndef conn\n      Faraday.new(url: url) do |faraday|\n        faraday.headers[\"Content-Type\"] = \"application/json\"\n        faraday.request  :url_encoded # form-encode POST params\n        faraday.adapter  Faraday.default_adapter # make requests with Net::HTTP\n      end\n    end\n```"
            ]
        ]
    },
    "FuncNameTest-ruby MRR (bs=1,000)": 0.020964599323688382,
    "Examples-Validation-ruby": {
        "_type": "table",
        "columns": [
            "Rank",
            "Language",
            "Query",
            "Code"
        ],
        "data": [
            [
                610,
                "ruby",
                "Mako.FeedConstructor.parse_feed",
                "```ruby\ndef parse_feed\n      Feedjira::Feed.parse(feed_data)\n    rescue Feedjira::NoParserAvailable\n      Mako.errors.add_error \"Unable to parse #{feed_url}.\"\n      false\n    end\n```"
            ],
            [
                184,
                "ruby",
                "Spreadsheet.Format.rotation=",
                "```ruby\ndef rotation=(rot)\n      if rot.to_s.downcase == 'stacked'\n        @rotation_stacked = true\n        @rotation = 0\n      elsif rot.kind_of?(Integer)\n        @rotation_stacked = false\n        @rotation = rot % 360\n      else\n        raise TypeError, \"rotation value must be an Integer or the String 'stacked'\"\n      end\n    end\n```"
            ],
            [
                829,
                "ruby",
                "AdwordsApi.BatchJobUtils.get_job_results",
                "```ruby\ndef get_job_results(batch_job_url)\n      @api.utils_reporter.batch_job_utils_used()\n      xml_response = AdsCommon::Http.get_response(batch_job_url, @api.config)\n      begin\n        return sanitize_result(\n            get_nori().parse(xml_response.body)[:mutate_response][:rval])\n      rescue\n        return nil\n      end\n    end\n```"
            ],
            [
                528,
                "ruby",
                "Automata.PDA.has_transition?",
                "```ruby\ndef has_transition?(state, symbol)\n      return false unless @transitions.has_key? state\n      if @transitions[state].has_key? symbol\n        actions = @transitions[state][symbol]\n        return false if actions['pop'] && @stack.last != actions['pop']\n        return true\n      else\n        return false\n      end\n    end\n```"
            ],
            [
                218,
                "ruby",
                "Galena.Seed.populate",
                "```ruby\ndef populate\n      galena = CaTissue::Institution.new(:name => 'Galena University')\n\n      addr = CaTissue::Address.new(\n        :city => 'Galena', :state => 'Illinois', :country => 'United States', :zipCode => '37544',\n        :street => '411 Basin St', :phoneNumber => '311-555-5555')\n\n      dept = CaTissue::Department.new(:name => 'Pathology')\n\n      crg = CaTissue::CancerResearchGroup.new(:name => 'Don Thomas Cancer Center')\n\n      coord = CaTissue::User.new(\n        :email_address => 'corey.nator@galena.edu',\n        :last_name => 'Nator', :first_name => 'Corey', :address => addr.copy,\n        :institution => galena, :department => dept, :cancer_research_group => crg)\n\n      @hospital = CaTissue::Site.new(\n          :site_type => CaTissue::Site::SiteType::COLLECTION, :name => 'Galena Hospital', \n          :address => addr.copy, :coordinator => coord)\n\n      @tissue_bank = CaTissue::Site.new(\n          :site_type => CaTissue::Site::SiteType::REPOSITORY, :name => 'Galena Tissue Bank', \n          :address => addr.copy, :coordinator => coord)\n\n      pi = CaTissue::User.new(\n        :email_address => 'vesta.gator@galena.edu',\n        :last_name => 'Gator', :first_name => 'Vesta', :address => addr.copy,\n        :institution => galena, :department => dept, :cancer_research_group => crg)\n\n      @surgeon = CaTissue::User.new(\n        :email_address => 'serge.on@galena.edu',\n        :first_name => 'Serge', :last_name => 'On', :address => addr.copy,\n        :institution => galena, :department => dept, :cancer_research_group => crg)\n\n      @protocol = CaTissue::CollectionProtocol.new(:title => 'Galena Migration', \n        :principal_investigator => pi, :sites => [@tissue_bank])\n\n      # CPE has default 1.0 event point and label\n      cpe = CaTissue::CollectionProtocolEvent.new(\n        :collection_protocol => @protocol,\n        :event_point => 1.0\n      )\n      \n      # The sole specimen requirement. Setting the requirement collection_event attribute to a CPE automatically\n      # sets the CPE requirement inverse attribute in caRuby.\n      CaTissue::TissueSpecimenRequirement.new(:collection_event => cpe, :specimen_type => 'Fixed Tissue')\n\n      # the storage container type hierarchy\n      @freezer_type = CaTissue::StorageType.new(\n        :name => 'Galena Freezer',\n        :columns => 10, :rows => 1,\n        :column_label => 'Rack'\n      )\n      rack_type = CaTissue::StorageType.new(:name => 'Galena Rack', :columns => 10, :rows => 10)\n      @box_type = CaTissue::StorageType.new(:name => 'Galena Box', :columns => 10, :rows => 10)\n      @freezer_type << rack_type\n      rack_type << @box_type\n      @box_type << 'Tissue'\n      \n      # the example tissue box\n      @box = @box_type.new_container(:name => 'Galena Box 1')\n    end\n```"
            ],
            [
                148,
                "ruby",
                "Foursquare2.Lists.delete_list_item",
                "```ruby\ndef delete_list_item(list_id, item_id, options={})\n      response = connection.post do |req|\n        req.url \"lists/#{list_id}/deleteitem\", {:itemId => item_id}.merge(options)\n      end\n      return_error_or_body(response, response.body.response.item)\n    end\n```"
            ],
            [
                104,
                "ruby",
                "Viewpoint::EWS::SOAP.ExchangeAvailability.set_user_oof_settings",
                "```ruby\ndef set_user_oof_settings(opts)\n      opts = opts.clone\n      [:mailbox, :oof_state].each do |k|\n        validate_param(opts, k, true)\n      end\n      req = build_soap! do |type, builder|\n        if(type == :header)\n        else\n        builder.nbuild.SetUserOofSettingsRequest {|x|\n          x.parent.default_namespace = @default_ns\n          builder.mailbox! opts.delete(:mailbox)\n          builder.user_oof_settings!(opts)\n        }\n        end\n      end\n      do_soap_request(req, response_class: EwsSoapAvailabilityResponse)\n    end\n```"
            ],
            [
                665,
                "ruby",
                "Pancake.Paths.dirs_for",
                "```ruby\ndef dirs_for(name, opts = {})\n      if _load_paths[name].blank?\n        []\n      else\n        result = []\n        invert = !!opts[:invert]\n        load_paths = invert ? _load_paths[name].reverse : _load_paths[name]\n        roots.each do |root|\n          load_paths.each do |paths, glob|\n            paths = paths.reverse if invert\n            result << paths.map{|p| File.join(root, p)}\n          end\n        end\n        result.flatten\n      end # if\n    end\n```"
            ],
            [
                56,
                "ruby",
                "OmniAuth.Strategy.call!",
                "```ruby\ndef call!(env) # rubocop:disable CyclomaticComplexity, PerceivedComplexity\n      unless env['rack.session']\n        error = OmniAuth::NoSessionError.new('You must provide a session to use OmniAuth.')\n        raise(error)\n      end\n\n      @env = env\n      @env['omniauth.strategy'] = self if on_auth_path?\n\n      return mock_call!(env) if OmniAuth.config.test_mode\n      return options_call if on_auth_path? && options_request?\n      return request_call if on_request_path? && OmniAuth.config.allowed_request_methods.include?(request.request_method.downcase.to_sym)\n      return callback_call if on_callback_path?\n      return other_phase if respond_to?(:other_phase)\n\n      @app.call(env)\n    end\n```"
            ],
            [
                509,
                "ruby",
                "Zold.Farm.start",
                "```ruby\ndef start(host, port, threads: Concurrent.processor_count)\n      raise 'Block is required for the farm to start' unless block_given?\n      @log.info('Zero-threads farm won\\'t score anything!') if threads.zero?\n      if best.empty?\n        @log.info(\"No scores found in the cache at #{@cache}\")\n      else\n        @log.info(\"#{best.size} scores pre-loaded from #{@cache}, the best is: #{best[0]}\")\n      end\n      (1..threads).map do |t|\n        @threads.add do\n          Thread.current.thread_variable_set(:tid, t.to_s)\n          Endless.new(\"f#{t}\", log: @log).run do\n            cycle(host, port, threads)\n          end\n        end\n      end\n      unless threads.zero?\n        ready = false\n        @threads.add do\n          Endless.new('cleanup', log: @log).run do\n            cleanup(host, port, threads)\n            ready = true\n            sleep(1)\n          end\n        end\n        loop { break if ready }\n      end\n      if threads.zero?\n        cleanup(host, port, threads)\n        @log.info(\"Farm started with no threads (there will be no score) at #{host}:#{port}\")\n      else\n        @log.info(\"Farm started with #{@threads.count} threads (one for cleanup) \\\nat #{host}:#{port}, strength is #{@strength}\")\n      end\n      begin\n        yield(self)\n      ensure\n        @threads.kill\n      end\n    end\n```"
            ],
            [
                334,
                "ruby",
                "OnedClusterer.Ckmeans.select_levels",
                "```ruby\ndef select_levels(data, backtrack, kmin, kmax)\r\n      return kmin if kmin == kmax\r\n\r\n      method = :normal # \"uniform\" or \"normal\"\r\n\r\n      kopt = kmin\r\n\r\n      base = 1 # The position of first element in x: 1 or 0.\r\n      n = data.size - base\r\n\r\n      max_bic = 0.0\r\n\r\n      for k in kmin..kmax\r\n        cluster_sizes = []\r\n        kbacktrack = backtrack[0..k]\r\n        backtrack(kbacktrack) do |cluster, left, right|\r\n          cluster_sizes[cluster] = right - left + 1\r\n        end\r\n\r\n        index_left = base\r\n        index_right = 0\r\n\r\n        likelihood = 0\r\n        bin_left, bin_right = 0\r\n        for i in 0..(k-1)\r\n          points_in_bin = cluster_sizes[i + base]\r\n          index_right = index_left + points_in_bin - 1\r\n\r\n          if data[index_left] < data[index_right]\r\n            bin_left = data[index_left]\r\n            bin_right = data[index_right]\r\n          elsif data[index_left] == data[index_right]\r\n            bin_left = index_left == base ? data[base] : (data[index_left-1] + data[index_left]) / 2\r\n            bin_right = index_right < n-1+base ? (data[index_right] + data[index_right+1]) / 2 : data[n-1+base]\r\n          else\r\n            raise \"ERROR: binLeft > binRight\"\r\n          end\r\n\r\n          bin_width = bin_right - bin_left\r\n          if method == :uniform\r\n            likelihood += points_in_bin * Math.log(points_in_bin / bin_width / n)\r\n          else\r\n            mean = 0.0\r\n            variance = 0.0\r\n\r\n            for j in index_left..index_right\r\n              mean += data[j]\r\n              variance += data[j] ** 2\r\n            end\r\n            mean /= points_in_bin\r\n            variance = (variance - points_in_bin * mean ** 2) / (points_in_bin - 1) if points_in_bin > 1\r\n\r\n            if variance > 0\r\n              for j in index_left..index_right\r\n                likelihood += - (data[j] - mean) ** 2 / (2.0 * variance)\r\n              end\r\n              likelihood += points_in_bin * (Math.log(points_in_bin / Float(n))\r\n                - 0.5 * Math.log( 2 * Math::PI * variance))\r\n            else\r\n              likelihood += points_in_bin * Math.log(1.0 / bin_width / n)\r\n            end\r\n          end\r\n\r\n          index_left = index_right + 1\r\n        end\r\n\r\n        # Compute the Bayesian information criterion\r\n        bic = 2 * likelihood - (3 * k - 1) * Math.log(Float(n))\r\n\r\n        if k == kmin\r\n          max_bic = bic\r\n          kopt = kmin\r\n        elsif bic > max_bic\r\n          max_bic = bic\r\n          kopt = k\r\n        end\r\n\r\n      end\r\n\r\n      kopt\r\n    end\n```"
            ],
            [
                547,
                "ruby",
                "AdwordsApi.ReportUtils.check_for_errors",
                "```ruby\ndef check_for_errors(response)\n      # Check for error code.\n      if response.code != 200\n        # Check for error in body.\n        report_body = response.body\n        check_for_xml_error(report_body, response.code)\n        # No XML error found nor raised, falling back to a default message.\n        raise AdwordsApi::Errors::ReportError.new(response.code,\n            'HTTP code: %d, body: %s' % [response.code, response.body])\n      end\n      return nil\n    end\n```"
            ],
            [
                402,
                "ruby",
                "Sycsvpro.Calculator.method_missing",
                "```ruby\ndef method_missing(id, *args, &block)\n      return to_number(columns[$1.to_i]) if id =~ /c(\\d+)/\n      return to_date(columns[$1.to_i])   if id =~ /d(\\d+)/\n      return columns[$1.to_i]            if id =~ /s(\\d+)/\n      super\n    end\n```"
            ],
            [
                805,
                "ruby",
                "BootstrapAdmin.ControllerHelpers.respond_to?",
                "```ruby\ndef respond_to? method, include_private = false\n      true if bootstrap_admin_config.respond_to? method\n      super method, include_private\n    end\n```"
            ],
            [
                265,
                "ruby",
                "Music.Chord.inversion",
                "```ruby\ndef inversion(amount)\n      fail ArgumentError, 'Inversion amount must be greater than or equal to 1' if amount < 1\n      fail ArgumentError, 'Not enough notes in chord for inversion' if amount >= @notes.size\n\n      note_array = @notes.to_a.sort\n      notes = (0...amount).collect { note_array.shift.adjust_by_semitones(12) }\n      Chord.new(notes + note_array)\n    end\n```"
            ],
            [
                824,
                "ruby",
                "RediSearchRails.ClassMethods.ft_suglen",
                "```ruby\ndef ft_suglen (attribute:)\n      key = \"#{@model}:#{attribute}\"\n      REDI_SEARCH.call('FT.SUGLEN', key)\n    rescue Exception => e\n      Rails.logger.error e if defined? Rails\n      return e.message\n    end\n```"
            ],
            [
                953,
                "ruby",
                "Viewpoint::EWS::Types.GenericFolder.get_events",
                "```ruby\ndef get_events\n      begin\n        if subscribed?\n          resp = ews.get_events(@subscription_id, @watermark)\n          rmsg = resp.response_messages[0]\n          @watermark = rmsg.new_watermark\n          # @todo if parms[:more_events] # get more events\n          rmsg.events.collect{|ev|\n            type = ev.keys.first\n            class_by_name(type).new(ews, ev[type])\n          }\n        else\n          raise EwsSubscriptionError, \"Folder <#{self.display_name}> not subscribed to. Issue a Folder#subscribe before checking events.\"\n        end\n      rescue EwsSubscriptionTimeout => e\n        @subscription_id, @watermark = nil, nil\n        raise e\n      end\n    end\n```"
            ],
            [
                238,
                "ruby",
                "AdsCommon.ResultsExtractor.normalize_item",
                "```ruby\ndef normalize_item(item, field_def)\n      return case field_def[:type]\n        when 'long', 'int' then Integer(item)\n        when 'double', 'float' then Float(item)\n        when 'boolean' then item.kind_of?(String) ?\n            item.casecmp('true') == 0 : item\n        else item\n      end\n    end\n```"
            ],
            [
                48,
                "ruby",
                "Thredded.PostCommon.mark_as_unread",
                "```ruby\ndef mark_as_unread(user)\n      if previous_post.nil?\n        read_state = postable.user_read_states.find_by(user_id: user.id)\n        read_state.destroy if read_state\n      else\n        postable.user_read_states.touch!(user.id, previous_post, overwrite_newer: true)\n      end\n    end\n```"
            ],
            [
                905,
                "ruby",
                "RPM.Package.version",
                "```ruby\ndef version\n      v_ptr = ::FFI::MemoryPointer.new(:pointer, 1)\n      r_ptr = ::FFI::MemoryPointer.new(:pointer, 1)\n\n      RPM::C.headerNVR(ptr, nil, v_ptr, r_ptr)\n      v = v_ptr.read_pointer.read_string\n      r = r_ptr.read_pointer.read_string\n      v_ptr.free\n      r_ptr.free\n      Version.new(v, r, self[:epoch])\n    end\n```"
            ],
            [
                662,
                "ruby",
                "Mizuno.RackHandler.handle_exceptions",
                "```ruby\ndef handle_exceptions(response)\n            begin\n                yield\n            rescue => error\n                message = \"Exception: #{error}\"\n                message << \"\\n#{error.backtrace.join(\"\\n\")}\" \\\n                    if (error.respond_to?(:backtrace))\n                Server.logger.error(message)\n                return if response.isCommitted\n                response.reset\n                response.setStatus(500)\n            end\n        end\n```"
            ],
            [
                72,
                "ruby",
                "Turntabler.Connection.on_message",
                "```ruby\ndef on_message(event)\n      data = event.data\n\n      response = data.match(/~m~\\d*~m~(.*)/)[1]\n      message =\n        case response\n        when /no_session/\n          {'command' => 'no_session'}\n        when /(~h~[0-9]+)/\n          # Send the heartbeat command back to the server\n          publish_to_socket($1)\n          {'command' => 'heartbeat'}\n        else\n          JSON.parse(response)\n        end\n      message['command'] = 'response_received' if message['msgid']\n\n      logger.debug \"Message received: #{message.inspect}\"\n      dispatch(message)\n    end\n```"
            ],
            [
                365,
                "ruby",
                "CaTissue.StorageTypeHolder.add_child_type",
                "```ruby\ndef add_child_type(type)\n      case type\n        when CaTissue::StorageType then add_storage_type(type)\n        when CaTissue::SpecimenArrayType then add_specimen_array_type(type)\n        when String then add_specimen_class(type)\n        else raise ArgumentError.new(\"Storage type child not supported - #{type}\")\n      end\n      self\n    end\n```"
            ],
            [
                363,
                "ruby",
                "Geos::GoogleMaps.Api3::Geometry.to_g_marker_api3",
                "```ruby\ndef to_g_marker_api3(marker_options = {}, options = {})\n      options = {\n        :escape => [],\n        :lat_lng_options => {}\n      }.merge(options)\n\n      opts = Geos::Helper.camelize_keys(marker_options)\n      opts[:position] = self.centroid.to_g_lat_lng(options[:lat_lng_options])\n      json = Geos::Helper.escape_json(opts, Geos::GoogleMaps::Api3Constants::UNESCAPED_MARKER_OPTIONS - options[:escape])\n\n      \"new google.maps.Marker(#{json})\"\n    end\n```"
            ],
            [
                510,
                "ruby",
                "SMB.ClientHelper.put",
                "```ruby\ndef put(from, to, overwrite = false, raise = true)\n      ls_items = ls to, false\n      if !overwrite && !ls_items.empty?\n        raise Client::RuntimeError, \"File [#{to}] already exist\"\n      end\n      from = '\"' + from + '\"' if from.include? ' '\n      to = '\"' + to + '\"' if to.include? ' '\n      exec 'put ' + from + ' ' + to\n      true\n    rescue Client::RuntimeError => e\n      raise e if raise\n      false\n    end\n```"
            ],
            [
                18,
                "ruby",
                "AdwordsApi.ReportUtils.get_report_response_with_awql",
                "```ruby\ndef get_report_response_with_awql(report_query, format, cid, &block)\n      data = '__rdquery=%s&__fmt=%s' %\n          [CGI.escape(report_query), CGI.escape(format)]\n      return make_adhoc_request(data, cid, &block)\n    end\n```"
            ],
            [
                736,
                "ruby",
                "ZendeskAPI.Save.save_associations",
                "```ruby\ndef save_associations\n      self.class.associations.each do |association_data|\n        association_name = association_data[:name]\n\n        next unless send(\"#{association_name}_used?\") && association = send(association_name)\n\n        inline_creation = association_data[:inline] == :create && new_record?\n        changed = association.is_a?(Collection) || association.changed?\n\n        if association.respond_to?(:save) && changed && !inline_creation && association.save\n          send(\"#{association_name}=\", association) # set id/ids columns\n        end\n\n        if (association_data[:inline] == true || inline_creation) && changed\n          attributes[association_name] = association.to_param\n        end\n      end\n    end\n```"
            ],
            [
                204,
                "ruby",
                "Spidr.Page.method_missing",
                "```ruby\ndef method_missing(name,*arguments,&block)\n      if (arguments.empty? && block.nil?)\n        header_name = name.to_s.tr('_','-')\n\n        if @response.key?(header_name)\n          return @response[header_name]\n        end\n      end\n\n      return super(name,*arguments,&block)\n    end\n```"
            ],
            [
                623,
                "ruby",
                "G5AuthenticationClient.Client.list_users",
                "```ruby\ndef list_users\n      response=oauth_access_token.get(\"/v1/users\")\n      response.parsed.collect { |parsed_user| User.new(parsed_user) }\n    end\n```"
            ],
            [
                596,
                "ruby",
                "Api.Api.treat_data",
                "```ruby\ndef treat_data\n\t\t\t@hash_inter = Hash.new\n\t\t\t@hash = Hash.new\n\t\t\tif validate_api_return\n\t\t\t\t@hash_inter = @hash_local['list']['resources']['resource']\n\t\t\t\t@hash_inter.each do |cout|\n\t\t\t\t\tsimbol_string = cout['field'][0].to_s\n\t\t\t\t\tsimbol = simbol_string.split(\"/\")\n\t\t\t\t \t@hash[simbol[1]] = cout['field'][1].to_f\n\t\t \t\tend\n\t\t \telse\n \t\t\t\t@data = false\n \t\t\tend\t\n\t\tend\n```"
            ],
            [
                155,
                "ruby",
                "MandrillDm.DeliveryMethod.deliver!",
                "```ruby\ndef deliver!(mail)\n      mandrill_api = Mandrill::API.new(settings[:api_key])\n      message = Message.new(mail)\n      @response = if message.template\n                    mandrill_api.messages.send_template(\n                      message.template,\n                      message.template_content,\n                      message.to_json,\n                      MandrillDm.configuration.async,\n                      message.ip_pool || MandrillDm.configuration.ip_pool,\n                      message.send_at\n                    )\n                  else\n                    mandrill_api.messages.send(\n                      message.to_json,\n                      MandrillDm.configuration.async,\n                      message.ip_pool || MandrillDm.configuration.ip_pool,\n                      message.send_at\n                    )\n                  end\n    end\n```"
            ],
            [
                27,
                "ruby",
                "CaTissue.CollectionProtocol.migrate",
                "```ruby\ndef migrate(row, migrated)\n      super\n      self.title ||= Galena.administrative_objects.protocol.title\n      self.principal_investigator ||= Galena.administrative_objects.protocol.principal_investigator\n      sites << Galena.administrative_objects.tissue_bank if sites.empty?\n      coordinators << Galena.administrative_objects.tissue_bank.coordinator if coordinators.empty?\n    end\n```"
            ],
            [
                10,
                "ruby",
                "::ArJdbc.Teradata.change_column",
                "```ruby\ndef change_column(table_name, column_name, type, options = {}) #:nodoc:\n      change_column_sql = \"ALTER TABLE #{quote_table_name(table_name)} \" <<\n          \"ADD #{quote_column_name(column_name)} #{type_to_sql(type, options[:limit])}\"\n      add_column_options!(change_column_sql, options)\n      execute(change_column_sql)\n    end\n```"
            ],
            [
                450,
                "ruby",
                "InventoryRefresh.InventoryCollection.filtered_dependency_attributes",
                "```ruby\ndef filtered_dependency_attributes\n      filtered_attributes = dependency_attributes\n\n      if attributes_blacklist.present?\n        filtered_attributes = filtered_attributes.reject { |key, _value| attributes_blacklist.include?(key) }\n      end\n\n      if attributes_whitelist.present?\n        filtered_attributes = filtered_attributes.select { |key, _value| attributes_whitelist.include?(key) }\n      end\n\n      filtered_attributes\n    end\n```"
            ],
            [
                800,
                "ruby",
                "ZendeskAPI.Collection.<<",
                "```ruby\ndef <<(item)\n      fetch\n\n      if item.is_a?(Resource)\n        if item.is_a?(@resource_class)\n          @resources << item\n        else\n          raise \"this collection is for #{@resource_class}\"\n        end\n      else\n        @resources << wrap_resource(item, true)\n      end\n    end\n```"
            ],
            [
                270,
                "ruby",
                "EGPRates.CIB.parse",
                "```ruby\ndef parse(raw_data)\n      raw_data['d'].each_with_object(sell: {}, buy: {}) do |obj, result|\n        sell_rate = obj['SellRate']\n        buy_rate  = obj['BuyRate']\n        currency  = obj['CurrencyID'].to_sym\n\n        result[:sell][currency] = sell_rate\n        result[:buy][currency]  = buy_rate\n      end\n    end\n```"
            ],
            [
                156,
                "ruby",
                "Thredded.ContentModerationState.moderation_state_visible_to_user?",
                "```ruby\ndef moderation_state_visible_to_user?(user)\n      moderation_state_visible_to_all? ||\n        (!user.thredded_anonymous? &&\n          (user_id == user.id || user.thredded_can_moderate_messageboard?(messageboard)))\n    end\n```"
            ],
            [
                273,
                "ruby",
                "Viewpoint::EWS::SOAP.ExchangeNotification.pull_subscribe_folder",
                "```ruby\ndef pull_subscribe_folder(folder, evtypes, timeout = nil, watermark = nil)\n      timeout ||= 240 # 4 hour default timeout\n      psr = {\n        :subscribe_to_all_folders => false,\n        :folder_ids => [ {:id => folder[:id], :change_key => folder[:change_key]} ],\n        :event_types=> evtypes,\n        :timeout    => timeout\n      }\n      psr[:watermark] = watermark if watermark\n      subscribe([{pull_subscription_request: psr}])\n    end\n```"
            ],
            [
                2,
                "ruby",
                "Viewpoint::EWS::SOAP.ExchangeWebService.validate_version",
                "```ruby\ndef validate_version(exchange_version)\n      if server_version < exchange_version\n        msg = 'The operation you are attempting to use is not compatible with'\n        msg << \" your configured Exchange Server version(#{server_version}).\"\n        msg << \" You must be running at least version (#{exchange_version}).\"\n        raise EwsServerVersionError, msg\n      end\n    end\n```"
            ],
            [
                127,
                "ruby",
                "Respect.HashSchema.[]=",
                "```ruby\ndef []=(name, schema)\n      case name\n      when Symbol, String, Regexp\n        if @properties.has_key?(name)\n          raise InvalidSchemaError, \"property '#{name}' already defined\"\n        end\n        @properties[name] = schema\n      else\n        raise InvalidSchemaError, \"unsupported property name type #{name}:#{name.class}\"\n      end\n    end\n```"
            ],
            [
                703,
                "ruby",
                "BaseDataTypes.Vector.span_to",
                "```ruby\ndef span_to(spanner)\n      Vector.new((@x - spanner.x).abs, (@y - spanner.y).abs)\n    end\n```"
            ],
            [
                71,
                "ruby",
                "Lolize.Colorizer.rainbow",
                "```ruby\ndef rainbow\n      red = Math.sin(@freq*@color + 0) * 127 + 128\n      green = Math.sin(@freq*@color + 2*Math::PI/3) * 127 + 128\n      blue  = Math.sin(@freq*@color + 4*Math::PI/3) * 127 + 128\n      @color += 1/@spread\n      \"#%02X%02X%02X\" % [ red, green, blue ]\n    end\n```"
            ],
            [
                765,
                "ruby",
                "CaTissue.StorageContainer.add_to_existing_container",
                "```ruby\ndef add_to_existing_container(storable)\n      if storage_type.nil? then\n        raise Jinx::ValidationError.new(\"Cannot add #{storable.qp} to #{qp} with missing storage type\")\n      end\n      # the subcontainers in column, row sort order\n      scs = subcontainers.sort { |sc1, sc2| sc1.position.coordinate <=> sc2.position.coordinate }\n      logger.debug { \"Looking for a #{self} subcontainer from among #{scs.pp_s} to place #{storable.qp}...\" } unless scs.empty?\n      # The first subcontainer that can hold the storable is preferred.\n      sc = scs.detect do |sc|\n        # Check for circular reference. This occurred as a result of the caTissue bug described\n        # in CaTissue::Database#query_object. The work-around circumvents the bug for now, but\n        # it doesn't hurt to check again.\n        if identifier and sc.identifier == identifier then\n          raise Jinx::ValidationError.new(\"#{self} has a circular containment reference to subcontainer #{sc}\")\n        end\n        # No circular reference; add to subcontainer if possible.\n        sc.add_to_existing_container(storable) if StorageContainer === sc\n      end\n      if sc then\n        logger.debug { \"#{self} subcontainer #{sc} stored #{storable.qp}.\" }\n        self\n      elsif can_hold_child?(storable) then\n        logger.debug { \"#{self} can hold #{storable.qp}.\" }\n        add_local(storable)\n      else\n        logger.debug { \"Neither #{self} of type #{storage_type.name} nor its subcontainers can hold #{storable.qp}.\" }\n        nil\n      end\n    end\n```"
            ],
            [
                131,
                "ruby",
                "DTAUS.DtaGenerator.segment_e",
                "```ruby\ndef segment_e\n      result  = '0128'                              #  4 Zeichen  L\u00e4nge des Datensatzes, immer 128 Bytes, also immer \"0128\"\n      result += 'E'                                 #  1 Zeichen  Datensatz-Typ, immer 'E'\n      result += ' ' * 5                             #  5 Zeichen  5 Blanks\n      result += '%07i' % @datensatz.buchungen.size  #  7 Zeichen  Anzahl der Datens\u00e4tze vom Typ C\n      result += '0' * 13                            # 13 Zeichen  Kontrollsumme Betr\u00e4ge in DM\n      result += '%017i' % checksum_konto            # 17 Zeichen  Kontrollsumme Kontonummern\n      result += '%017i' % checksum_blz              # 17 Zeichen  Kontrollsumme Bankleitzahlen\n      result += '%013i' % checksum_betrag           # 13 Zeichen  Kontrollsumme Betr\u00e4ge in Euro\n      result += ' '  * 51                           # 51 Zeichen  51 Blanks\n      \n      raise IncorrectSize.new(\"E-Segment: #{result.size}, 128 erwartet\") if result.size != 128\n      \n      result\n    end\n```"
            ],
            [
                406,
                "ruby",
                "Contentful.ResourceReferences.incoming_references",
                "```ruby\ndef incoming_references(client = nil, query = {})\n      return false unless client\n\n      query = is_a?(Contentful::Entry) ? query.merge(links_to_entry: id) : query.merge(links_to_asset: id)\n\n      client.entries(query)\n    end\n```"
            ],
            [
                426,
                "ruby",
                "Turntabler.PlaylistDirectory.build",
                "```ruby\ndef build(attrs)\n      playlist = Playlist.new(client, attrs)\n\n      # Update existing in cache or cache a new playlist\n      if existing = @playlists[playlist.id]\n        playlist = existing\n        playlist.attributes = attrs\n      else\n        @playlists[playlist.id] = playlist\n      end\n\n      playlist\n    end\n```"
            ],
            [
                519,
                "ruby",
                "CloudApp.Client.bookmark",
                "```ruby\ndef bookmark(*args)\n      if args[0].is_a? Array\n        Drop.create(:bookmarks, args)\n      else\n        url, name = args[0], (args[1] || \"\")\n        Drop.create(:bookmark, {:name => name, :redirect_url => url})\n      end\n    end\n```"
            ],
            [
                208,
                "ruby",
                "Chatterbot.UI.get_api_key",
                "```ruby\ndef get_api_key\n      \n      green \"****************************************\"\n      green \"****************************************\"\n      green \"****        API SETUP TIME!         ****\"\n      green \"****************************************\"\n      green \"****************************************\"      \n\n\n      puts \"\\n\\nWelcome to Chatterbot. Let's walk through the steps to get a bot running.\\n\\n\"\n\n\n      #\n      # At this point, we don't have any API credentials at all for\n      # this bot, but it's possible the user has already setup an app.\n      # Let's ask!\n      #\n      \n      puts \"Hey, looks like you need to get an API key from Twitter before you can get started.\\n\\n\"\n      \n      app_already_exists = ask_yes_no(\"Have you already set up an app with Twitter?\")\n\n      if app_already_exists\n        puts \"Terrific! Let's get your bot running!\\n\\n\"\n      else\n        puts \"OK, I can help with that!\\n\\n\"\n        send_to_app_creation\n      end\n\n      \n      print \"\\n\\nPaste the 'Consumer Key' here: \"\n      STDOUT.flush\n      config[:consumer_key] = STDIN.readline.chomp.strip\n\n      print \"Paste the 'Consumer Secret' here: \"\n      STDOUT.flush\n      config[:consumer_secret] = STDIN.readline.chomp.strip\n\n\n      puts \"\\n\\nNow it's time to authorize your bot!\\n\\n\"\n      \n      if ! app_already_exists && ask_yes_no(\"Do you want to authorize a bot using the account that created the app?\")\n        puts \"OK, on the app page, you can click the 'Create my access token' button to proceed.\\n\\n\"\n\n        print \"Paste the 'Access Token' here: \"\n        STDOUT.flush\n        config[:access_token] = STDIN.readline.chomp.strip\n\n\n        print \"\\n\\nPaste the 'Access Token Secret' here: \"\n        STDOUT.flush\n        config[:access_token_secret] = STDIN.readline.chomp.strip\n\n      \n        # reset the client so we can re-init with new OAuth credentials\n        reset_client\n\n        # at this point we should have a fully validated client, so grab\n        # the screen name\n        @screen_name = client.user.screen_name rescue nil\n      else\n        reset_client\n      end\n        \n      \n      #\n      # capture ctrl-c and exit without a stack trace\n      #\n    rescue Interrupt => e\n      exit\n    end\n```"
            ],
            [
                271,
                "ruby",
                "AmazonFlexPay.API.get_account_activity",
                "```ruby\ndef get_account_activity(start_date, end_date, options = {})\n      submit GetAccountActivity.new(options.merge(:start_date => start_date, :end_date => end_date))\n    end\n```"
            ],
            [
                126,
                "ruby",
                "Spreadsheet.Workbook.set_custom_color",
                "```ruby\ndef set_custom_color idx, red, green, blue\n      raise 'Invalid format' if [red, green, blue].find { |c| ! (0..255).include?(c) }\n\n      @palette[idx] = [red, green, blue]\n    end\n```"
            ]
        ]
    },
    "Validation-ruby MRR (bs=1,000)": 0.02664397804527125,
    "Examples-Test-php": {
        "_type": "table",
        "columns": [
            "Rank",
            "Language",
            "Query",
            "Code"
        ],
        "data": [
            [
                500,
                "php",
                "TwigTemplating.loadPluginsFromDirectory",
                "```php\nprotected function loadPluginsFromDirectory($dirpath) {\n\t\tif (!is_dir($dirpath)) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t$contents = @scandir($dirpath);\n\t\t\n\t\tif (is_array($contents)) {\n\t\t\tforeach ($contents as $file) {\n\t\t\t\tif (substr($file,-4) == '.php') {\n\t\t\t\t\t$class = '\\\\' . substr($file,0,-4);\n\t\t\t\t\t\n\t\t\t\t\tif($class != '') {\n\t\t\t\t\t\t// is this secure enough?\n\t\t\t\t\t\t// we don't use autoloader as we don't know how taht plugins are stored\n\t\t\t\t\t\trequire_once($dirpath.'/'.$file);\n\t\t\t\t\t\t\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t$twig_object = new $class();\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tif ($twig_object instanceof \\Twig_Extension) {\n\t\t\t\t\t\t\t\t$this->addExtension($twig_object);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (\\Extension $e) {\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```"
            ],
            [
                679,
                "php",
                "ClassExtension.processTemplate",
                "```php\nprotected function processTemplate(Definition $definition, $name, array $variables = array())\n    {\n        $twig = $this->getTwig();\n\n        $variables['extension'] = $this;\n        $variables['options'] = $this->options;\n        $variables['class'] = $this->class;\n        $variables['config_class'] = $this->configClass;\n        $variables['config_classes'] = $this->configClasses;\n\n        $result = $twig->loadTemplate($name)->render($variables);\n\n        // properties\n        $expression = '/\n            (?P<docComment>\\ \\ \\ \\ \\/\\*\\*\\n[\\s\\S]*\\ \\ \\ \\ \\ \\*\\/)?\\n?\n             \\ \\ \\ \\ (?P<static>static\\ )?\n            (?P<visibility>public|protected|private)\n            \\s\n            \\$\n            (?P<name>[a-zA-Z0-9_]+)\n            ;\n        /xU';\n        preg_match_all($expression, $result, $matches);\n\n        for ($i = 0; $i <= count($matches[0]) - 1; $i++) {\n            $property = new Property($matches['visibility'][$i], $matches['name'][$i], null);\n            if ($matches['static'][$i]) {\n                $property->setStatic(true);\n            }\n            if ($matches['docComment'][$i]) {\n                $property->setDocComment($matches['docComment'][$i]);\n            }\n            $definition->addProperty($property);\n        }\n\n        // methods\n        $expression = '/\n            (?P<docComment>\\ \\ \\ \\ \\/\\*\\*\\n[\\s\\S]*\\ \\ \\ \\ \\ \\*\\/)?\\n\n            \\ \\ \\ \\ (?P<static>static\\ )?\n            (?P<visibility>public|protected|private)\n            \\s\n            function\n            \\s\n            (?P<name>[a-zA-Z0-9_]+)\n            \\((?P<arguments>[$a-zA-Z0-9_\\\\\\=\\(\\), ]*)\\)\n            \\n\n            \\ \\ \\ \\ \\{\n                (?P<code>[\\s\\S]*)\n            \\n\\ \\ \\ \\ \\}\n        /xU';\n        preg_match_all($expression, $result, $matches);\n\n        for ($i = 0; $i <= count($matches[0]) - 1; $i++) {\n            $code = trim($matches['code'][$i], \"\\n\");\n            $method = new Method($matches['visibility'][$i], $matches['name'][$i], $matches['arguments'][$i], $code);\n            if ($matches['static'][$i]) {\n                $method->setStatic(true);\n            }\n            if ($matches['docComment'][$i]) {\n                $method->setDocComment($matches['docComment'][$i]);\n            }\n            $definition->addMethod($method);\n        }\n    }\n```"
            ],
            [
                163,
                "php",
                "CategoryController.unFollowAction",
                "```php\npublic function unFollowAction($slug)\n    {\n        $this->denyAccessUnlessGranted('IS_AUTHENTICATED_REMEMBERED');\n        $category = $this->getCategoryManager()->findCategoryBySlug($slug);\n        $this->getCategoryManager()->unFollowCategory($category, $this->getUser());\n        $view = $this->view([\n            'follower_count' => $category->getFollowerCount(),\n        ]);\n\n        return $this->handleView($view);\n    }\n```"
            ],
            [
                626,
                "php",
                "Papi_Core_Container.remove",
                "```php\npublic function remove( $id ) {\n\t\t$id = $this->get_class_prefix( $id );\n\t\tunset( $this->keys[$id], $this->values[$id] );\n\t}\n```"
            ],
            [
                307,
                "php",
                "WordsmithService.chop",
                "```php\npublic function chop($s, $limit = 1, $unit = 'p', $append = null, $allowedTags = null) : string\n\t{\n\t\treturn (new Hacksaw())->chop($s, $limit, $unit, $append, $allowedTags);\n\t}\n```"
            ],
            [
                348,
                "php",
                "TimeTools.toEuropeanFormat",
                "```php\npublic static function toEuropeanFormat($date = null, $withHour = false)\r\n  {\r\n    if (is_string($date)) {\r\n      $time = strtotime($date);\r\n    } elseif (is_a($date, 'DateTime')) {\r\n      $time = $date->getTimestamp();\r\n    } else {\r\n      return null;\r\n    }\r\n    return date('d/m/Y' . ($withHour ? ' H:i:s' : ''), $time);\r\n  }\n```"
            ],
            [
                632,
                "php",
                "ChannelRepository.getChannel",
                "```php\npublic function getChannel($channelId)\n    {\n        $response = $this->getClient()->get(self::ENDPOINT.$channelId);\n        $data = $this->jsonResponse($response);\n\n        return $this->getFactory()->createEntity($data);\n    }\n```"
            ],
            [
                288,
                "php",
                "Usage.setRequirements",
                "```php\npublic function setRequirements($var)\n    {\n        $arr = GPBUtil::checkRepeatedField($var, \\Google\\Protobuf\\Internal\\GPBType::STRING);\n        $this->requirements = $arr;\n\n        return $this;\n    }\n```"
            ],
            [
                178,
                "php",
                "SignatureXmlReader.deserialize",
                "```php\npublic function deserialize(\\DOMNode $node, DeserializationContext $context)\n    {\n        $this->checkXmlNodeName($node, 'Signature', SamlConstants::NS_XMLDSIG);\n\n        $this->signature = new XMLSecurityDSig();\n        $this->signature->idKeys[] = $this->getIDName();\n        $this->signature->sigNode = $node;\n        $this->signature->canonicalizeSignedInfo();\n\n        $this->key = null;\n        $key = new XMLSecurityKey(XMLSecurityKey::RSA_SHA1, array('type' => 'public'));\n        XMLSecEnc::staticLocateKeyInfo($key, $node);\n        if ($key->name || $key->key) {\n            $this->key = $key;\n        }\n\n        $this->certificates = array();\n        $list = $context->getXpath()->query('./ds:KeyInfo/ds:X509Data/ds:X509Certificate', $node);\n        foreach ($list as $certNode) {\n            $certData = trim($certNode->textContent);\n            $certData = str_replace(array(\"\\r\", \"\\n\", \"\\t\", ' '), '', $certData);\n            $this->certificates[] = $certData;\n        }\n    }\n```"
            ],
            [
                293,
                "php",
                "Dispatcher.handle",
                "```php\npublic function handle(ServerRequestInterface $request): ResponseInterface\n    {\n        if ($this->middlewares->isEmpty()) {\n            if (null !== $this->requestHandler) {\n                return $this->requestHandler->handle($request);\n            }\n\n            return $this->response;\n        }\n\n        $middleware = $this->middlewares->dequeue();\n\n        if ('*' !== $middleware->getPath()) {\n            $uri = $request->getUri()->getPath();\n            $regex = '#^' . $middleware->getPath() . '#';\n\n            if (!preg_match($regex, $uri, $matches)) {\n                return $this->handle($request);\n            }\n        }\n\n        $middleware = $middleware->getMiddlewares();\n        $response = $middleware->process($request, $this);\n\n        if (!$response instanceof ResponseInterface) {\n            throw new \\RuntimeException('No valid response sending.');\n        }\n\n        return $response;\n    }\n```"
            ],
            [
                204,
                "php",
                "Buffer.offsetSet",
                "```php\npublic function offsetSet($index, $data)\n    {\n        $this->data = substr_replace($this->data, $data, $index, 1);\n    }\n```"
            ],
            [
                961,
                "php",
                "BaseBuilder._delete",
                "```php\nprotected function _delete(string $table): string\n\t{\n\t\treturn 'DELETE FROM ' . $table . $this->compileWhereHaving('QBWhere')\n\t\t\t\t. ($this->QBLimit ? ' LIMIT ' . $this->QBLimit : '');\n\t}\n```"
            ],
            [
                992,
                "php",
                "BudgetMonthMapper.findByBudgetId",
                "```php\npublic function findByBudgetId($budgetId, \\DateTimeImmutable $date)\n    {\n        $this->addWhere('budget_id', $budgetId);\n        $this->addWhere('budget_month_date', $date->format('Y-m-d'));\n\n        $result = $this->selectOne();\n\n        return $result;\n    }\n```"
            ],
            [
                418,
                "php",
                "PredisHandler.save",
                "```php\npublic function save(string $key, $value, int $ttl = 60)\n\t{\n\t\tswitch ($data_type = gettype($value))\n\t\t{\n\t\t\tcase 'array':\n\t\t\tcase 'object':\n\t\t\t\t$value = serialize($value);\n\t\t\t\tbreak;\n\t\t\tcase 'boolean':\n\t\t\tcase 'integer':\n\t\t\tcase 'double': // Yes, 'double' is returned and NOT 'float'\n\t\t\tcase 'string':\n\t\t\tcase 'NULL':\n\t\t\t\tbreak;\n\t\t\tcase 'resource':\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\n\t\tif (! $this->redis->hmset($key, ['__ci_type' => $data_type, '__ci_value' => $value]))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->redis->expireat($key, time() + $ttl);\n\n\t\treturn true;\n\t}\n```"
            ],
            [
                949,
                "php",
                "Migrator.getMigrationsForRollback",
                "```php\nprotected function getMigrationsForRollback(array $options)\n    {\n        $steps = Arr::get($options, 'step', 0);\n\n        if ($steps > 0) {\n            return $this->storage->getMigrations($steps);\n        } else {\n            return $this->storage->getLast();\n        }\n    }\n```"
            ],
            [
                757,
                "php",
                "QuickBooks_Driver_Sql.update",
                "```php\npublic function update($table, $object, $where = array(), $resync = true, $discov = null, $derive = true)\t// @todo Is that the correct default for $derive?\n\t{\n\t\t$sql = '';\n\t\t$set = array();\n\n\t\tif (is_object($object))\n\t\t{\n\t\t\t$object = $object->asArray();\n\t\t}\n\n\t\t$avail = $this->fields($table, true);\t\t// List of available fields\n\n\t\t// Case folding support\n\t\tif ($this->foldsToLower())\n\t\t{\n\t\t\t$object = array_change_key_case($object, CASE_LOWER);\n\t\t}\n\t\telse if ($this->foldsToUpper())\n\t\t{\n\t\t\t$object = array_change_key_case($object, CASE_UPPER);\n\t\t}\n\n\t\t// Merge by keys to make sure we don't INSERT any fields that don't exist in this schema\n\t\t$object = array_intersect_key($object, $avail);\n\n\t\t//\n\t\tforeach ($object as $field => $value)\n\t\t{\n\t\t\t// Commented out because doing this to very large integers (i.e. ItemRef/FullName is a large integer SKU) causes integer overflow\n\t\t\t/*if (strlen((int) $value) == strlen($value))\n\t\t\t{\n\t\t\t\t$set[] = $field . ' = ' . (int) $value;\n\t\t\t}\n\t\t\telse\n\t\t\t{*/\n\t\t\t//\t$set[] = $field . \" = '\" . $this->_escape($value) . \"' \";\n\t\t\t//}\n\n\t\t\tif (is_null($value))\n\t\t\t{\n\t\t\t\t$set[] = $field . \" = NULL \";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$set[] = $field . \" = '\" . $this->_escape($value) . \"' \";\n\t\t\t}\n\t\t}\n\n\t\t$wheres = array();\n\t\tforeach ($where as $part)\n\t\t{\n\t\t\tforeach ($part as $field => $value)\n\t\t\t{\n\t\t\t\t$wheres[] = $field . \" = '\" . $this->_escape($value) . \"' \";\n\t\t\t}\n\t\t}\n\n\t\t$sql = \"UPDATE \" . $this->_escape($table) . \" SET \" . implode(', ', $set);\n\n\t\tif ($resync)\n\t\t{\n\t\t\t$sql .= \", \" . QUICKBOOKS_DRIVER_SQL_FIELD_RESYNC . \" = '\" . date('Y-m-d H:i:s') . \"' \";\n\t\t}\n\n\t\t$sql .= \" WHERE \" . implode(' AND ', $wheres);\n\n\t\t//print($sql);\n\n\t\t$errnum = 0;\n\t\t$errmsg = '';\n\t\t$return = $this->_query($sql, $errnum, $errmsg);\n\n\t\tif (is_null($discov))\n\t\t{\n\t\t\t$discov = $resync;\n\t\t}\n\n\t\tif ($discov)\n\t\t{\n\t\t\t// Update the discover datetime *IF THE DISCOVER DATETIME IS NULL*\n\t\t\t//\tThis happens when an AddResponse is received, and we need to\n\t\t\t//\tupdate a record that has just been added to QuickBooks. If we\n\t\t\t//\tdon't mark it as discovered, then updates to the record will\n\t\t\t//\tnever be picked up and sent to QuickBooks\n\n\t\t\t$errnum = 0;\n\t\t\t$errmsg = '';\n\n\t\t\t$wheres[] = QUICKBOOKS_DRIVER_SQL_FIELD_DISCOVER . \" IS NULL \";\n\n\t\t\t$this->_query(\"\n\t\t\t\tUPDATE\n\t\t\t\t\t\" . $this->_escape($table) . \"\n\t\t\t\tSET\n\t\t\t\t\t\" . QUICKBOOKS_DRIVER_SQL_FIELD_DISCOVER . \" = \" . QUICKBOOKS_DRIVER_SQL_FIELD_RESYNC . \"\n\t\t\t\tWHERE\n\t\t\t\t\t\" . implode(' AND ', $wheres), $errnum, $errmsg);\n\t\t}\n\n\t\treturn $return;\n\t}\n```"
            ],
            [
                107,
                "php",
                "Zend_Config_Json._replaceConstants",
                "```php\nprotected function _replaceConstants($value)\n    {\n        foreach ($this->_getConstants() as $constant) {\n            if (strstr($value, $constant)) {\n                // handle backslashes that may represent windows path names for instance\n                $replacement = str_replace('\\\\', '\\\\\\\\', constant($constant));\n                $value = str_replace($constant, $replacement, $value);\n            }\n        }\n        return $value;\n    }\n```"
            ],
            [
                546,
                "php",
                "ItemCategory.setGroups",
                "```php\npublic function setGroups($groups)\n    {\n        // by Warringer\\Types\\Reference\n        $func = function ($value) { return new Reference($value); };\n\n        foreach ($groups as $key => $value) {\n            $this->groups[$key] = $func($value);\n        }\n    }\n```"
            ],
            [
                743,
                "php",
                "ShippingMethodController.tableAction",
                "```php\npublic function tableAction()\n    {\n        $dr = $this->getDoctrine()->getManager()->getRepository(ShippingMethod::class);\n        $shipmentMethodList = $dr->findAll();\n\n        return $this->render('DyweeOrderBundle:ShippingMethod:table.html.twig', array('shipmentMethods' => $shipmentMethodList));\n    }\n```"
            ],
            [
                907,
                "php",
                "ScopeRepository.getScopeEntityByIdentifier",
                "```php\npublic function getScopeEntityByIdentifier($identifier)\n    {\n        if (!empty($this::SCOPES[$identifier])) {\n            return $this->App->Di->get(ScopeEntity::class, ['identifier' => $identifier]);\n        }\n    }\n```"
            ],
            [
                281,
                "php",
                "Load.setPersistence",
                "```php\nprotected function setPersistence(string $name, $data, array $option = []): void\n    {\n        $this->cache->set($name, $data, $option);\n    }\n```"
            ],
            [
                561,
                "php",
                "Crypt_GPG_KeyGenerator.setKeyParams",
                "```php\npublic function setKeyParams($algorithm, $size = 0, $usage = 0)\n    {\n        $algorithm = intval($algorithm);\n\n        if ($algorithm === Crypt_GPG_SubKey::ALGORITHM_ELGAMAL_ENC) {\n            throw new Crypt_GPG_InvalidKeyParamsException(\n                'Primary key algorithm must be capable of signing. The ' .\n                'Elgamal algorithm can only encrypt.',\n                0,\n                $algorithm,\n                $size,\n                $usage\n            );\n        }\n\n        if ($size != 0) {\n            $size = intval($size);\n        }\n\n        if ($usage != 0) {\n            $usage = intval($usage);\n        }\n\n        $usageEncrypt = Crypt_GPG_SubKey::USAGE_ENCRYPT;\n\n        if ($algorithm === Crypt_GPG_SubKey::ALGORITHM_DSA\n            && ($usage & $usageEncrypt) === $usageEncrypt\n        ) {\n            throw new Crypt_GPG_InvalidKeyParamsException(\n                'The DSA algorithm is not capable of encrypting. Please ' .\n                'specify a different algorithm or do not include encryption ' .\n                'as a usage for the primary key.',\n                0,\n                $algorithm,\n                $size,\n                $usage\n            );\n        }\n\n        $this->keyAlgorithm = $algorithm;\n\n        if ($size != 0) {\n            $this->keySize = $size;\n        }\n\n        if ($usage != 0) {\n            $this->keyUsage = $usage;\n        }\n\n        return $this;\n    }\n```"
            ],
            [
                738,
                "php",
                "TokenListener.onRequest",
                "```php\npublic function onRequest(GetResponseEvent $event)\n    {\n        $request = $event->getRequest();\n\n        // Does this request require CSRF protection\n        if (true !== $request->get('filter_csrf')) {\n            return;\n        }\n\n        $postedToken = $request->get($this->tokenManager->getTokenName());\n        $actualToken = $this->tokenManager->getToken();\n\n        // Check if token is set\n        if ('POST' === $request->getMethod() && !$postedToken) {\n            throw new TokenNotFoundException();\n        }\n        // Check if token is valid\n        else if ('POST' === $request->getMethod()\n            && $postedToken !== $actualToken) {\n            throw new InvalidTokenException();\n        }\n    }\n```"
            ],
            [
                142,
                "php",
                "Features.addJs",
                "```php\npublic function addJs($handle, $src, $deps = array(), $ver = null, $in_footer = false)\n    {\n        $this->js[] = array(\n            'handle'    => $handle,\n            'src'       => $this->prepUrl($src),\n            'deps'      => $deps,\n            'ver'       => $ver,\n            'in_footer' => $in_footer\n        );\n\n        $this->addJsEnqueue($handle);\n\n        return $this;\n    }\n```"
            ],
            [
                468,
                "php",
                "MoveBuilder.addCancel",
                "```php\npublic function addCancel(MoveInterface $move)\n    {\n        foreach ($this->cancelAbilities as $cancelAbility) {\n            if ($cancelAbility->equals($move)) {\n                throw new LogicException(\n                    sprintf('Cancel ability \"%s\" already defined', $move->getName())\n                );\n            }\n        }\n\n        $this->cancelAbilities[] = $move;\n\n        return $this;\n    }\n```"
            ],
            [
                684,
                "php",
                "Google_Task_Runner.allowedRetries",
                "```php\npublic function allowedRetries($code, $errors = array())\n  {\n    if (isset($this->retryMap[$code])) {\n      return $this->retryMap[$code];\n    }\n\n    if (\n        !empty($errors) &&\n        isset($errors[0]['reason'], $this->retryMap[$errors[0]['reason']])\n    ) {\n      return $this->retryMap[$errors[0]['reason']];\n    }\n\n    return 0;\n  }\n```"
            ],
            [
                268,
                "php",
                "Papi_Property_Term.html",
                "```php\npublic function html() {\n\t\t$settings          = $this->get_settings();\n\t\t$layout            = $settings->layout;\n\t\t$labels            = $this->get_labels();\n\t\t$taxonomies        = $this->get_taxonomies();\n\t\t$render_label      = count( $taxonomies ) > 1;\n\t\t$advanced          = $render_label && $layout === 'advanced';\n\t\t$single            = $render_label && $layout !== 'advanced';\n\t\t$classes           = count( $taxonomies ) > 1 ? '' : 'papi-fullwidth';\n\t\t$value             = $this->get_value();\n\t\t$selected_term     = get_term( $value );\n\t\t$selected_term     = is_wp_error( $selected_term ) || empty( $selected_term ) ? '' : $selected_term;\n\t\t$selected_taxonomy = empty( $selected_term ) ? reset( $taxonomies ) : $selected_term->taxonomy;\n\t\t$value             = $this->get_term_value( $value );\n\t\t$selected_label    = reset( $labels );\n\n\t\tif ( $settings->select2 ) {\n\t\t\t$classes = ' papi-component-select2';\n\t\t}\n\n\t\t?>\n\n\t\t<div class=\"papi-property-term <?php echo $advanced ? 'advanced' : ''; ?>\">\n\t\t\t<?php if ( $advanced ): ?>\n\t\t\t\t<table class=\"papi-table\">\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<label for=\"<?php echo esc_attr( $this->html_id() ); ?>_taxonomy\">\n\t\t\t\t\t\t\t\t<?php echo esc_html( $settings->labels['select_taxonomy'] ); ?>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\tid=\"<?php echo esc_attr( $this->html_id() ); ?>_taxonomy\"\n\t\t\t\t\t\t\t\tclass=\"<?php echo esc_attr( $classes ); ?> papi-property-term-left\"\n\t\t\t\t\t\t\t\tdata-select-item=\"<?php echo esc_attr( $settings->labels['select_item'] ); ?>\"\n\t\t\t\t\t\t\t\tdata-term-query='<?php echo esc_attr( papi_maybe_json_encode( $settings->query ) ); ?>'\n\t\t\t\t\t\t\t\tdata-width=\"100%\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\tforeach ( $labels as $taxonomy => $label ) {\n\t\t\t\t\t\t\t\t\tpapi_render_html_tag( 'option', [\n\t\t\t\t\t\t\t\t\t\t'value'    => $taxonomy,\n\t\t\t\t\t\t\t\t\t\t'selected' => $taxonomy === $selected_taxonomy,\n\t\t\t\t\t\t\t\t\t\t$label\n\t\t\t\t\t\t\t\t\t] );\n\n\t\t\t\t\t\t\t\t\tif ( $selected ) {\n\t\t\t\t\t\t\t\t\t\t$selected_label = $label;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<label for=\"<?php echo esc_attr( $this->html_id() ); ?>_terms\">\n\t\t\t\t\t\t\t\t<?php echo esc_html( sprintf( $settings->labels['select_item'], $selected_label ) ); ?>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t<?php endif; ?>\n\n\t\t\t<?php\n\t\t\t\t$placeholder = ! is_null( $settings->placeholder ) ? $settings->placeholder : '';\n\t\t\t\t$placeholder = papi_is_empty( $placeholder ) ? '&nbsp;' : $placeholder;\n\t\t\t?>\n\n\t\t\t<select\n\t\t\t\tclass=\"<?php echo esc_attr( $classes ); ?>  papi-property-term-right\"\n\t\t\t\tid=\"<?php echo esc_attr( $this->html_id() ); ?>_terms\"\n\t\t\t\tname=\"<?php echo esc_attr( $this->html_name() ); ?>\"\n\t\t\t\tclass=\"<?php echo esc_attr( $classes ); ?>\"\n\t\t\t\tdata-allow-clear=\"<?php echo is_null( $settings->placeholder ) ? 'false' : 'true'; ?>\"\n\t\t\t\tdata-placeholder=\"<?php echo esc_attr( $placeholder ); ?>\"\n\t\t\t\tdata-width=\"100%\">\n\n\t\t\t\t<?php if ( ! is_null( $settings->placeholder ) ): ?>\n\t\t\t\t\t<option value=\"<?php echo esc_attr( $this->get_option( 'default', ' ' ) ); ?>\"><?php echo esc_html( $placeholder ); ?></option>\n\t\t\t\t<?php endif; ?>\n\n\t\t\t\t<?php foreach ( $taxonomies as $taxonomy ) : ?>\n\t\t\t\t\t<?php\n\t\t\t\t\tif ( $advanced && $taxonomy !== $selected_taxonomy ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$terms = $this->get_terms( $taxonomy );\n\t\t\t\t\tif ( empty( $terms ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t?>\n\n\t\t\t\t\t<?php if ( $single ): ?>\n\t\t\t\t\t\t<optgroup label=\"<?php echo esc_attr( $labels[$taxonomy] ); ?>\">\n\t\t\t\t\t<?php endif; ?>\n\n\t\t\t\t\t<?php\n\t\t\t\t\tforeach ( $terms as $term_id => $term_name ) {\n\t\t\t\t\t\tif ( papi_is_empty( $term_name ) ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpapi_render_html_tag( 'option', [\n\t\t\t\t\t\t\t'data-allow-clear' => $settings->allow_clear,\n\t\t\t\t\t\t\t'value'            => $this->get_term_value( $term_id ),\n\t\t\t\t\t\t\t'selected'         => $value === $this->get_term_value( $term_id ),\n\t\t\t\t\t\t\tesc_html( $term_name )\n\t\t\t\t\t\t] );\n\t\t\t\t\t}\n\t\t\t\t\t?>\n\n\t\t\t\t\t<?php if ( $single ): ?>\n\t\t\t\t\t\t</optgroup>\n\t\t\t\t\t<?php endif; ?>\n\n\t\t\t\t<?php endforeach; ?>\n\t\t\t</select>\n\n\t\t\t<?php if ( $advanced ): ?>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\t\t\t<?php endif; ?>\n\n\t\t</div>\n\t\t<?php\n\t}\n```"
            ],
            [
                242,
                "php",
                "StringHelper.truncateHtml",
                "```php\nprotected function truncateHtml($string, $count, $suffix, $encoding = false)\n    {\n        return $this->proxyWithCharset(__FUNCTION__, [$string, $count, $suffix, $encoding]);\n    }\n```"
            ],
            [
                784,
                "php",
                "Rediska_Connection_Exec.getConnection",
                "```php\npublic function getConnection()\n    {\n        if ($this->_responseIterator === null) {\n            return $this->_connection;\n        } else {\n            if ($this->_connectionClone === null) {\n                $this->_connectionClone = clone $this->_connection;\n            }\n\n            return $this->_connectionClone;\n        }\n\n        return $this->_connection;\n    }\n```"
            ],
            [
                253,
                "php",
                "Command.execute",
                "```php\npublic function execute($lazy = true)\n    {\n        $sql = $this->getSql();\n        $rawSql = $this->getRawSql();\n\n        if ($sql == '') {\n            return reject(false);\n        }\n\n        $execPromise = $this->internalExecute($rawSql, [], $lazy);\n        $needResCount = $this->needResultsCount();\n        $thenCallback = function($results = []) use ($needResCount) {\n            $result = $needResCount ? count($results) : true;\n            return $this->refreshTableSchema()->then(\n                function() use ($result) {\n                    return $result;\n                }\n            );\n        };\n        return $execPromise instanceof LazyPromiseInterface\n            ? $execPromise->thenLazy($thenCallback)\n            : $execPromise->then($thenCallback);\n    }\n```"
            ],
            [
                100,
                "php",
                "AbstractBooleanOption.setValue",
                "```php\npublic function setValue($value)\n    {\n        if (!is_bool($value) && ($value !== null)) {\n            throw new \\InvalidArgumentException(sprintf(\n                'The option \"%s\" only accepts boolean value.',\n                $this->getName()\n            ));\n        }\n\n        parent::setValue($value);\n    }\n```"
            ],
            [
                572,
                "php",
                "DataGridExtension.getGrid_",
                "```php\npublic function getGrid_(Twig_Environment $environment, $name, $grid)\n    {\n        return $this->renderBlock($environment, 'grid_' . $name, ['grid' => $grid]);\n    }\n```"
            ],
            [
                602,
                "php",
                "Parser.consumeParagraph",
                "```php\nprotected function consumeParagraph($lines, $current)\n\t{\n\t\t// consume until newline\n\t\t$content = [];\n\t\tfor ($i = $current, $count = count($lines); $i < $count; $i++) {\n\t\t\tif (ltrim($lines[$i]) !== '') {\n\t\t\t\t$content[] = $lines[$i];\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$block = [\n\t\t\t'paragraph',\n\t\t\t'content' => $this->parseInline(implode(\"\\n\", $content)),\n\t\t];\n\t\treturn [$block, --$i];\n\t}\n```"
            ],
            [
                962,
                "php",
                "CartEditField.editableItems",
                "```php\nprotected function editableItems()\n    {\n        $editables = ArrayList::create();\n        foreach ($this->items as $item) {\n            $buyable = $item->Buyable();\n            if (!$buyable) {\n                continue;\n            }\n            // If the buyable is a variation, use the belonging product instead for variation-form generation\n            if ($buyable instanceof Variation) {\n                $buyable = $buyable->Product();\n            }\n            $name = $this->name . \"[$item->ID]\";\n            $quantity = TextField::create(\n                $name . '[Quantity]',\n                'Quantity',\n                $item->Quantity\n            )\n                ->addExtraClass('numeric')\n                ->setAttribute('type', 'number')\n                ->setAttribute('min', '0');\n\n            $variationfield = false;\n            if ($buyable->hasMany('Variations')) {\n                $variations = $buyable->Variations();\n                if ($variations->exists()) {\n                    $variationfield = DropdownField::create(\n                        $name . '[ProductVariationID]',\n                        _t('SilverShop\\Model\\Variation\\Variation.SINGULARNAME', 'Variation'),\n                        $variations->map('ID', 'Title'),\n                        $item->ProductVariationID\n                    );\n                }\n            }\n            $remove = CheckboxField::create($name . '[Remove]', _t('SilverShop\\Generic.Remove', 'Remove'));\n            $editables->push(\n                $item->customise(\n                    array(\n                        'QuantityField' => $quantity,\n                        'VariationField' => $variationfield,\n                        'RemoveField' => $remove,\n                    )\n                )\n            );\n        }\n\n        if (is_callable($this->editableItemsCallback)) {\n            $callback = $this->editableItemsCallback;\n            $editables = $callback($editables);\n        }\n\n        return $editables;\n    }\n```"
            ],
            [
                521,
                "php",
                "Output.conclusion",
                "```php\npublic function conclusion($handleTable, $filterTable)\n    {\n        $enter = self::ENTER;\n        $handleNumber = count($handleTable);\n        $filterNumber = count($filterTable);\n        $handleTableString = implode($handleTable, ', ');\n        $filterTableString = implode($filterTable, ', ');\n        $tables = Yii::t('dump', 'Tables');\n        $handle = Yii::t('dump', 'Handle');\n        $filter = Yii::t('dump', 'Filter');\n\n\n        $header = <<<HEADER\n/**********************************/\n/************ Conclusion **********/\n/**********************************/\n\nHEADER;\n\n        $footer = <<<FOOTER\n        \n/************ Conclusion *********/$enter\nFOOTER;\n\n        $handle = <<<HANDLE\n/*** $handle $handleNumber $tables: */\n>>> $handleTableString$enter\nHANDLE;\n\n        $filter = <<<FILTER\n/*** $filter $filterNumber $tables: */\n>>> $filterTableString\nFILTER;\n\n\n        $this->stdout($header, 0, Console::FG_YELLOW);\n        $this->stdout($handle, Console::BOLD, Console::FG_YELLOW);\n        $this->stdout($filter, Console::BOLD, Console::FG_YELLOW);\n        $this->stdout($footer, 0, Console::FG_GREEN);\n    }\n```"
            ],
            [
                905,
                "php",
                "ResourceLoader.loadResourcesForModule",
                "```php\npublic static function loadResourcesForModule($module)\n    {\n\n        global $objPage;\n\n        $neededResources = array();\n\n        switch ($module) {\n            case 'maps':\n                // Maps 3\n                //\n                $neededResources['clipboard'] = true;\n\n\n                // check if jQuery needs to be loaded\n                $jQueryLoaded = false;\n                $scripts = $GLOBALS['TL_JAVASCRIPT'];\n                if (is_array($scripts)) {\n                    foreach ($scripts as $strScriptUrl) {\n                        if (preg_match('/assets\\/jquery\\/core\\/\\d+\\.\\d+\\.\\d+\\/jquery\\.min\\.js/i', $strScriptUrl)) {\n                            $jQueryLoaded = true;\n                            break;\n                        }\n                    }\n                }\n\n                if ($objPage->hasJQuery)\n                {\n                    $jQueryLoaded = true;\n                }\n\n                if ($GLOBALS['CON4GIS']['JQUERY-LOADED'])\n                {\n                    $jQueryLoaded = true;\n                }\n\n                $neededResources['jquery'] = !$jQueryLoaded;\n                \n                // Load magnific-popup.js for projects\n                $neededResources['magnific-popup'] = $GLOBALS['con4gis']['projects']['installed'];\n\n                //ToDo switch for pdf export\n                $neededResources['jspdf'] = false;\n\n                break;\n\n            default:\n                return false;\n        }\n\n        return self::loadResources($neededResources);\n    }\n```"
            ],
            [
                213,
                "php",
                "QSAMapper.select",
                "```php\npublic function select(SelectionUnit $selectionUnit)\n    {\n        $key = 'number_'.$selectionUnit->getNumber();\n\n        if(array_key_exists($key, $this->collections))\n        {\n            return $this->collections[$key];\n        }\n\n        //====================================================\n        $type = $selectionUnit->getType();\n        $type_name = $type->getName();\n\n        $mapCollection = $this->collectionFactory->createMapGroupCollection($type);\n\n        $qb = $this->qsQuerier->selectByUnit($selectionUnit);\n\n        $result_array = Helpers::laravel_db_result_to_array($qb->get());\n\n        $id_set = array_column($result_array, 'id');\n\n        $selectionUnit->addId($id_set);\n        $selectionUnit->complete();\n\n        $ownsMetaCollection = $type->getOwns();\n        $refsMetaCollection = $type->getRefs();\n\n        $refs_array = $this->qsQuerier->getRefValues($type_name, $id_set);\n\n        foreach($result_array as $item_result)\n        {\n            $ref = new \\Interpro\\Core\\Ref\\ARef($type, (int)$item_result['id']);\n\n            $item = $this->factory->create($ref);\n\n            //====================================================\u043f\u043e\u043b\u044f\n            foreach($ownsMetaCollection as $ownMeta)\n            {\n                $fieldType = $ownMeta->getFieldType();\n                $fieldMode = $ownMeta->getMode();\n\n                $field_name = $ownMeta->getName();\n\n                if($this->local($field_name)) //\u0432\u0441\u0435 \u043f\u043e\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f - \u0421 \u0442\u0438\u043f\u044b\n                {\n                    $newField = $this->createLocalCField($item, $ownMeta, $item_result);\n                }\n                else\n                {\n                    if($fieldMode === TypeMode::MODE_B)\n                    {\n                        $mapper = $this->mappersMediator->getBMapper($fieldType->getFamily());\n                        $map = $mapper->select($selectionUnit);//\u0421\u0435\u043b\u0435\u043a\u0442 \u043a\u044d\u0448\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0432 \u043c\u0430\u043f\u043f\u0435\u0440\u0435 \u043f\u043e\u043b\u0435\u0439, \u043e\u0431\u0440\u0430\u0449\u0430\u0435\u043c\u0441\u044f \u043a\u0430\u0436\u0434\u0438\u0439 \u0440\u0430\u0437 \u043f\u0440\u0438 \u043f\u043e\u0438\u0441\u043a\u0435 \u043f\u043e\u043b\u044f\n                        $newField = $this->createExternalBFieldByRef($item, $ownMeta, $map);\n                    }\n                    elseif($fieldMode === TypeMode::MODE_C)\n                    {\n                        $mapper = $this->mappersMediator->getCMapper($fieldType->getFamily());\n                        $map = $mapper->select($selectionUnit);//\u0421\u0435\u043b\u0435\u043a\u0442 \u043a\u044d\u0448\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0432 \u043c\u0430\u043f\u043f\u0435\u0440\u0435 \u043f\u043e\u043b\u0435\u0439, \u043e\u0431\u0440\u0430\u0449\u0430\u0435\u043c\u0441\u044f \u043a\u0430\u0436\u0434\u0438\u0439 \u0440\u0430\u0437 \u043f\u0440\u0438 \u043f\u043e\u0438\u0441\u043a\u0435 \u043f\u043e\u043b\u044f\n                        $newField = $this->createExternalCFieldByRef($item, $ownMeta, $map);\n                    }\n                    else\n                    {\n                        throw new QSException('\u0412 \u0442\u0438\u043f\u0435 '.$type_name.' \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u043e \u043f\u043e\u043b\u0435-\u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0442\u0438\u043f\u0430 \u043e\u0442\u043b\u0438\u0447\u043d\u043e\u0433\u043e \u043e\u0442 \u0412 \u0438\u043b\u0438 \u0421: '.$field_name.'('.$fieldMode.')!');\n                    }\n                }\n\n                $item->setOwn($newField);\n                $item->setField($newField);\n            }\n\n            //====================================================\u0441\u0441\u044b\u043b\u043a\u0438\n            foreach($refsMetaCollection as $refMeta)\n            {\n                $newField = $this->createRefField($item, $refMeta, $refs_array);\n\n                $item->setRef($newField);\n                $item->setField($newField);\n            }\n\n            $mapCollection->addItem($item);\n        }\n\n        $this->collections[$key] = $mapCollection;\n\n        return $mapCollection;\n    }\n```"
            ],
            [
                200,
                "php",
                "Manager.connectServer",
                "```php\nprotected function connectServer(PredisProxy $redis, $server)\n    {\n        try {\n            $redis->callRedisConstructor(array(\n                'host' => $server['ip'],\n                'port' => (int) $server['port'],\n                'timeout' => $this->getTimeout(),\n                'read_write_timeout' => $this->getReadWriteTimeout()\n                ));\n                // check if we are connected\n            $redis->connect();\n\n            return true;\n        } catch (Predis\\Connection\\ConnectionException $e) {\n            return false;\n        }\n\n    }\n```"
            ],
            [
                69,
                "php",
                "Logger.logQuery",
                "```php\npublic function logQuery($query, $time, array $explain, array $warnings)\n    {\n        $log = sprintf('time:%s query: %s', $time, $query);\n        error_log($log);\n        $this->explain = $explain;\n        $this->warnings = $warnings;\n        if ($warnings) {\n            error_log('warnings:' . (string) json_encode($warnings, JSON_PRETTY_PRINT));\n            error_log('explain :' . (string) json_encode($explain, JSON_PRETTY_PRINT));\n        }\n    }\n```"
            ],
            [
                214,
                "php",
                "UserController.getUserFollowersAction",
                "```php\npublic function getUserFollowersAction($username, Request $request)\n    {\n        $manager = $this->getUserManager();\n        $user = $manager->findUserByName($username);\n        $followers = $manager->findUserFollowers($user, $request->query->getInt('page', 1));\n\n        $view = $this->view([\n                'user' => $user,\n                'followers' => $followers,\n            ])->setTemplate($this->configuration->getTemplate('User:user_followers.html.twig'));\n\n        return $this->handleView($view);\n    }\n```"
            ],
            [
                150,
                "php",
                "Papi_Query.get_query_args",
                "```php\npublic function get_query_args() {\n\t\t$args = $this->args;\n\n\t\tif ( empty( $args['meta_query'] ) ) {\n\t\t\t// Add new meta key/value if `meta_key` or `meta_value` is empty.\n\t\t\tif ( empty( $args['meta_key'] ) || empty( $args['meta_value'] ) ) {\n\t\t\t\t$args['meta_key']   = papi_get_page_type_key();\n\t\t\t\t$args['meta_value'] = $args['entry_type'];\n\t\t\t} else if ( papi_entry_type_exists( $args['entry_type'] ) ) {\n\t\t\t\t$item = [\n\t\t\t\t\t'key'   => $args['meta_key'],\n\t\t\t\t\t'value' => $args['meta_value']\n\t\t\t\t];\n\n\t\t\t\t// Add `meta_compare` if set.\n\t\t\t\tif ( isset( $args['meta_compare'] ) ) {\n\t\t\t\t\t$item['compare'] = $args['meta_compare'];\n\n\t\t\t\t\tunset( $args['meta_compare'] );\n\t\t\t\t}\n\n\t\t\t\t// Add new meta query item.\n\t\t\t\t$args['meta_query'][] = $item;\n\n\t\t\t\t// Add Papi entry/page type meta query.\n\t\t\t\t$args['meta_query'][] = [\n\t\t\t\t\t'key'   => papi_get_page_type_key(),\n\t\t\t\t\t'value' => $args['entry_type']\n\t\t\t\t];\n\n\t\t\t\t// Add meta query relation when two query items.\n\t\t\t\tif ( isset( $args['relation'] ) ) {\n\t\t\t\t\t$args['meta_query']['relation'] = $args['relation'];\n\t\t\t\t} else {\n\t\t\t\t\t$args['meta_query']['relation'] = 'AND';\n\t\t\t\t}\n\n\t\t\t\tunset( $args['meta_key'] );\n\t\t\t\tunset( $args['meta_value'] );\n\t\t\t}\n\t\t} else if ( papi_entry_type_exists( $args['entry_type'] ) ) {\n\t\t\t// Add Papi entry/page type meta query.\n\t\t\t$args['meta_query'][] = [\n\t\t\t\t'key'   => papi_get_page_type_key(),\n\t\t\t\t'value' => $args['entry_type']\n\t\t\t];\n\n\t\t\t// Add meta query relation if not set.\n\t\t\tif ( ! isset( $args['meta_query']['relation'] ) ) {\n\t\t\t\t$args['meta_query']['relation'] = 'AND';\n\t\t\t}\n\t\t}\n\n\t\t// Since the real query classes don't support\n\t\t// custom arguments the should be deleted.\n\t\tforeach ( array_keys( $this->default_args ) as $key ) {\n\t\t\tif ( isset( $args[$key] ) ) {\n\t\t\t\tunset( $args[$key] );\n\t\t\t}\n\t\t}\n\n\t\treturn $args;\n\t}\n```"
            ],
            [
                691,
                "php",
                "User.login",
                "```php\npublic function login(Auth $auth, $duration = 0 /*, Response $response = NULL, $duration = 0*/)\n    {\n        $user_groups = serialize($auth->getUserGroups());\n        $user_id     = $auth->getUserId();\n        $user_name   = $auth->getUserName();\n\n        $this->session->migrate(false, $duration);\n\n        $this->session->set(self::USER_ID, $user_id);\n        $this->session->set(self::USER_NAME, $user_name);\n        $this->session->set(self::USER_GROUPS, $user_groups);\n    }\n```"
            ],
            [
                536,
                "php",
                "Magniloquent.mergeRules",
                "```php\nprotected function mergeRules()\n    {\n        $rules = static::$rules;\n        $output = array();\n\n        if ($this->exists)\n            $merged = array_merge_recursive($rules['save'], $rules['update']);\n        else\n            $merged = array_merge_recursive($rules['save'], $rules['create']);\n\n        foreach ($merged as $field => $rules)\n        {\n            if (is_array($rules))\n                $output[$field] = implode(\"|\", $rules);\n            else\n                $output[$field] = $rules;\n        }\n\n        $this->mergedRules = $output;\n    }\n```"
            ],
            [
                205,
                "php",
                "Operation.makeCrop",
                "```php\nprotected function makeCrop(ARef $aRef, ImageSettingInterface $imageSetting, CropSettingInterface $cropSetting, array $item_attrs = [])\n    {\n        $manual = false;\n\n        if(array_key_exists('manual', $item_attrs))\n        {\n            $manual = (bool) $item_attrs['manual'];\n        }\n\n        $resizes_dir = $this->pathResolver->getResizeDir();\n\n        if (!is_readable($resizes_dir))\n        {\n            throw new OperationException('\u0414\u0438\u0440\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u0440\u0435\u0441\u0430\u0439\u0437\u043e\u0432 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f!');\n        }\n\n        $crops_dir = $this->pathResolver->getCropDir();\n\n        if (!is_writable($crops_dir))\n        {\n            throw new OperationException('\u0414\u0438\u0440\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u043a\u0440\u043e\u043f\u043e\u0432 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438!');\n        }\n\n        $crop_x = 0;\n        $crop_y = 0;\n\n        if(array_key_exists('x', $item_attrs))\n        {\n            $crop_x = $item_attrs['x'];\n        }\n\n        if(array_key_exists('y', $item_attrs))\n        {\n            $crop_y = $item_attrs['y'];\n        }\n\n        //\u0418\u0449\u0435\u043c \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0440\u0435\u0441\u0430\u0439\u0437\n        $targetResizeSetting = $cropSetting->getTarget();\n        $target_prefix = $this->getImagePrefix($imageSetting->getEntityName(), $aRef->getId(), $imageSetting->getName(), GenVariant::RESIZE, $targetResizeSetting->getName());\n        $target_path = $resizes_dir.'/'.$target_prefix;\n\n        $target_file_name = false;\n\n        foreach (glob($target_path.'.*') as $file)\n        {\n            if(is_dir($file))\n            {\n                continue;\n            }\n\n            $target_mime = File::mimeType($file);\n\n            if($this->isVectorImage($target_mime))\n            {\n                throw new OperationException('\u041f\u043e\u043f\u044b\u0442\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u0440\u043e\u043f \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 '.$file.'!');\n            }\n\n            $target_file_name = $file;\n\n            break;\n        }\n\n        if(!$target_file_name)\n        {\n            throw new OperationException('\u041d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d \u0444\u0430\u0439\u043b \u0446\u0435\u043b\u0438 \u0434\u043b\u044f \u043a\u0440\u043e\u043f\u0430 \u043f\u043e \u043f\u0443\u0442\u0438 '.$target_path.'!');\n        }\n\n        $target_extension = File::extension($target_file_name);\n\n        //\u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0443\u0442\u0438 \u043a \u0444\u0430\u0439\u043b\u0443 \u043a\u0440\u043e\u043f\u0430\n        $crop_prefix = $this->getImagePrefix($imageSetting->getEntityName(), $aRef->getId(), $imageSetting->getName(), GenVariant::CROP, $cropSetting->getName());\n        $crop_file_name = $crop_prefix.'.'.$target_extension;\n        $crop_path = $crops_dir.'/'.$crop_file_name;\n\n        //\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u0440\u043e\u043f\u0430 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438\n        $crop_width = $cropSetting->getWidth();\n        $crop_height = $cropSetting->getHeight();\n        $crop_color = $cropSetting->getColor();\n\n        $target = ImageFacade::make($target_file_name);\n\n        //\u0420\u0430\u0437\u043c\u0435\u0440\u044b \u0446\u0435\u043b\u0438\n        $target_width = $target->getWidth();\n        $target_height = $target->getHeight();\n\n        //\u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u21161, \u0435\u0441\u043b\u0438 \u043a\u0440\u043e\u043f \u0431\u043e\u043b\u044c\u0448\u0435 \u0446\u0435\u043b\u0438 \u0438 \u043d\u0435 \u0441\u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\n        if($target_width < $crop_width and $target_height < $crop_height and $crop_x === 0 and $crop_y === 0 and !$manual)\n        {\n            ImageFacade::canvas($crop_width, $crop_height, $crop_color)->insert($target, 'center')->save($crop_path, 100);\n        }\n        else //\u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u21162, \u0435\u0441\u043b\u0438 \u043a\u0440\u043e\u043f \u0441\u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d \u0438\u043b\u0438 \u043c\u0435\u043d\u044c\u0448\u0435 \u0446\u0435\u043b\u0438\n        {\n            $crop_left = $crop_x;\n            $target_left = 0;\n\n            $crop_right = $crop_x + $crop_width;\n            $target_right = $target_width;\n\n            $crop_top = $crop_y;\n            $target_top = 0;\n\n            $crop_bottom = $crop_y + $crop_height;\n            $target_bottom = $target_height;\n\n            //\u0415\u0441\u043b\u0438 \u043d\u0435 \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u044e\u0442\u0441\u044f:\n            //(\u041d\u0438\u0436\u043d\u0438\u0439 \u043a\u0440\u0430\u0439 \u0440\u0430\u043c\u043a\u0438 \u043a\u0440\u043e\u043f\u0430 \u0432\u044b\u0448\u0435 \u0432\u0435\u0440\u0445\u043d\u0435\u0433\u043e \u043a\u0440\u0430\u044f \u0446\u0435\u043b\u0438)\n            //\u0438\u043b\u0438 (\u0432\u0435\u0440\u0445\u043d\u0438\u0439 \u043a\u0440\u0430\u0439 \u0440\u0430\u043c\u043a\u0438 \u043a\u0440\u043e\u043f\u0430 \u043d\u0438\u0436\u0435 \u043d\u0438\u0436\u043d\u0435\u0433\u043e \u043a\u0440\u0430\u044f \u0446\u0435\u043b\u0438)\n            //\u0438\u043b\u0438 (\u043f\u0440\u0430\u0432\u044b\u0439 \u043a\u0440\u0430\u0439 \u0440\u0430\u043c\u043a\u0438 \u043a\u0440\u043e\u043f\u0430 \u043b\u0435\u0432\u0435\u0435 \u043b\u0435\u0432\u043e\u0433\u043e \u043a\u0440\u0430\u044f \u0446\u0435\u043b\u0438)\n            //\u0438\u043b\u0438 (\u043b\u0435\u0432\u044b\u0439 \u043a\u0440\u0430\u0439 \u0440\u0430\u043c\u043a\u0438 \u043a\u0440\u043e\u043f\u0430 \u043f\u0440\u0430\u0432\u0435\u0435 \u043f\u0440\u0430\u0432\u043e\u0433\u043e \u043a\u0440\u0430\u044f \u0446\u0435\u043b\u0438)\n            if($crop_bottom <= $target_top\n                or $crop_top >= $target_bottom\n                or $crop_right <= $target_left\n                or $crop_left >= $target_right)\n            {\n                //\u041f\u0443\u0441\u0442\u0430\u044f \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0430 \u0446\u0432\u0435\u0442\u043e\u043c \u0444\u043e\u043d\u0430 \u043a\u0440\u043e\u043f\u0430\n                ImageFacade::canvas($crop_width, $crop_height, $crop_color)->save($crop_path, 100);\n            }\n            else\n            {\n                //\u041d\u0430\u0445\u043e\u0434\u0438\u043c \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0440\u0435\u0437\u0430\u0435\u043c \u0435\u0433\u043e\n\n                //\u0415\u0441\u043b\u0438 \u043a\u0440\u043e\u043f \u0432\u043d\u0443\u0442\u0440\u0438 \u0446\u0435\u043b\u0438\n                if($crop_left >= $target_left and $crop_right <= $target_right and $crop_top >= $target_top and $crop_bottom <= $target_bottom)\n                {\n                    $target->crop($crop_width, $crop_height, $crop_x, $crop_y);\n                    $target->save($crop_path, 100);\n                }\n                //\u0415\u0441\u043b\u0438 \u0446\u0435\u043b\u044c \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u0440\u043e\u043f\u0430\n                elseif($target_left >= $crop_left and $target_right <= $crop_right and $target_top >= $crop_top and $target_bottom <= $crop_bottom)\n                {\n                    ImageFacade::canvas($crop_width, $crop_height, $crop_color)->insert($target, 'top-left', abs($crop_x), abs($crop_y))->save($crop_path, 100);\n                }\n                else //\u0422\u043e\u0433\u0434\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u044f\n                {\n                    //\u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u044f \u043f\u043e X\n                    if($crop_left <= $target_left)\n                    {\n                        $target_crop_x = 0;\n                        $crop_insert_x = -$crop_left;\n                    }\n                    else\n                    {\n                        $target_crop_x = $crop_left;\n                        $crop_insert_x = 0;\n                    }\n\n                    if($crop_right >= $target_right)\n                    {\n                        $target_crop_width = $target_width;\n                    }\n                    else\n                    {\n                        $target_crop_width = $target_width - ($target_right - $crop_right);\n                    }\n\n                    $target_crop_width -= $target_crop_x;\n\n\n                    //\u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u044f \u043f\u043e Y\n                    if($crop_top <= $target_top)\n                    {\n                        $target_crop_y = 0;\n                        $crop_insert_y = -$crop_top;\n                    }\n                    else\n                    {\n                        $target_crop_y = $crop_top;\n                        $crop_insert_y = 0;\n                    }\n\n                    if($crop_bottom >= $target_bottom)\n                    {\n                        $target_crop_height = $target_height;\n                    }\n                    else\n                    {\n                        $target_crop_height = $target_height - ($target_bottom - $crop_bottom);\n                    }\n\n                    $target_crop_height -= $target_crop_y;\n\n\n                    $target->crop($target_crop_width, $target_crop_height, $target_crop_x, $target_crop_y);\n\n                    ImageFacade::canvas($crop_width, $crop_height, $crop_color)->insert($target, 'top-left', $crop_insert_x, $crop_insert_y)->save($crop_path, 100);\n                }\n            }\n        }\n\n        chmod($crop_path, 0644);\n\n        $item_attrs['link'] = $this->pathResolver->getCropPath().'/'.$crop_file_name;\n        //-----------------------------------------------------\n\n        $this->dbAgent->cropToDb($aRef, $imageSetting, $cropSetting, $item_attrs);\n    }\n```"
            ],
            [
                236,
                "php",
                "EasyCurlDataProvider.loadResponse",
                "```php\npublic function loadResponse($id)\n    {\n        if (!isset($this->connectionData[$id]))\n            throw new \\InvalidArgumentException('Tried to get response for invalid ID $id.');\n\n        if (!$this->hasUrlChanged($id))\n            return;\n\n        $connectionData = $this->connectionData[$id];\n\n        $action = $connectionData->getAction();\n        if (empty($action))\n        {\n            $this->log->error('Request type missing.');\n            $connectionData->setNullResponse();\n            return;\n        }\n\n        $httpHeaderFields = $this->prepareHttpHeaders($connectionData);\n        $parameters = $this->prepareParameters($connectionData);\n        $url = $this->prepareConnectionOptions(\n            $connectionData,\n            $httpHeaderFields,\n            $parameters\n        );\n\n        $response = $this->retrieveResponse($connectionData);\n\n        $connectionData->setResponse($response, $url);\n\n        $this->logResult($response);\n    }\n```"
            ],
            [
                71,
                "php",
                "DefaultContextFactory.createContext",
                "```php\npublic function createContext($data = null): Context\n    {\n        $context = new DefaultContext($this, $data);\n        $context->setAccessPolicy($this->defaultAccessPolicy);\n        \n        return $context;\n    }\n```"
            ],
            [
                84,
                "php",
                "SubscribeFileForm.buildForm",
                "```php\npublic function buildForm(array $form, FormStateInterface $form_state) {\n    if(empty($this->paragraph)) {\n      return $form;\n    }\n    $form['name'] = [\n      '#type' => 'textfield',\n      '#title_display' => 'invisible',\n      '#title' => $this->t('Name'),\n      '#required' => TRUE,\n      '#attributes' => ['placeholder' => $this->t('Enter your name')],\n    ];\n\n    $form['mail'] = [\n      '#type' => 'email',\n      '#title_display' => 'invisible',\n      '#title' => $this->t('E-mail'),\n      '#required' => TRUE,\n      '#attributes' => ['placeholder' => $this->t('Enter you email to get download link')],\n    ];\n\n    $file = $this->paragraph->get('field_file_download')->getValue();\n    $form['file_id'] = [\n      '#type' => 'value',\n      '#value' => $file[0]['target_id']\n    ];\n\n    $form['submit'] = [\n      '#type' => 'submit',\n      '#value' => $this->paragraph->get('field_d_p_sf_download_button')->value,\n    ];\n\n    // Keep compatibility with older Droopler.\n    // Check field existence first.\n    if ($this->paragraph->hasField('field_d_p_sf_consent')) {\n      $consents = $this->paragraph->get('field_d_p_sf_consent')->getValue();\n      foreach ($consents as $key => $consent) {\n        $form[\"consent_$key\"] = [\n          '#type' => 'checkbox',\n          '#title' => $consent['value'],\n          '#required' => TRUE,\n        ];\n      }\n    }\n\n    $form['#attributes'] = [\n      'class' => ['d-p-subscribe-file-form'],\n    ];\n\n    return $form;\n  }\n```"
            ],
            [
                84,
                "php",
                "ViserioEventsDataCollector.collect",
                "```php\npublic function collect(ServerRequestInterface $serverRequest, ResponseInterface $response): void\n    {\n        $this->data = [\n            'called_listeners'     => $this->eventManager->getCalledListeners(),\n            'not_called_listeners' => $this->eventManager->getNotCalledListeners(),\n            'orphaned_events'      => $this->eventManager->getOrphanedEvents(),\n        ];\n    }\n```"
            ],
            [
                329,
                "php",
                "ObjectUtility.valueForKeyPathOfObject",
                "```php\nstatic public function valueForKeyPathOfObject($keyPath, $object, $default = null)\n    {\n        $i = 0;\n        $keyPathParts = explode('.', $keyPath);\n        $keyPathPartsLength = count($keyPathParts);\n        $currentValue = $object;\n\n        if (!is_string($keyPath)) {\n            throw new \\LogicException(\n                'Given key path is not of type string (maybe arguments are ordered incorrect)',\n                1395484136\n            );\n        }\n\n        for ($i = 0; $i < $keyPathPartsLength; $i++) {\n            $key = $keyPathParts[$i];\n            $accessorMethod = 'get' . ucfirst($key);\n\n            switch (true) {\n                // Current value is an array\n                case is_array($currentValue) && isset($currentValue[$key]):\n                    $currentValue = $currentValue[$key];\n                    break;\n\n                // Current value is an object\n                case is_object($currentValue):\n                    if (method_exists($currentValue, $accessorMethod)) { // Getter method\n                        $currentValue = $currentValue->$accessorMethod();\n                    } else {\n                        if (method_exists($currentValue, 'get')) { // General \"get\" method\n                            $currentValue = $currentValue->get($key);\n                        } else {\n                            if (in_array($key, get_object_vars($currentValue))) { // Direct access\n                                $currentValue = $currentValue->$key;\n                            } else {\n                                $currentValue = null;\n                            }\n                        }\n                    }\n                    break;\n\n                default:\n                    $currentValue = null;\n            }\n\n            if ($currentValue === null) {\n                break;\n            }\n        }\n\n        if ($i !== $keyPathPartsLength && func_num_args() > 2) {\n            if (is_object($default) && ($default instanceof \\Closure)) {\n                $currentValue = $default();\n            } else {\n                $currentValue = $default;\n            }\n        }\n\n        return $currentValue;\n    }\n```"
            ],
            [
                690,
                "php",
                "Meta.setConnect",
                "```php\npublic function setConnect($connect = null): IMeta\n    {\n        $this->connect = self::resolveDatabase()->connect($connect);\n\n        return $this;\n    }\n```"
            ]
        ]
    },
    "Test-php MRR (bs=1,000)": 0.008843380068412695,
    "Examples-FuncNameTest-php": {
        "_type": "table",
        "columns": [
            "Rank",
            "Language",
            "Query",
            "Code"
        ],
        "data": [
            [
                66,
                "php",
                "TwigTemplating.loadPluginsFromDirectory",
                "```php\nprotected function loadPluginsFromDirectory($dirpath) {\n\t\tif (!is_dir($dirpath)) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t$contents = @scandir($dirpath);\n\t\t\n\t\tif (is_array($contents)) {\n\t\t\tforeach ($contents as $file) {\n\t\t\t\tif (substr($file,-4) == '.php') {\n\t\t\t\t\t$class = '\\\\' . substr($file,0,-4);\n\t\t\t\t\t\n\t\t\t\t\tif($class != '') {\n\t\t\t\t\t\t// is this secure enough?\n\t\t\t\t\t\t// we don't use autoloader as we don't know how taht plugins are stored\n\t\t\t\t\t\trequire_once($dirpath.'/'.$file);\n\t\t\t\t\t\t\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t$twig_object = new $class();\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tif ($twig_object instanceof \\Twig_Extension) {\n\t\t\t\t\t\t\t\t$this->addExtension($twig_object);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (\\Extension $e) {\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```"
            ],
            [
                518,
                "php",
                "ClassExtension.processTemplate",
                "```php\nprotected function processTemplate(Definition $definition, $name, array $variables = array())\n    {\n        $twig = $this->getTwig();\n\n        $variables['extension'] = $this;\n        $variables['options'] = $this->options;\n        $variables['class'] = $this->class;\n        $variables['config_class'] = $this->configClass;\n        $variables['config_classes'] = $this->configClasses;\n\n        $result = $twig->loadTemplate($name)->render($variables);\n\n        // properties\n        $expression = '/\n            (?P<docComment>\\ \\ \\ \\ \\/\\*\\*\\n[\\s\\S]*\\ \\ \\ \\ \\ \\*\\/)?\\n?\n             \\ \\ \\ \\ (?P<static>static\\ )?\n            (?P<visibility>public|protected|private)\n            \\s\n            \\$\n            (?P<name>[a-zA-Z0-9_]+)\n            ;\n        /xU';\n        preg_match_all($expression, $result, $matches);\n\n        for ($i = 0; $i <= count($matches[0]) - 1; $i++) {\n            $property = new Property($matches['visibility'][$i], $matches['name'][$i], null);\n            if ($matches['static'][$i]) {\n                $property->setStatic(true);\n            }\n            if ($matches['docComment'][$i]) {\n                $property->setDocComment($matches['docComment'][$i]);\n            }\n            $definition->addProperty($property);\n        }\n\n        // methods\n        $expression = '/\n            (?P<docComment>\\ \\ \\ \\ \\/\\*\\*\\n[\\s\\S]*\\ \\ \\ \\ \\ \\*\\/)?\\n\n            \\ \\ \\ \\ (?P<static>static\\ )?\n            (?P<visibility>public|protected|private)\n            \\s\n            function\n            \\s\n            (?P<name>[a-zA-Z0-9_]+)\n            \\((?P<arguments>[$a-zA-Z0-9_\\\\\\=\\(\\), ]*)\\)\n            \\n\n            \\ \\ \\ \\ \\{\n                (?P<code>[\\s\\S]*)\n            \\n\\ \\ \\ \\ \\}\n        /xU';\n        preg_match_all($expression, $result, $matches);\n\n        for ($i = 0; $i <= count($matches[0]) - 1; $i++) {\n            $code = trim($matches['code'][$i], \"\\n\");\n            $method = new Method($matches['visibility'][$i], $matches['name'][$i], $matches['arguments'][$i], $code);\n            if ($matches['static'][$i]) {\n                $method->setStatic(true);\n            }\n            if ($matches['docComment'][$i]) {\n                $method->setDocComment($matches['docComment'][$i]);\n            }\n            $definition->addMethod($method);\n        }\n    }\n```"
            ],
            [
                300,
                "php",
                "CategoryController.unFollowAction",
                "```php\npublic function unFollowAction($slug)\n    {\n        $this->denyAccessUnlessGranted('IS_AUTHENTICATED_REMEMBERED');\n        $category = $this->getCategoryManager()->findCategoryBySlug($slug);\n        $this->getCategoryManager()->unFollowCategory($category, $this->getUser());\n        $view = $this->view([\n            'follower_count' => $category->getFollowerCount(),\n        ]);\n\n        return $this->handleView($view);\n    }\n```"
            ],
            [
                275,
                "php",
                "Papi_Core_Container.remove",
                "```php\npublic function remove( $id ) {\n\t\t$id = $this->get_class_prefix( $id );\n\t\tunset( $this->keys[$id], $this->values[$id] );\n\t}\n```"
            ],
            [
                270,
                "php",
                "WordsmithService.chop",
                "```php\npublic function chop($s, $limit = 1, $unit = 'p', $append = null, $allowedTags = null) : string\n\t{\n\t\treturn (new Hacksaw())->chop($s, $limit, $unit, $append, $allowedTags);\n\t}\n```"
            ],
            [
                64,
                "php",
                "TimeTools.toEuropeanFormat",
                "```php\npublic static function toEuropeanFormat($date = null, $withHour = false)\r\n  {\r\n    if (is_string($date)) {\r\n      $time = strtotime($date);\r\n    } elseif (is_a($date, 'DateTime')) {\r\n      $time = $date->getTimestamp();\r\n    } else {\r\n      return null;\r\n    }\r\n    return date('d/m/Y' . ($withHour ? ' H:i:s' : ''), $time);\r\n  }\n```"
            ],
            [
                593,
                "php",
                "ChannelRepository.getChannel",
                "```php\npublic function getChannel($channelId)\n    {\n        $response = $this->getClient()->get(self::ENDPOINT.$channelId);\n        $data = $this->jsonResponse($response);\n\n        return $this->getFactory()->createEntity($data);\n    }\n```"
            ],
            [
                464,
                "php",
                "Usage.setRequirements",
                "```php\npublic function setRequirements($var)\n    {\n        $arr = GPBUtil::checkRepeatedField($var, \\Google\\Protobuf\\Internal\\GPBType::STRING);\n        $this->requirements = $arr;\n\n        return $this;\n    }\n```"
            ],
            [
                374,
                "php",
                "SignatureXmlReader.deserialize",
                "```php\npublic function deserialize(\\DOMNode $node, DeserializationContext $context)\n    {\n        $this->checkXmlNodeName($node, 'Signature', SamlConstants::NS_XMLDSIG);\n\n        $this->signature = new XMLSecurityDSig();\n        $this->signature->idKeys[] = $this->getIDName();\n        $this->signature->sigNode = $node;\n        $this->signature->canonicalizeSignedInfo();\n\n        $this->key = null;\n        $key = new XMLSecurityKey(XMLSecurityKey::RSA_SHA1, array('type' => 'public'));\n        XMLSecEnc::staticLocateKeyInfo($key, $node);\n        if ($key->name || $key->key) {\n            $this->key = $key;\n        }\n\n        $this->certificates = array();\n        $list = $context->getXpath()->query('./ds:KeyInfo/ds:X509Data/ds:X509Certificate', $node);\n        foreach ($list as $certNode) {\n            $certData = trim($certNode->textContent);\n            $certData = str_replace(array(\"\\r\", \"\\n\", \"\\t\", ' '), '', $certData);\n            $this->certificates[] = $certData;\n        }\n    }\n```"
            ],
            [
                201,
                "php",
                "Dispatcher.handle",
                "```php\npublic function handle(ServerRequestInterface $request): ResponseInterface\n    {\n        if ($this->middlewares->isEmpty()) {\n            if (null !== $this->requestHandler) {\n                return $this->requestHandler->handle($request);\n            }\n\n            return $this->response;\n        }\n\n        $middleware = $this->middlewares->dequeue();\n\n        if ('*' !== $middleware->getPath()) {\n            $uri = $request->getUri()->getPath();\n            $regex = '#^' . $middleware->getPath() . '#';\n\n            if (!preg_match($regex, $uri, $matches)) {\n                return $this->handle($request);\n            }\n        }\n\n        $middleware = $middleware->getMiddlewares();\n        $response = $middleware->process($request, $this);\n\n        if (!$response instanceof ResponseInterface) {\n            throw new \\RuntimeException('No valid response sending.');\n        }\n\n        return $response;\n    }\n```"
            ],
            [
                127,
                "php",
                "Buffer.offsetSet",
                "```php\npublic function offsetSet($index, $data)\n    {\n        $this->data = substr_replace($this->data, $data, $index, 1);\n    }\n```"
            ],
            [
                286,
                "php",
                "BaseBuilder._delete",
                "```php\nprotected function _delete(string $table): string\n\t{\n\t\treturn 'DELETE FROM ' . $table . $this->compileWhereHaving('QBWhere')\n\t\t\t\t. ($this->QBLimit ? ' LIMIT ' . $this->QBLimit : '');\n\t}\n```"
            ],
            [
                994,
                "php",
                "BudgetMonthMapper.findByBudgetId",
                "```php\npublic function findByBudgetId($budgetId, \\DateTimeImmutable $date)\n    {\n        $this->addWhere('budget_id', $budgetId);\n        $this->addWhere('budget_month_date', $date->format('Y-m-d'));\n\n        $result = $this->selectOne();\n\n        return $result;\n    }\n```"
            ],
            [
                234,
                "php",
                "PredisHandler.save",
                "```php\npublic function save(string $key, $value, int $ttl = 60)\n\t{\n\t\tswitch ($data_type = gettype($value))\n\t\t{\n\t\t\tcase 'array':\n\t\t\tcase 'object':\n\t\t\t\t$value = serialize($value);\n\t\t\t\tbreak;\n\t\t\tcase 'boolean':\n\t\t\tcase 'integer':\n\t\t\tcase 'double': // Yes, 'double' is returned and NOT 'float'\n\t\t\tcase 'string':\n\t\t\tcase 'NULL':\n\t\t\t\tbreak;\n\t\t\tcase 'resource':\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\n\t\tif (! $this->redis->hmset($key, ['__ci_type' => $data_type, '__ci_value' => $value]))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->redis->expireat($key, time() + $ttl);\n\n\t\treturn true;\n\t}\n```"
            ],
            [
                651,
                "php",
                "Migrator.getMigrationsForRollback",
                "```php\nprotected function getMigrationsForRollback(array $options)\n    {\n        $steps = Arr::get($options, 'step', 0);\n\n        if ($steps > 0) {\n            return $this->storage->getMigrations($steps);\n        } else {\n            return $this->storage->getLast();\n        }\n    }\n```"
            ],
            [
                385,
                "php",
                "QuickBooks_Driver_Sql.update",
                "```php\npublic function update($table, $object, $where = array(), $resync = true, $discov = null, $derive = true)\t// @todo Is that the correct default for $derive?\n\t{\n\t\t$sql = '';\n\t\t$set = array();\n\n\t\tif (is_object($object))\n\t\t{\n\t\t\t$object = $object->asArray();\n\t\t}\n\n\t\t$avail = $this->fields($table, true);\t\t// List of available fields\n\n\t\t// Case folding support\n\t\tif ($this->foldsToLower())\n\t\t{\n\t\t\t$object = array_change_key_case($object, CASE_LOWER);\n\t\t}\n\t\telse if ($this->foldsToUpper())\n\t\t{\n\t\t\t$object = array_change_key_case($object, CASE_UPPER);\n\t\t}\n\n\t\t// Merge by keys to make sure we don't INSERT any fields that don't exist in this schema\n\t\t$object = array_intersect_key($object, $avail);\n\n\t\t//\n\t\tforeach ($object as $field => $value)\n\t\t{\n\t\t\t// Commented out because doing this to very large integers (i.e. ItemRef/FullName is a large integer SKU) causes integer overflow\n\t\t\t/*if (strlen((int) $value) == strlen($value))\n\t\t\t{\n\t\t\t\t$set[] = $field . ' = ' . (int) $value;\n\t\t\t}\n\t\t\telse\n\t\t\t{*/\n\t\t\t//\t$set[] = $field . \" = '\" . $this->_escape($value) . \"' \";\n\t\t\t//}\n\n\t\t\tif (is_null($value))\n\t\t\t{\n\t\t\t\t$set[] = $field . \" = NULL \";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$set[] = $field . \" = '\" . $this->_escape($value) . \"' \";\n\t\t\t}\n\t\t}\n\n\t\t$wheres = array();\n\t\tforeach ($where as $part)\n\t\t{\n\t\t\tforeach ($part as $field => $value)\n\t\t\t{\n\t\t\t\t$wheres[] = $field . \" = '\" . $this->_escape($value) . \"' \";\n\t\t\t}\n\t\t}\n\n\t\t$sql = \"UPDATE \" . $this->_escape($table) . \" SET \" . implode(', ', $set);\n\n\t\tif ($resync)\n\t\t{\n\t\t\t$sql .= \", \" . QUICKBOOKS_DRIVER_SQL_FIELD_RESYNC . \" = '\" . date('Y-m-d H:i:s') . \"' \";\n\t\t}\n\n\t\t$sql .= \" WHERE \" . implode(' AND ', $wheres);\n\n\t\t//print($sql);\n\n\t\t$errnum = 0;\n\t\t$errmsg = '';\n\t\t$return = $this->_query($sql, $errnum, $errmsg);\n\n\t\tif (is_null($discov))\n\t\t{\n\t\t\t$discov = $resync;\n\t\t}\n\n\t\tif ($discov)\n\t\t{\n\t\t\t// Update the discover datetime *IF THE DISCOVER DATETIME IS NULL*\n\t\t\t//\tThis happens when an AddResponse is received, and we need to\n\t\t\t//\tupdate a record that has just been added to QuickBooks. If we\n\t\t\t//\tdon't mark it as discovered, then updates to the record will\n\t\t\t//\tnever be picked up and sent to QuickBooks\n\n\t\t\t$errnum = 0;\n\t\t\t$errmsg = '';\n\n\t\t\t$wheres[] = QUICKBOOKS_DRIVER_SQL_FIELD_DISCOVER . \" IS NULL \";\n\n\t\t\t$this->_query(\"\n\t\t\t\tUPDATE\n\t\t\t\t\t\" . $this->_escape($table) . \"\n\t\t\t\tSET\n\t\t\t\t\t\" . QUICKBOOKS_DRIVER_SQL_FIELD_DISCOVER . \" = \" . QUICKBOOKS_DRIVER_SQL_FIELD_RESYNC . \"\n\t\t\t\tWHERE\n\t\t\t\t\t\" . implode(' AND ', $wheres), $errnum, $errmsg);\n\t\t}\n\n\t\treturn $return;\n\t}\n```"
            ],
            [
                117,
                "php",
                "Zend_Config_Json._replaceConstants",
                "```php\nprotected function _replaceConstants($value)\n    {\n        foreach ($this->_getConstants() as $constant) {\n            if (strstr($value, $constant)) {\n                // handle backslashes that may represent windows path names for instance\n                $replacement = str_replace('\\\\', '\\\\\\\\', constant($constant));\n                $value = str_replace($constant, $replacement, $value);\n            }\n        }\n        return $value;\n    }\n```"
            ],
            [
                556,
                "php",
                "ItemCategory.setGroups",
                "```php\npublic function setGroups($groups)\n    {\n        // by Warringer\\Types\\Reference\n        $func = function ($value) { return new Reference($value); };\n\n        foreach ($groups as $key => $value) {\n            $this->groups[$key] = $func($value);\n        }\n    }\n```"
            ],
            [
                355,
                "php",
                "ShippingMethodController.tableAction",
                "```php\npublic function tableAction()\n    {\n        $dr = $this->getDoctrine()->getManager()->getRepository(ShippingMethod::class);\n        $shipmentMethodList = $dr->findAll();\n\n        return $this->render('DyweeOrderBundle:ShippingMethod:table.html.twig', array('shipmentMethods' => $shipmentMethodList));\n    }\n```"
            ],
            [
                735,
                "php",
                "ScopeRepository.getScopeEntityByIdentifier",
                "```php\npublic function getScopeEntityByIdentifier($identifier)\n    {\n        if (!empty($this::SCOPES[$identifier])) {\n            return $this->App->Di->get(ScopeEntity::class, ['identifier' => $identifier]);\n        }\n    }\n```"
            ],
            [
                377,
                "php",
                "Load.setPersistence",
                "```php\nprotected function setPersistence(string $name, $data, array $option = []): void\n    {\n        $this->cache->set($name, $data, $option);\n    }\n```"
            ],
            [
                268,
                "php",
                "Crypt_GPG_KeyGenerator.setKeyParams",
                "```php\npublic function setKeyParams($algorithm, $size = 0, $usage = 0)\n    {\n        $algorithm = intval($algorithm);\n\n        if ($algorithm === Crypt_GPG_SubKey::ALGORITHM_ELGAMAL_ENC) {\n            throw new Crypt_GPG_InvalidKeyParamsException(\n                'Primary key algorithm must be capable of signing. The ' .\n                'Elgamal algorithm can only encrypt.',\n                0,\n                $algorithm,\n                $size,\n                $usage\n            );\n        }\n\n        if ($size != 0) {\n            $size = intval($size);\n        }\n\n        if ($usage != 0) {\n            $usage = intval($usage);\n        }\n\n        $usageEncrypt = Crypt_GPG_SubKey::USAGE_ENCRYPT;\n\n        if ($algorithm === Crypt_GPG_SubKey::ALGORITHM_DSA\n            && ($usage & $usageEncrypt) === $usageEncrypt\n        ) {\n            throw new Crypt_GPG_InvalidKeyParamsException(\n                'The DSA algorithm is not capable of encrypting. Please ' .\n                'specify a different algorithm or do not include encryption ' .\n                'as a usage for the primary key.',\n                0,\n                $algorithm,\n                $size,\n                $usage\n            );\n        }\n\n        $this->keyAlgorithm = $algorithm;\n\n        if ($size != 0) {\n            $this->keySize = $size;\n        }\n\n        if ($usage != 0) {\n            $this->keyUsage = $usage;\n        }\n\n        return $this;\n    }\n```"
            ],
            [
                21,
                "php",
                "TokenListener.onRequest",
                "```php\npublic function onRequest(GetResponseEvent $event)\n    {\n        $request = $event->getRequest();\n\n        // Does this request require CSRF protection\n        if (true !== $request->get('filter_csrf')) {\n            return;\n        }\n\n        $postedToken = $request->get($this->tokenManager->getTokenName());\n        $actualToken = $this->tokenManager->getToken();\n\n        // Check if token is set\n        if ('POST' === $request->getMethod() && !$postedToken) {\n            throw new TokenNotFoundException();\n        }\n        // Check if token is valid\n        else if ('POST' === $request->getMethod()\n            && $postedToken !== $actualToken) {\n            throw new InvalidTokenException();\n        }\n    }\n```"
            ],
            [
                206,
                "php",
                "Features.addJs",
                "```php\npublic function addJs($handle, $src, $deps = array(), $ver = null, $in_footer = false)\n    {\n        $this->js[] = array(\n            'handle'    => $handle,\n            'src'       => $this->prepUrl($src),\n            'deps'      => $deps,\n            'ver'       => $ver,\n            'in_footer' => $in_footer\n        );\n\n        $this->addJsEnqueue($handle);\n\n        return $this;\n    }\n```"
            ],
            [
                88,
                "php",
                "MoveBuilder.addCancel",
                "```php\npublic function addCancel(MoveInterface $move)\n    {\n        foreach ($this->cancelAbilities as $cancelAbility) {\n            if ($cancelAbility->equals($move)) {\n                throw new LogicException(\n                    sprintf('Cancel ability \"%s\" already defined', $move->getName())\n                );\n            }\n        }\n\n        $this->cancelAbilities[] = $move;\n\n        return $this;\n    }\n```"
            ],
            [
                811,
                "php",
                "Google_Task_Runner.allowedRetries",
                "```php\npublic function allowedRetries($code, $errors = array())\n  {\n    if (isset($this->retryMap[$code])) {\n      return $this->retryMap[$code];\n    }\n\n    if (\n        !empty($errors) &&\n        isset($errors[0]['reason'], $this->retryMap[$errors[0]['reason']])\n    ) {\n      return $this->retryMap[$errors[0]['reason']];\n    }\n\n    return 0;\n  }\n```"
            ],
            [
                96,
                "php",
                "Papi_Property_Term.html",
                "```php\npublic function html() {\n\t\t$settings          = $this->get_settings();\n\t\t$layout            = $settings->layout;\n\t\t$labels            = $this->get_labels();\n\t\t$taxonomies        = $this->get_taxonomies();\n\t\t$render_label      = count( $taxonomies ) > 1;\n\t\t$advanced          = $render_label && $layout === 'advanced';\n\t\t$single            = $render_label && $layout !== 'advanced';\n\t\t$classes           = count( $taxonomies ) > 1 ? '' : 'papi-fullwidth';\n\t\t$value             = $this->get_value();\n\t\t$selected_term     = get_term( $value );\n\t\t$selected_term     = is_wp_error( $selected_term ) || empty( $selected_term ) ? '' : $selected_term;\n\t\t$selected_taxonomy = empty( $selected_term ) ? reset( $taxonomies ) : $selected_term->taxonomy;\n\t\t$value             = $this->get_term_value( $value );\n\t\t$selected_label    = reset( $labels );\n\n\t\tif ( $settings->select2 ) {\n\t\t\t$classes = ' papi-component-select2';\n\t\t}\n\n\t\t?>\n\n\t\t<div class=\"papi-property-term <?php echo $advanced ? 'advanced' : ''; ?>\">\n\t\t\t<?php if ( $advanced ): ?>\n\t\t\t\t<table class=\"papi-table\">\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<label for=\"<?php echo esc_attr( $this->html_id() ); ?>_taxonomy\">\n\t\t\t\t\t\t\t\t<?php echo esc_html( $settings->labels['select_taxonomy'] ); ?>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\tid=\"<?php echo esc_attr( $this->html_id() ); ?>_taxonomy\"\n\t\t\t\t\t\t\t\tclass=\"<?php echo esc_attr( $classes ); ?> papi-property-term-left\"\n\t\t\t\t\t\t\t\tdata-select-item=\"<?php echo esc_attr( $settings->labels['select_item'] ); ?>\"\n\t\t\t\t\t\t\t\tdata-term-query='<?php echo esc_attr( papi_maybe_json_encode( $settings->query ) ); ?>'\n\t\t\t\t\t\t\t\tdata-width=\"100%\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\tforeach ( $labels as $taxonomy => $label ) {\n\t\t\t\t\t\t\t\t\tpapi_render_html_tag( 'option', [\n\t\t\t\t\t\t\t\t\t\t'value'    => $taxonomy,\n\t\t\t\t\t\t\t\t\t\t'selected' => $taxonomy === $selected_taxonomy,\n\t\t\t\t\t\t\t\t\t\t$label\n\t\t\t\t\t\t\t\t\t] );\n\n\t\t\t\t\t\t\t\t\tif ( $selected ) {\n\t\t\t\t\t\t\t\t\t\t$selected_label = $label;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<label for=\"<?php echo esc_attr( $this->html_id() ); ?>_terms\">\n\t\t\t\t\t\t\t\t<?php echo esc_html( sprintf( $settings->labels['select_item'], $selected_label ) ); ?>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t<?php endif; ?>\n\n\t\t\t<?php\n\t\t\t\t$placeholder = ! is_null( $settings->placeholder ) ? $settings->placeholder : '';\n\t\t\t\t$placeholder = papi_is_empty( $placeholder ) ? '&nbsp;' : $placeholder;\n\t\t\t?>\n\n\t\t\t<select\n\t\t\t\tclass=\"<?php echo esc_attr( $classes ); ?>  papi-property-term-right\"\n\t\t\t\tid=\"<?php echo esc_attr( $this->html_id() ); ?>_terms\"\n\t\t\t\tname=\"<?php echo esc_attr( $this->html_name() ); ?>\"\n\t\t\t\tclass=\"<?php echo esc_attr( $classes ); ?>\"\n\t\t\t\tdata-allow-clear=\"<?php echo is_null( $settings->placeholder ) ? 'false' : 'true'; ?>\"\n\t\t\t\tdata-placeholder=\"<?php echo esc_attr( $placeholder ); ?>\"\n\t\t\t\tdata-width=\"100%\">\n\n\t\t\t\t<?php if ( ! is_null( $settings->placeholder ) ): ?>\n\t\t\t\t\t<option value=\"<?php echo esc_attr( $this->get_option( 'default', ' ' ) ); ?>\"><?php echo esc_html( $placeholder ); ?></option>\n\t\t\t\t<?php endif; ?>\n\n\t\t\t\t<?php foreach ( $taxonomies as $taxonomy ) : ?>\n\t\t\t\t\t<?php\n\t\t\t\t\tif ( $advanced && $taxonomy !== $selected_taxonomy ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$terms = $this->get_terms( $taxonomy );\n\t\t\t\t\tif ( empty( $terms ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t?>\n\n\t\t\t\t\t<?php if ( $single ): ?>\n\t\t\t\t\t\t<optgroup label=\"<?php echo esc_attr( $labels[$taxonomy] ); ?>\">\n\t\t\t\t\t<?php endif; ?>\n\n\t\t\t\t\t<?php\n\t\t\t\t\tforeach ( $terms as $term_id => $term_name ) {\n\t\t\t\t\t\tif ( papi_is_empty( $term_name ) ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpapi_render_html_tag( 'option', [\n\t\t\t\t\t\t\t'data-allow-clear' => $settings->allow_clear,\n\t\t\t\t\t\t\t'value'            => $this->get_term_value( $term_id ),\n\t\t\t\t\t\t\t'selected'         => $value === $this->get_term_value( $term_id ),\n\t\t\t\t\t\t\tesc_html( $term_name )\n\t\t\t\t\t\t] );\n\t\t\t\t\t}\n\t\t\t\t\t?>\n\n\t\t\t\t\t<?php if ( $single ): ?>\n\t\t\t\t\t\t</optgroup>\n\t\t\t\t\t<?php endif; ?>\n\n\t\t\t\t<?php endforeach; ?>\n\t\t\t</select>\n\n\t\t\t<?php if ( $advanced ): ?>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\t\t\t<?php endif; ?>\n\n\t\t</div>\n\t\t<?php\n\t}\n```"
            ],
            [
                4,
                "php",
                "StringHelper.truncateHtml",
                "```php\nprotected function truncateHtml($string, $count, $suffix, $encoding = false)\n    {\n        return $this->proxyWithCharset(__FUNCTION__, [$string, $count, $suffix, $encoding]);\n    }\n```"
            ],
            [
                487,
                "php",
                "Rediska_Connection_Exec.getConnection",
                "```php\npublic function getConnection()\n    {\n        if ($this->_responseIterator === null) {\n            return $this->_connection;\n        } else {\n            if ($this->_connectionClone === null) {\n                $this->_connectionClone = clone $this->_connection;\n            }\n\n            return $this->_connectionClone;\n        }\n\n        return $this->_connection;\n    }\n```"
            ],
            [
                176,
                "php",
                "Command.execute",
                "```php\npublic function execute($lazy = true)\n    {\n        $sql = $this->getSql();\n        $rawSql = $this->getRawSql();\n\n        if ($sql == '') {\n            return reject(false);\n        }\n\n        $execPromise = $this->internalExecute($rawSql, [], $lazy);\n        $needResCount = $this->needResultsCount();\n        $thenCallback = function($results = []) use ($needResCount) {\n            $result = $needResCount ? count($results) : true;\n            return $this->refreshTableSchema()->then(\n                function() use ($result) {\n                    return $result;\n                }\n            );\n        };\n        return $execPromise instanceof LazyPromiseInterface\n            ? $execPromise->thenLazy($thenCallback)\n            : $execPromise->then($thenCallback);\n    }\n```"
            ],
            [
                10,
                "php",
                "AbstractBooleanOption.setValue",
                "```php\npublic function setValue($value)\n    {\n        if (!is_bool($value) && ($value !== null)) {\n            throw new \\InvalidArgumentException(sprintf(\n                'The option \"%s\" only accepts boolean value.',\n                $this->getName()\n            ));\n        }\n\n        parent::setValue($value);\n    }\n```"
            ],
            [
                532,
                "php",
                "DataGridExtension.getGrid_",
                "```php\npublic function getGrid_(Twig_Environment $environment, $name, $grid)\n    {\n        return $this->renderBlock($environment, 'grid_' . $name, ['grid' => $grid]);\n    }\n```"
            ],
            [
                165,
                "php",
                "Parser.consumeParagraph",
                "```php\nprotected function consumeParagraph($lines, $current)\n\t{\n\t\t// consume until newline\n\t\t$content = [];\n\t\tfor ($i = $current, $count = count($lines); $i < $count; $i++) {\n\t\t\tif (ltrim($lines[$i]) !== '') {\n\t\t\t\t$content[] = $lines[$i];\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$block = [\n\t\t\t'paragraph',\n\t\t\t'content' => $this->parseInline(implode(\"\\n\", $content)),\n\t\t];\n\t\treturn [$block, --$i];\n\t}\n```"
            ],
            [
                850,
                "php",
                "CartEditField.editableItems",
                "```php\nprotected function editableItems()\n    {\n        $editables = ArrayList::create();\n        foreach ($this->items as $item) {\n            $buyable = $item->Buyable();\n            if (!$buyable) {\n                continue;\n            }\n            // If the buyable is a variation, use the belonging product instead for variation-form generation\n            if ($buyable instanceof Variation) {\n                $buyable = $buyable->Product();\n            }\n            $name = $this->name . \"[$item->ID]\";\n            $quantity = TextField::create(\n                $name . '[Quantity]',\n                'Quantity',\n                $item->Quantity\n            )\n                ->addExtraClass('numeric')\n                ->setAttribute('type', 'number')\n                ->setAttribute('min', '0');\n\n            $variationfield = false;\n            if ($buyable->hasMany('Variations')) {\n                $variations = $buyable->Variations();\n                if ($variations->exists()) {\n                    $variationfield = DropdownField::create(\n                        $name . '[ProductVariationID]',\n                        _t('SilverShop\\Model\\Variation\\Variation.SINGULARNAME', 'Variation'),\n                        $variations->map('ID', 'Title'),\n                        $item->ProductVariationID\n                    );\n                }\n            }\n            $remove = CheckboxField::create($name . '[Remove]', _t('SilverShop\\Generic.Remove', 'Remove'));\n            $editables->push(\n                $item->customise(\n                    array(\n                        'QuantityField' => $quantity,\n                        'VariationField' => $variationfield,\n                        'RemoveField' => $remove,\n                    )\n                )\n            );\n        }\n\n        if (is_callable($this->editableItemsCallback)) {\n            $callback = $this->editableItemsCallback;\n            $editables = $callback($editables);\n        }\n\n        return $editables;\n    }\n```"
            ],
            [
                75,
                "php",
                "Output.conclusion",
                "```php\npublic function conclusion($handleTable, $filterTable)\n    {\n        $enter = self::ENTER;\n        $handleNumber = count($handleTable);\n        $filterNumber = count($filterTable);\n        $handleTableString = implode($handleTable, ', ');\n        $filterTableString = implode($filterTable, ', ');\n        $tables = Yii::t('dump', 'Tables');\n        $handle = Yii::t('dump', 'Handle');\n        $filter = Yii::t('dump', 'Filter');\n\n\n        $header = <<<HEADER\n/**********************************/\n/************ Conclusion **********/\n/**********************************/\n\nHEADER;\n\n        $footer = <<<FOOTER\n        \n/************ Conclusion *********/$enter\nFOOTER;\n\n        $handle = <<<HANDLE\n/*** $handle $handleNumber $tables: */\n>>> $handleTableString$enter\nHANDLE;\n\n        $filter = <<<FILTER\n/*** $filter $filterNumber $tables: */\n>>> $filterTableString\nFILTER;\n\n\n        $this->stdout($header, 0, Console::FG_YELLOW);\n        $this->stdout($handle, Console::BOLD, Console::FG_YELLOW);\n        $this->stdout($filter, Console::BOLD, Console::FG_YELLOW);\n        $this->stdout($footer, 0, Console::FG_GREEN);\n    }\n```"
            ],
            [
                770,
                "php",
                "ResourceLoader.loadResourcesForModule",
                "```php\npublic static function loadResourcesForModule($module)\n    {\n\n        global $objPage;\n\n        $neededResources = array();\n\n        switch ($module) {\n            case 'maps':\n                // Maps 3\n                //\n                $neededResources['clipboard'] = true;\n\n\n                // check if jQuery needs to be loaded\n                $jQueryLoaded = false;\n                $scripts = $GLOBALS['TL_JAVASCRIPT'];\n                if (is_array($scripts)) {\n                    foreach ($scripts as $strScriptUrl) {\n                        if (preg_match('/assets\\/jquery\\/core\\/\\d+\\.\\d+\\.\\d+\\/jquery\\.min\\.js/i', $strScriptUrl)) {\n                            $jQueryLoaded = true;\n                            break;\n                        }\n                    }\n                }\n\n                if ($objPage->hasJQuery)\n                {\n                    $jQueryLoaded = true;\n                }\n\n                if ($GLOBALS['CON4GIS']['JQUERY-LOADED'])\n                {\n                    $jQueryLoaded = true;\n                }\n\n                $neededResources['jquery'] = !$jQueryLoaded;\n                \n                // Load magnific-popup.js for projects\n                $neededResources['magnific-popup'] = $GLOBALS['con4gis']['projects']['installed'];\n\n                //ToDo switch for pdf export\n                $neededResources['jspdf'] = false;\n\n                break;\n\n            default:\n                return false;\n        }\n\n        return self::loadResources($neededResources);\n    }\n```"
            ],
            [
                391,
                "php",
                "QSAMapper.select",
                "```php\npublic function select(SelectionUnit $selectionUnit)\n    {\n        $key = 'number_'.$selectionUnit->getNumber();\n\n        if(array_key_exists($key, $this->collections))\n        {\n            return $this->collections[$key];\n        }\n\n        //====================================================\n        $type = $selectionUnit->getType();\n        $type_name = $type->getName();\n\n        $mapCollection = $this->collectionFactory->createMapGroupCollection($type);\n\n        $qb = $this->qsQuerier->selectByUnit($selectionUnit);\n\n        $result_array = Helpers::laravel_db_result_to_array($qb->get());\n\n        $id_set = array_column($result_array, 'id');\n\n        $selectionUnit->addId($id_set);\n        $selectionUnit->complete();\n\n        $ownsMetaCollection = $type->getOwns();\n        $refsMetaCollection = $type->getRefs();\n\n        $refs_array = $this->qsQuerier->getRefValues($type_name, $id_set);\n\n        foreach($result_array as $item_result)\n        {\n            $ref = new \\Interpro\\Core\\Ref\\ARef($type, (int)$item_result['id']);\n\n            $item = $this->factory->create($ref);\n\n            //====================================================\u043f\u043e\u043b\u044f\n            foreach($ownsMetaCollection as $ownMeta)\n            {\n                $fieldType = $ownMeta->getFieldType();\n                $fieldMode = $ownMeta->getMode();\n\n                $field_name = $ownMeta->getName();\n\n                if($this->local($field_name)) //\u0432\u0441\u0435 \u043f\u043e\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f - \u0421 \u0442\u0438\u043f\u044b\n                {\n                    $newField = $this->createLocalCField($item, $ownMeta, $item_result);\n                }\n                else\n                {\n                    if($fieldMode === TypeMode::MODE_B)\n                    {\n                        $mapper = $this->mappersMediator->getBMapper($fieldType->getFamily());\n                        $map = $mapper->select($selectionUnit);//\u0421\u0435\u043b\u0435\u043a\u0442 \u043a\u044d\u0448\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0432 \u043c\u0430\u043f\u043f\u0435\u0440\u0435 \u043f\u043e\u043b\u0435\u0439, \u043e\u0431\u0440\u0430\u0449\u0430\u0435\u043c\u0441\u044f \u043a\u0430\u0436\u0434\u0438\u0439 \u0440\u0430\u0437 \u043f\u0440\u0438 \u043f\u043e\u0438\u0441\u043a\u0435 \u043f\u043e\u043b\u044f\n                        $newField = $this->createExternalBFieldByRef($item, $ownMeta, $map);\n                    }\n                    elseif($fieldMode === TypeMode::MODE_C)\n                    {\n                        $mapper = $this->mappersMediator->getCMapper($fieldType->getFamily());\n                        $map = $mapper->select($selectionUnit);//\u0421\u0435\u043b\u0435\u043a\u0442 \u043a\u044d\u0448\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0432 \u043c\u0430\u043f\u043f\u0435\u0440\u0435 \u043f\u043e\u043b\u0435\u0439, \u043e\u0431\u0440\u0430\u0449\u0430\u0435\u043c\u0441\u044f \u043a\u0430\u0436\u0434\u0438\u0439 \u0440\u0430\u0437 \u043f\u0440\u0438 \u043f\u043e\u0438\u0441\u043a\u0435 \u043f\u043e\u043b\u044f\n                        $newField = $this->createExternalCFieldByRef($item, $ownMeta, $map);\n                    }\n                    else\n                    {\n                        throw new QSException('\u0412 \u0442\u0438\u043f\u0435 '.$type_name.' \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u043e \u043f\u043e\u043b\u0435-\u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0442\u0438\u043f\u0430 \u043e\u0442\u043b\u0438\u0447\u043d\u043e\u0433\u043e \u043e\u0442 \u0412 \u0438\u043b\u0438 \u0421: '.$field_name.'('.$fieldMode.')!');\n                    }\n                }\n\n                $item->setOwn($newField);\n                $item->setField($newField);\n            }\n\n            //====================================================\u0441\u0441\u044b\u043b\u043a\u0438\n            foreach($refsMetaCollection as $refMeta)\n            {\n                $newField = $this->createRefField($item, $refMeta, $refs_array);\n\n                $item->setRef($newField);\n                $item->setField($newField);\n            }\n\n            $mapCollection->addItem($item);\n        }\n\n        $this->collections[$key] = $mapCollection;\n\n        return $mapCollection;\n    }\n```"
            ],
            [
                822,
                "php",
                "Manager.connectServer",
                "```php\nprotected function connectServer(PredisProxy $redis, $server)\n    {\n        try {\n            $redis->callRedisConstructor(array(\n                'host' => $server['ip'],\n                'port' => (int) $server['port'],\n                'timeout' => $this->getTimeout(),\n                'read_write_timeout' => $this->getReadWriteTimeout()\n                ));\n                // check if we are connected\n            $redis->connect();\n\n            return true;\n        } catch (Predis\\Connection\\ConnectionException $e) {\n            return false;\n        }\n\n    }\n```"
            ],
            [
                204,
                "php",
                "Logger.logQuery",
                "```php\npublic function logQuery($query, $time, array $explain, array $warnings)\n    {\n        $log = sprintf('time:%s query: %s', $time, $query);\n        error_log($log);\n        $this->explain = $explain;\n        $this->warnings = $warnings;\n        if ($warnings) {\n            error_log('warnings:' . (string) json_encode($warnings, JSON_PRETTY_PRINT));\n            error_log('explain :' . (string) json_encode($explain, JSON_PRETTY_PRINT));\n        }\n    }\n```"
            ],
            [
                419,
                "php",
                "UserController.getUserFollowersAction",
                "```php\npublic function getUserFollowersAction($username, Request $request)\n    {\n        $manager = $this->getUserManager();\n        $user = $manager->findUserByName($username);\n        $followers = $manager->findUserFollowers($user, $request->query->getInt('page', 1));\n\n        $view = $this->view([\n                'user' => $user,\n                'followers' => $followers,\n            ])->setTemplate($this->configuration->getTemplate('User:user_followers.html.twig'));\n\n        return $this->handleView($view);\n    }\n```"
            ],
            [
                192,
                "php",
                "Papi_Query.get_query_args",
                "```php\npublic function get_query_args() {\n\t\t$args = $this->args;\n\n\t\tif ( empty( $args['meta_query'] ) ) {\n\t\t\t// Add new meta key/value if `meta_key` or `meta_value` is empty.\n\t\t\tif ( empty( $args['meta_key'] ) || empty( $args['meta_value'] ) ) {\n\t\t\t\t$args['meta_key']   = papi_get_page_type_key();\n\t\t\t\t$args['meta_value'] = $args['entry_type'];\n\t\t\t} else if ( papi_entry_type_exists( $args['entry_type'] ) ) {\n\t\t\t\t$item = [\n\t\t\t\t\t'key'   => $args['meta_key'],\n\t\t\t\t\t'value' => $args['meta_value']\n\t\t\t\t];\n\n\t\t\t\t// Add `meta_compare` if set.\n\t\t\t\tif ( isset( $args['meta_compare'] ) ) {\n\t\t\t\t\t$item['compare'] = $args['meta_compare'];\n\n\t\t\t\t\tunset( $args['meta_compare'] );\n\t\t\t\t}\n\n\t\t\t\t// Add new meta query item.\n\t\t\t\t$args['meta_query'][] = $item;\n\n\t\t\t\t// Add Papi entry/page type meta query.\n\t\t\t\t$args['meta_query'][] = [\n\t\t\t\t\t'key'   => papi_get_page_type_key(),\n\t\t\t\t\t'value' => $args['entry_type']\n\t\t\t\t];\n\n\t\t\t\t// Add meta query relation when two query items.\n\t\t\t\tif ( isset( $args['relation'] ) ) {\n\t\t\t\t\t$args['meta_query']['relation'] = $args['relation'];\n\t\t\t\t} else {\n\t\t\t\t\t$args['meta_query']['relation'] = 'AND';\n\t\t\t\t}\n\n\t\t\t\tunset( $args['meta_key'] );\n\t\t\t\tunset( $args['meta_value'] );\n\t\t\t}\n\t\t} else if ( papi_entry_type_exists( $args['entry_type'] ) ) {\n\t\t\t// Add Papi entry/page type meta query.\n\t\t\t$args['meta_query'][] = [\n\t\t\t\t'key'   => papi_get_page_type_key(),\n\t\t\t\t'value' => $args['entry_type']\n\t\t\t];\n\n\t\t\t// Add meta query relation if not set.\n\t\t\tif ( ! isset( $args['meta_query']['relation'] ) ) {\n\t\t\t\t$args['meta_query']['relation'] = 'AND';\n\t\t\t}\n\t\t}\n\n\t\t// Since the real query classes don't support\n\t\t// custom arguments the should be deleted.\n\t\tforeach ( array_keys( $this->default_args ) as $key ) {\n\t\t\tif ( isset( $args[$key] ) ) {\n\t\t\t\tunset( $args[$key] );\n\t\t\t}\n\t\t}\n\n\t\treturn $args;\n\t}\n```"
            ],
            [
                154,
                "php",
                "User.login",
                "```php\npublic function login(Auth $auth, $duration = 0 /*, Response $response = NULL, $duration = 0*/)\n    {\n        $user_groups = serialize($auth->getUserGroups());\n        $user_id     = $auth->getUserId();\n        $user_name   = $auth->getUserName();\n\n        $this->session->migrate(false, $duration);\n\n        $this->session->set(self::USER_ID, $user_id);\n        $this->session->set(self::USER_NAME, $user_name);\n        $this->session->set(self::USER_GROUPS, $user_groups);\n    }\n```"
            ],
            [
                454,
                "php",
                "Magniloquent.mergeRules",
                "```php\nprotected function mergeRules()\n    {\n        $rules = static::$rules;\n        $output = array();\n\n        if ($this->exists)\n            $merged = array_merge_recursive($rules['save'], $rules['update']);\n        else\n            $merged = array_merge_recursive($rules['save'], $rules['create']);\n\n        foreach ($merged as $field => $rules)\n        {\n            if (is_array($rules))\n                $output[$field] = implode(\"|\", $rules);\n            else\n                $output[$field] = $rules;\n        }\n\n        $this->mergedRules = $output;\n    }\n```"
            ],
            [
                628,
                "php",
                "Operation.makeCrop",
                "```php\nprotected function makeCrop(ARef $aRef, ImageSettingInterface $imageSetting, CropSettingInterface $cropSetting, array $item_attrs = [])\n    {\n        $manual = false;\n\n        if(array_key_exists('manual', $item_attrs))\n        {\n            $manual = (bool) $item_attrs['manual'];\n        }\n\n        $resizes_dir = $this->pathResolver->getResizeDir();\n\n        if (!is_readable($resizes_dir))\n        {\n            throw new OperationException('\u0414\u0438\u0440\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u0440\u0435\u0441\u0430\u0439\u0437\u043e\u0432 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f!');\n        }\n\n        $crops_dir = $this->pathResolver->getCropDir();\n\n        if (!is_writable($crops_dir))\n        {\n            throw new OperationException('\u0414\u0438\u0440\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u043a\u0440\u043e\u043f\u043e\u0432 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438!');\n        }\n\n        $crop_x = 0;\n        $crop_y = 0;\n\n        if(array_key_exists('x', $item_attrs))\n        {\n            $crop_x = $item_attrs['x'];\n        }\n\n        if(array_key_exists('y', $item_attrs))\n        {\n            $crop_y = $item_attrs['y'];\n        }\n\n        //\u0418\u0449\u0435\u043c \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0440\u0435\u0441\u0430\u0439\u0437\n        $targetResizeSetting = $cropSetting->getTarget();\n        $target_prefix = $this->getImagePrefix($imageSetting->getEntityName(), $aRef->getId(), $imageSetting->getName(), GenVariant::RESIZE, $targetResizeSetting->getName());\n        $target_path = $resizes_dir.'/'.$target_prefix;\n\n        $target_file_name = false;\n\n        foreach (glob($target_path.'.*') as $file)\n        {\n            if(is_dir($file))\n            {\n                continue;\n            }\n\n            $target_mime = File::mimeType($file);\n\n            if($this->isVectorImage($target_mime))\n            {\n                throw new OperationException('\u041f\u043e\u043f\u044b\u0442\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u0440\u043e\u043f \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 '.$file.'!');\n            }\n\n            $target_file_name = $file;\n\n            break;\n        }\n\n        if(!$target_file_name)\n        {\n            throw new OperationException('\u041d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d \u0444\u0430\u0439\u043b \u0446\u0435\u043b\u0438 \u0434\u043b\u044f \u043a\u0440\u043e\u043f\u0430 \u043f\u043e \u043f\u0443\u0442\u0438 '.$target_path.'!');\n        }\n\n        $target_extension = File::extension($target_file_name);\n\n        //\u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0443\u0442\u0438 \u043a \u0444\u0430\u0439\u043b\u0443 \u043a\u0440\u043e\u043f\u0430\n        $crop_prefix = $this->getImagePrefix($imageSetting->getEntityName(), $aRef->getId(), $imageSetting->getName(), GenVariant::CROP, $cropSetting->getName());\n        $crop_file_name = $crop_prefix.'.'.$target_extension;\n        $crop_path = $crops_dir.'/'.$crop_file_name;\n\n        //\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u0440\u043e\u043f\u0430 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438\n        $crop_width = $cropSetting->getWidth();\n        $crop_height = $cropSetting->getHeight();\n        $crop_color = $cropSetting->getColor();\n\n        $target = ImageFacade::make($target_file_name);\n\n        //\u0420\u0430\u0437\u043c\u0435\u0440\u044b \u0446\u0435\u043b\u0438\n        $target_width = $target->getWidth();\n        $target_height = $target->getHeight();\n\n        //\u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u21161, \u0435\u0441\u043b\u0438 \u043a\u0440\u043e\u043f \u0431\u043e\u043b\u044c\u0448\u0435 \u0446\u0435\u043b\u0438 \u0438 \u043d\u0435 \u0441\u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\n        if($target_width < $crop_width and $target_height < $crop_height and $crop_x === 0 and $crop_y === 0 and !$manual)\n        {\n            ImageFacade::canvas($crop_width, $crop_height, $crop_color)->insert($target, 'center')->save($crop_path, 100);\n        }\n        else //\u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u21162, \u0435\u0441\u043b\u0438 \u043a\u0440\u043e\u043f \u0441\u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d \u0438\u043b\u0438 \u043c\u0435\u043d\u044c\u0448\u0435 \u0446\u0435\u043b\u0438\n        {\n            $crop_left = $crop_x;\n            $target_left = 0;\n\n            $crop_right = $crop_x + $crop_width;\n            $target_right = $target_width;\n\n            $crop_top = $crop_y;\n            $target_top = 0;\n\n            $crop_bottom = $crop_y + $crop_height;\n            $target_bottom = $target_height;\n\n            //\u0415\u0441\u043b\u0438 \u043d\u0435 \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u044e\u0442\u0441\u044f:\n            //(\u041d\u0438\u0436\u043d\u0438\u0439 \u043a\u0440\u0430\u0439 \u0440\u0430\u043c\u043a\u0438 \u043a\u0440\u043e\u043f\u0430 \u0432\u044b\u0448\u0435 \u0432\u0435\u0440\u0445\u043d\u0435\u0433\u043e \u043a\u0440\u0430\u044f \u0446\u0435\u043b\u0438)\n            //\u0438\u043b\u0438 (\u0432\u0435\u0440\u0445\u043d\u0438\u0439 \u043a\u0440\u0430\u0439 \u0440\u0430\u043c\u043a\u0438 \u043a\u0440\u043e\u043f\u0430 \u043d\u0438\u0436\u0435 \u043d\u0438\u0436\u043d\u0435\u0433\u043e \u043a\u0440\u0430\u044f \u0446\u0435\u043b\u0438)\n            //\u0438\u043b\u0438 (\u043f\u0440\u0430\u0432\u044b\u0439 \u043a\u0440\u0430\u0439 \u0440\u0430\u043c\u043a\u0438 \u043a\u0440\u043e\u043f\u0430 \u043b\u0435\u0432\u0435\u0435 \u043b\u0435\u0432\u043e\u0433\u043e \u043a\u0440\u0430\u044f \u0446\u0435\u043b\u0438)\n            //\u0438\u043b\u0438 (\u043b\u0435\u0432\u044b\u0439 \u043a\u0440\u0430\u0439 \u0440\u0430\u043c\u043a\u0438 \u043a\u0440\u043e\u043f\u0430 \u043f\u0440\u0430\u0432\u0435\u0435 \u043f\u0440\u0430\u0432\u043e\u0433\u043e \u043a\u0440\u0430\u044f \u0446\u0435\u043b\u0438)\n            if($crop_bottom <= $target_top\n                or $crop_top >= $target_bottom\n                or $crop_right <= $target_left\n                or $crop_left >= $target_right)\n            {\n                //\u041f\u0443\u0441\u0442\u0430\u044f \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0430 \u0446\u0432\u0435\u0442\u043e\u043c \u0444\u043e\u043d\u0430 \u043a\u0440\u043e\u043f\u0430\n                ImageFacade::canvas($crop_width, $crop_height, $crop_color)->save($crop_path, 100);\n            }\n            else\n            {\n                //\u041d\u0430\u0445\u043e\u0434\u0438\u043c \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0440\u0435\u0437\u0430\u0435\u043c \u0435\u0433\u043e\n\n                //\u0415\u0441\u043b\u0438 \u043a\u0440\u043e\u043f \u0432\u043d\u0443\u0442\u0440\u0438 \u0446\u0435\u043b\u0438\n                if($crop_left >= $target_left and $crop_right <= $target_right and $crop_top >= $target_top and $crop_bottom <= $target_bottom)\n                {\n                    $target->crop($crop_width, $crop_height, $crop_x, $crop_y);\n                    $target->save($crop_path, 100);\n                }\n                //\u0415\u0441\u043b\u0438 \u0446\u0435\u043b\u044c \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u0440\u043e\u043f\u0430\n                elseif($target_left >= $crop_left and $target_right <= $crop_right and $target_top >= $crop_top and $target_bottom <= $crop_bottom)\n                {\n                    ImageFacade::canvas($crop_width, $crop_height, $crop_color)->insert($target, 'top-left', abs($crop_x), abs($crop_y))->save($crop_path, 100);\n                }\n                else //\u0422\u043e\u0433\u0434\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u044f\n                {\n                    //\u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u044f \u043f\u043e X\n                    if($crop_left <= $target_left)\n                    {\n                        $target_crop_x = 0;\n                        $crop_insert_x = -$crop_left;\n                    }\n                    else\n                    {\n                        $target_crop_x = $crop_left;\n                        $crop_insert_x = 0;\n                    }\n\n                    if($crop_right >= $target_right)\n                    {\n                        $target_crop_width = $target_width;\n                    }\n                    else\n                    {\n                        $target_crop_width = $target_width - ($target_right - $crop_right);\n                    }\n\n                    $target_crop_width -= $target_crop_x;\n\n\n                    //\u041a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u044f \u043f\u043e Y\n                    if($crop_top <= $target_top)\n                    {\n                        $target_crop_y = 0;\n                        $crop_insert_y = -$crop_top;\n                    }\n                    else\n                    {\n                        $target_crop_y = $crop_top;\n                        $crop_insert_y = 0;\n                    }\n\n                    if($crop_bottom >= $target_bottom)\n                    {\n                        $target_crop_height = $target_height;\n                    }\n                    else\n                    {\n                        $target_crop_height = $target_height - ($target_bottom - $crop_bottom);\n                    }\n\n                    $target_crop_height -= $target_crop_y;\n\n\n                    $target->crop($target_crop_width, $target_crop_height, $target_crop_x, $target_crop_y);\n\n                    ImageFacade::canvas($crop_width, $crop_height, $crop_color)->insert($target, 'top-left', $crop_insert_x, $crop_insert_y)->save($crop_path, 100);\n                }\n            }\n        }\n\n        chmod($crop_path, 0644);\n\n        $item_attrs['link'] = $this->pathResolver->getCropPath().'/'.$crop_file_name;\n        //-----------------------------------------------------\n\n        $this->dbAgent->cropToDb($aRef, $imageSetting, $cropSetting, $item_attrs);\n    }\n```"
            ],
            [
                178,
                "php",
                "EasyCurlDataProvider.loadResponse",
                "```php\npublic function loadResponse($id)\n    {\n        if (!isset($this->connectionData[$id]))\n            throw new \\InvalidArgumentException('Tried to get response for invalid ID $id.');\n\n        if (!$this->hasUrlChanged($id))\n            return;\n\n        $connectionData = $this->connectionData[$id];\n\n        $action = $connectionData->getAction();\n        if (empty($action))\n        {\n            $this->log->error('Request type missing.');\n            $connectionData->setNullResponse();\n            return;\n        }\n\n        $httpHeaderFields = $this->prepareHttpHeaders($connectionData);\n        $parameters = $this->prepareParameters($connectionData);\n        $url = $this->prepareConnectionOptions(\n            $connectionData,\n            $httpHeaderFields,\n            $parameters\n        );\n\n        $response = $this->retrieveResponse($connectionData);\n\n        $connectionData->setResponse($response, $url);\n\n        $this->logResult($response);\n    }\n```"
            ],
            [
                481,
                "php",
                "DefaultContextFactory.createContext",
                "```php\npublic function createContext($data = null): Context\n    {\n        $context = new DefaultContext($this, $data);\n        $context->setAccessPolicy($this->defaultAccessPolicy);\n        \n        return $context;\n    }\n```"
            ],
            [
                94,
                "php",
                "SubscribeFileForm.buildForm",
                "```php\npublic function buildForm(array $form, FormStateInterface $form_state) {\n    if(empty($this->paragraph)) {\n      return $form;\n    }\n    $form['name'] = [\n      '#type' => 'textfield',\n      '#title_display' => 'invisible',\n      '#title' => $this->t('Name'),\n      '#required' => TRUE,\n      '#attributes' => ['placeholder' => $this->t('Enter your name')],\n    ];\n\n    $form['mail'] = [\n      '#type' => 'email',\n      '#title_display' => 'invisible',\n      '#title' => $this->t('E-mail'),\n      '#required' => TRUE,\n      '#attributes' => ['placeholder' => $this->t('Enter you email to get download link')],\n    ];\n\n    $file = $this->paragraph->get('field_file_download')->getValue();\n    $form['file_id'] = [\n      '#type' => 'value',\n      '#value' => $file[0]['target_id']\n    ];\n\n    $form['submit'] = [\n      '#type' => 'submit',\n      '#value' => $this->paragraph->get('field_d_p_sf_download_button')->value,\n    ];\n\n    // Keep compatibility with older Droopler.\n    // Check field existence first.\n    if ($this->paragraph->hasField('field_d_p_sf_consent')) {\n      $consents = $this->paragraph->get('field_d_p_sf_consent')->getValue();\n      foreach ($consents as $key => $consent) {\n        $form[\"consent_$key\"] = [\n          '#type' => 'checkbox',\n          '#title' => $consent['value'],\n          '#required' => TRUE,\n        ];\n      }\n    }\n\n    $form['#attributes'] = [\n      'class' => ['d-p-subscribe-file-form'],\n    ];\n\n    return $form;\n  }\n```"
            ],
            [
                46,
                "php",
                "ViserioEventsDataCollector.collect",
                "```php\npublic function collect(ServerRequestInterface $serverRequest, ResponseInterface $response): void\n    {\n        $this->data = [\n            'called_listeners'     => $this->eventManager->getCalledListeners(),\n            'not_called_listeners' => $this->eventManager->getNotCalledListeners(),\n            'orphaned_events'      => $this->eventManager->getOrphanedEvents(),\n        ];\n    }\n```"
            ],
            [
                57,
                "php",
                "ObjectUtility.valueForKeyPathOfObject",
                "```php\nstatic public function valueForKeyPathOfObject($keyPath, $object, $default = null)\n    {\n        $i = 0;\n        $keyPathParts = explode('.', $keyPath);\n        $keyPathPartsLength = count($keyPathParts);\n        $currentValue = $object;\n\n        if (!is_string($keyPath)) {\n            throw new \\LogicException(\n                'Given key path is not of type string (maybe arguments are ordered incorrect)',\n                1395484136\n            );\n        }\n\n        for ($i = 0; $i < $keyPathPartsLength; $i++) {\n            $key = $keyPathParts[$i];\n            $accessorMethod = 'get' . ucfirst($key);\n\n            switch (true) {\n                // Current value is an array\n                case is_array($currentValue) && isset($currentValue[$key]):\n                    $currentValue = $currentValue[$key];\n                    break;\n\n                // Current value is an object\n                case is_object($currentValue):\n                    if (method_exists($currentValue, $accessorMethod)) { // Getter method\n                        $currentValue = $currentValue->$accessorMethod();\n                    } else {\n                        if (method_exists($currentValue, 'get')) { // General \"get\" method\n                            $currentValue = $currentValue->get($key);\n                        } else {\n                            if (in_array($key, get_object_vars($currentValue))) { // Direct access\n                                $currentValue = $currentValue->$key;\n                            } else {\n                                $currentValue = null;\n                            }\n                        }\n                    }\n                    break;\n\n                default:\n                    $currentValue = null;\n            }\n\n            if ($currentValue === null) {\n                break;\n            }\n        }\n\n        if ($i !== $keyPathPartsLength && func_num_args() > 2) {\n            if (is_object($default) && ($default instanceof \\Closure)) {\n                $currentValue = $default();\n            } else {\n                $currentValue = $default;\n            }\n        }\n\n        return $currentValue;\n    }\n```"
            ],
            [
                583,
                "php",
                "Meta.setConnect",
                "```php\npublic function setConnect($connect = null): IMeta\n    {\n        $this->connect = self::resolveDatabase()->connect($connect);\n\n        return $this;\n    }\n```"
            ]
        ]
    },
    "FuncNameTest-php MRR (bs=1,000)": 0.031859829152033524,
    "Examples-Validation-php": {
        "_type": "table",
        "columns": [
            "Rank",
            "Language",
            "Query",
            "Code"
        ],
        "data": [
            [
                484,
                "php",
                "EasyJWTLoaderSource.isEncryptionSupportEnabled",
                "```php\nprivate function isEncryptionSupportEnabled(array $section)\n    {\n        if (true === empty($section['key_encryption_algorithms']) && true === empty($section['content_encryption_algorithms'])) {\n            return false;\n        }\n\n        if (true === empty($section['key_encryption_algorithms']) || true === empty($section['content_encryption_algorithms'])) {\n            throw new \\LogicException('Both key encryption algorithms and content encryption algorithms must be set to enable the encryption support.');\n        }\n\n        return true;\n    }\n```"
            ],
            [
                597,
                "php",
                "Client.fopCreateFormOfPayment",
                "```php\npublic function fopCreateFormOfPayment(RequestOptions\\FopCreateFopOptions $options, $messageOptions = [])\n    {\n        $msgName = 'FOP_CreateFormOfPayment';\n\n        return $this->callMessage($msgName, $options, $messageOptions);\n    }\n```"
            ],
            [
                670,
                "php",
                "FormatTrait.format_j",
                "```php\nprivate function format_j(&$str) {\n    if (strstr($str, '%j'))\n      $str = str_replace('%j', sprintf('%01d', $this->day), $str);\n  }\n```"
            ],
            [
                144,
                "php",
                "CmfAuthModule.configureAuthorizationGatesAndPolicies",
                "```php\npublic function configureAuthorizationGatesAndPolicies() {\n        app()->singleton($this->authPolicyName, $this->getAccessPolicyClassName());\n        \\Gate::resource('resource', $this->authPolicyName, [\n            'view' => 'view',\n            'details' => 'details',\n            'create' => 'create',\n            'update' => 'update',\n            'edit' => 'edit',\n            'delete' => 'delete',\n            'update_bulk' => 'update_bulk',\n            'delete_bulk' => 'delete_bulk',\n            'other' => 'others',\n            'others' => 'others',\n            'custom_page' => 'custom_page',\n            'custom_action' => 'custom_action',\n            'custom_page_for_item' => 'custom_page_for_item',\n            'custom_action_for_item' => 'custom_action_for_item',\n        ]);\n        \\Gate::define('cmf_page', $this->authPolicyName . '@cmf_page');\n    }\n```"
            ],
            [
                317,
                "php",
                "Client.postRequest",
                "```php\npublic function postRequest($path, $options, $addApiKey)\n    {\n        if (isset($options['source']) && is_array($options['source'])) {\n            $sources = $options['source'];\n            unset($options['source']);\n            foreach ($sources as $i => $source) {\n                $options[\"source[$i]\"] = $source;\n            }\n        }\n\n        $response = $this->makeRequest('POST', $path, $options, $addApiKey);\n        return $this->parseResponse($response);\n    }\n```"
            ],
            [
                124,
                "php",
                "All.execute",
                "```php\npublic function execute()\n    {\n        // Flush all Magento caches\n        $types = $this->cacheManager->getAvailableTypes();\n        $types = array_diff($types, ['full_page']); // FPC is Handled separately\n\n        $this->cacheManager->clean($types);\n\n        // Purge everything from Fastly\n        $result = $this->api->cleanAll();\n\n        if ($result === true) {\n            $this->messageManager->addSuccessMessage(\n                __('Full Magento & Fastly Cache has been cleaned.')\n            );\n        } else {\n            $this->getMessageManager()->addErrorMessage(\n                __('Full Magento & Fastly Cache was not cleaned successfully.')\n            );\n        }\n\n        return $this->_redirect('*/cache/index');\n    }\n```"
            ],
            [
                638,
                "php",
                "Router.cleanResources",
                "```php\nprivate static function cleanResources()\n    {\n        self::$callbacks = [];\n        self::$methods = [];\n        self::$halts = false;\n        self::$response = false;\n    }\n```"
            ],
            [
                218,
                "php",
                "Environment.scriptFilename",
                "```php\nprotected static function scriptFilename()\n\t{\n\t\treturn str_replace('//', '/', strtr((static::$strSapi == 'cgi' || static::$strSapi == 'isapi' || static::$strSapi == 'cgi-fcgi' || static::$strSapi == 'fpm-fcgi') && (@$_SERVER['ORIG_PATH_TRANSLATED'] ?: $_SERVER['PATH_TRANSLATED']) ? (@$_SERVER['ORIG_PATH_TRANSLATED'] ?: $_SERVER['PATH_TRANSLATED']) : (@$_SERVER['ORIG_SCRIPT_FILENAME'] ?: $_SERVER['SCRIPT_FILENAME']), '\\\\', '/'));\n\t}\n```"
            ],
            [
                291,
                "php",
                "clsOpenTBS.MsWord_GetHeaderFooterFile",
                "```php\nfunction MsWord_GetHeaderFooterFile($TbsCmd, $TbsType, $Offset = 0) {\n\n\t\t$this->MsWord_InitHeaderFooter();\n\n\t\t$Place = 'header';\n\t\tif ($TbsCmd==OPENTBS_SELECT_FOOTER) {\n\t\t\t$Place = 'footer';\n\t\t}\n\n\t\t$Type = 'default';\n\t\tif ($TbsType==OPENTBS_FIRST) {\n\t\t\t$Type = 'first';\n\t\t} elseif ($TbsType==OPENTBS_EVEN) {\n\t\t\t$Type = 'even';\n\t\t}\n\n\t\t$nb = 0;\n\t\tforeach($this->MsWord_HeaderFooter as $info) {\n\t\t\tif ( ($info['type']==$Type) && ($info['place']==$Place) ) {\n\t\t\t\tif ($nb==$Offset) {\n\t\t\t\t\treturn $info['file'];\n\t\t\t\t} else {\n\t\t\t\t\t$nb++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t\t\n\t}\n```"
            ],
            [
                117,
                "php",
                "File.sendToBrowser",
                "```php\npublic function sendToBrowser($filename='', $inline=false)\n\t{\n\t\t$response = new BinaryFileResponse($this->strRootDir . '/' . $this->strFile);\n\n\t\t$response->setContentDisposition\n\t\t(\n\t\t\t$inline ? ResponseHeaderBag::DISPOSITION_INLINE : ResponseHeaderBag::DISPOSITION_ATTACHMENT,\n\t\t\t$filename,\n\t\t\tUtf8::toAscii($this->basename)\n\t\t);\n\n\t\t$response->headers->addCacheControlDirective('must-revalidate');\n\t\t$response->headers->addCacheControlDirective('post-check', 0);\n\t\t$response->headers->addCacheControlDirective('pre-check', 0);\n\t\t$response->headers->set('Connection', 'close');\n\n\t\tthrow new ResponseException($response);\n\t}\n```"
            ],
            [
                129,
                "php",
                "PDO.runQuery",
                "```php\npublic function runQuery(\\Peyote\\Query $query)\n\t{\n\t\treturn $this->run($query->compile(), $query->getParams());\n\t}\n```"
            ],
            [
                797,
                "php",
                "Bootstrap.getContainerRoute",
                "```php\nprivate function getContainerRoute(array $routes, $name)\n    {\n        foreach ($routes as $route => $names) {\n            if (in_array($name, $names, false)) {\n                return $route;\n            }\n        }\n        throw new Exception(\"Unknown configuration class name '{$name}'\");\n    }\n```"
            ],
            [
                711,
                "php",
                "Processpool.exec",
                "```php\npublic function exec(string $execfile, array $args): bool\n    {\n        return $this->process->exec($execfile, $args);\n    }\n```"
            ],
            [
                454,
                "php",
                "Parameters.handleArrays",
                "```php\nprivate function handleArrays(Parameters $params, array $permitted = array())\n    {\n        foreach ($permitted as $key => $allowed) {\n            if (is_array($allowed) && $params->hasKey($key)) {\n                $value = $params[$key];\n\n                if ($value instanceof Parameters) {\n                    $this->filter($value, $allowed);\n                } else {\n                    $this->handleUnpermittedParam($key, $params);\n                }\n            }\n        }\n    }\n```"
            ],
            [
                93,
                "php",
                "NativeFunctionCasingFixer.applyFix",
                "```php\nprotected function applyFix(\\SplFileInfo $file, Tokens $tokens)\n    {\n        static $nativeFunctionNames = null;\n\n        if (null === $nativeFunctionNames) {\n            $nativeFunctionNames = $this->getNativeFunctionNames();\n        }\n\n        for ($index = 0, $count = $tokens->count(); $index < $count; ++$index) {\n            // test if we are at a function all\n            if (!$tokens[$index]->isGivenKind(T_STRING)) {\n                continue;\n            }\n\n            $next = $tokens->getNextMeaningfulToken($index);\n            if (!$tokens[$next]->equals('(')) {\n                $index = $next;\n\n                continue;\n            }\n\n            $functionNamePrefix = $tokens->getPrevMeaningfulToken($index);\n            if ($tokens[$functionNamePrefix]->isGivenKind([T_DOUBLE_COLON, T_NEW, T_OBJECT_OPERATOR, T_FUNCTION, CT::T_RETURN_REF])) {\n                continue;\n            }\n\n            if ($tokens[$functionNamePrefix]->isGivenKind(T_NS_SEPARATOR)) {\n                // skip if the call is to a constructor or to a function in a namespace other than the default\n                $prev = $tokens->getPrevMeaningfulToken($functionNamePrefix);\n                if ($tokens[$prev]->isGivenKind([T_STRING, T_NEW])) {\n                    continue;\n                }\n            }\n\n            // test if the function call is to a native PHP function\n            $lower = strtolower($tokens[$index]->getContent());\n            if (!\\array_key_exists($lower, $nativeFunctionNames)) {\n                continue;\n            }\n\n            $tokens[$index] = new Token([T_STRING, $nativeFunctionNames[$lower]]);\n            $index = $next;\n        }\n    }\n```"
            ],
            [
                111,
                "php",
                "FrontendTemplate.setCacheHeaders",
                "```php\nprivate function setCacheHeaders(Response $response)\n\t{\n\t\t/** @var PageModel $objPage */\n\t\tglobal $objPage;\n\n\t\tif (($objPage->cache === false || $objPage->cache < 1) && ($objPage->clientCache === false || $objPage->clientCache < 1))\n\t\t{\n\t\t\t$response->headers->addCacheControlDirective('no-cache');\n\t\t\t$response->headers->addCacheControlDirective('no-store');\n\n\t\t\treturn $response->setPrivate();\n\t\t}\n\n\t\t// Do not cache the response if a user is logged in or the page is protected\n\t\t// TODO: Add support for proxies so they can vary on member context\n\t\tif (FE_USER_LOGGED_IN === true || BE_USER_LOGGED_IN === true || $objPage->protected || $this->hasAuthenticatedBackendUser())\n\t\t{\n\t\t\t$response->headers->addCacheControlDirective('no-cache');\n\t\t\t$response->headers->addCacheControlDirective('no-store');\n\n\t\t\treturn $response->setPrivate();\n\t\t}\n\n\t\tif ($objPage->clientCache > 0)\n\t\t{\n\t\t\t$response->setMaxAge($objPage->clientCache);\n\t\t}\n\n\t\tif ($objPage->cache > 0)\n\t\t{\n\t\t\t$response->setSharedMaxAge($objPage->cache);\n\t\t}\n\n\t\t// Tag the response\n\t\tif (System::getContainer()->has('fos_http_cache.http.symfony_response_tagger'))\n\t\t{\n\t\t\t/** @var ResponseTagger $responseTagger */\n\t\t\t$responseTagger = System::getContainer()->get('fos_http_cache.http.symfony_response_tagger');\n\t\t\t$responseTagger->addTags(array('contao.db.tl_page.' . $objPage->id));\n\t\t}\n\n\t\treturn $response;\n\t}\n```"
            ],
            [
                77,
                "php",
                "AssetsManager.findFile",
                "```php\nprivate function findFile($uriPath)\n    {\n        return array_reduce($this->paths, function ($file, $path) use ($uriPath) {\n            if (false !== $file) {\n                return $file;\n            }\n\n            $file = $path . $uriPath;\n            if (is_file($file) && is_readable($file)) {\n                return $file;\n            }\n\n            return false;\n        }, false);\n    }\n```"
            ],
            [
                113,
                "php",
                "Request.getFormatFromUri",
                "```php\nprotected function getFormatFromUri($requestedUri)\n    {\n        $uriParts = explode('?', $requestedUri, 2);\n        $uriWithoutGet = reset($uriParts);\n        $uriAndFormat = explode('.', $uriWithoutGet);\n        if (count($uriAndFormat) >= 2) {\n            return end($uriAndFormat);\n        }\n        return null;\n    }\n```"
            ],
            [
                448,
                "php",
                "MarketplaceWebService_Client.getDownloadResponseDocument",
                "```php\nprivate function getDownloadResponseDocument($responseType, $header)\n    {\n        $md5 = $this->getParsedHeader($header, 'Content-MD5');\n        $requestId = $this->getParsedHeader($header, 'x-amz-request-id');\n\n        $response = '<' . $responseType . 'Response xmlns=\"http://mws.amazonaws.com/doc/2009-01-01/\">';\n\n        $response .= '<' . $responseType . 'Result>';\n        $response .= '<ContentMd5>';\n        $response .= $md5;\n        $response .= '</ContentMd5>';\n        $response .= '</' . $responseType . 'Result>';\n        $response .= '<ResponseMetadata>';\n        $response .= '<RequestId>';\n        $response .= $requestId;\n        $response .= '</RequestId>';\n        $response .= '</ResponseMetadata>';\n        $response .= '</' . $responseType . 'Response>';\n\n        return $response;\n    }\n```"
            ],
            [
                541,
                "php",
                "IssueGrouper.groupIssues",
                "```php\npublic function groupIssues(array $issues, ChangelogConfig $changelogConfig) : array\n    {\n        $this->linkIssues($issues);\n\n        return $this->groupIssuesByLabels($issues, $changelogConfig);\n    }\n```"
            ],
            [
                624,
                "php",
                "File.get",
                "```php\npublic function get(string $sName, int &$iFlags = null, int $iTimeout = 0)\n    {\n        if ($iTimeout > 0 && file_exists($this->_sFolder.$this->_getSubDirectory($sName).md5($sName).'.fil.cac')\n            && time() - filemtime($this->_sFolder.$this->_getSubDirectory($sName).md5($sName).'.fil.cac') > $iTimeout) {\n\n            unlink($this->_sFolder.$this->_getSubDirectory($sName).md5($sName).'.fil.cac');\n        }\n\n        if (file_exists($this->_sFolder.$this->_getSubDirectory($sName).md5($sName).'.fil.cac')) {\n\n            return unserialize(file_get_contents($this->_sFolder . $this->_getSubDirectory($sName) . md5($sName) . '.fil.cac'));\n        } else {\n\n            return false;\n        }\n    }\n```"
            ],
            [
                339,
                "php",
                "Client.request",
                "```php\npublic function request($path, $method = 'GET', $payload = false, $verbose=false) {\n        $response = $this->transport->request($this->expandPath($path), $method, $payload);\n        return ($verbose || !isset($response['_source']))\n            ? $response\n            : $response['_source'];\n    }\n```"
            ],
            [
                153,
                "php",
                "AssignManipulator.extract",
                "```php\nprivate function extract($stmt, ArrayDto $arrayDto, array $parentClass = array())\n    {\n        if ($stmt instanceof Expr\\Assign) {\n            if ($stmt->expr instanceof Expr\\BinaryOp) {\n                $stmt->expr = $stmt->expr->left;\n                $arrayDto->addCollected($this->dispatcher->pExpr_Assign($stmt));\n            } else {\n                $arrayDto->addCollected($this->dispatcher->pExpr_Assign($stmt));\n            }\n        } elseif ($this->isVarModification($stmt) && !in_array(\"PhpParser\\Node\\Expr\\Assign\", $parentClass)) {\n            $arrayDto->addCollected($this->dispatcher->p($stmt));\n        } elseif ($this->isVarCreation($stmt) && !in_array(\"PhpParser\\Node\\Expr\\ArrayItem\", $parentClass) && !in_array(\"PhpParser\\Node\\Expr\\Assign\", $parentClass)) {\n            $arrayDto->addCollected('let tmpArray'.md5(serialize($stmt->items)).' = '.$this->dispatcher->p($stmt));\n        }\n\n        return $arrayDto;\n    }\n```"
            ],
            [
                444,
                "php",
                "Serializer.serializeModelErrors",
                "```php\nprotected function serializeModelErrors($model)\n    {\n        $this->response->setStatusCode(422, 'Data Validation Failed.');\n        $result = [];\n        foreach ($model->getFirstErrors() as $name => $message) {\n            $result[] = [\n                'field' => $name,\n                'message' => $message,\n            ];\n        }\n\n        return $result;\n    }\n```"
            ],
            [
                177,
                "php",
                "RelatedObjects.beforeSave",
                "```php\npublic function beforeSave($event)\n    {\n        foreach ($this->_relations as $key => $relation) {\n            unset($relation['_moduleHandler']);\n            if (!empty($this->companionObject)) {\n                if ($this->companionRole === 'child') {\n                    $relation['parent_object_id'] = $this->companionObject->primaryKey;\n                } else {\n                    $relation['child_object_id'] = $this->companionObject->primaryKey;\n                }\n            }\n            if (empty($relation['child_object_id']) && empty($relation['parent_object_id'])) {\n                if (!empty($this->_relations) && (!$this->companionObject || empty($this->companionObject->primaryKey))) {\n                    $event->isValid = false;\n                    $this->owner->addError('_', 'Saving relations with no companion object! ' . get_class($this->owner));\n\n                    return false;\n                }\n            }\n            $this->owner->registerRelationModel($relation, $key);\n        }\n    }\n```"
            ],
            [
                95,
                "php",
                "Metadata.load",
                "```php\npublic function load(ObjectManager $manager)\n    {\n        $objects = $this->parse($this->path);\n\n        foreach ($objects as $object) {\n            $metadata = new MetadataEntity;\n            $metadata\n                ->setUuid($object->uuid)\n                ->setOwner($object->owner)\n                ->setOwnerUuid($object->owner_uuid)\n                ->setTitle((array) $object->title)\n                ->setSlug($object->slug)\n                ->setType($object->type)\n                ->setData((array) $object->data)\n                ->setTenant($object->tenant);\n            $manager->persist($metadata);\n        }\n\n        $manager->flush();\n    }\n```"
            ],
            [
                368,
                "php",
                "PhpArray.save",
                "```php\npublic function save($datas, array $identifier = array(), $shardingKey = null, &$affectedRows = null)\n    {\n        if (!self::$enabled) {\n            return;\n        }\n\n        unset(static::$datas[$this->getCacheKey($identifier)]);\n    }\n```"
            ],
            [
                122,
                "php",
                "GeoTIFFReader.goToIFDEntries",
                "```php\nprotected function goToIFDEntries()\n    {\n        fseek($this->FileResource, 4);\n\n        $ifdOffsetFormat = $this->isLittleEndian() ? 'VIFDoffset' : 'NIFDoffset';\n        $data = unpack($ifdOffsetFormat, fread($this->FileResource, 4));\n\n        fseek($this->FileResource, $data['IFDoffset']);\n    }\n```"
            ],
            [
                358,
                "php",
                "WP_Register.add_scripts",
                "```php\npublic static function add_scripts() {\n\n\t\tself::look_if_process_files( 'script' );\n\n\t\tforeach ( self::$data['script'] as $data ) {\n\n\t\t\t$params = [\n\t\t\t\t'plugin_url' => defined( 'WP_PLUGIN_URL' ) ? WP_PLUGIN_URL . '/' : '',\n\t\t\t\t'nonce'      => wp_create_nonce( $data['name'] ),\n\t\t\t];\n\n\t\t\t$data['params'] = array_merge( $data['params'], $params );\n\n\t\t\twp_register_script(\n\t\t\t\t$data['name'],\n\t\t\t\t$data['url'],\n\t\t\t\t$data['deps'],\n\t\t\t\t$data['version'],\n\t\t\t\t$data['footer']\n\t\t\t);\n\n\t\t\twp_enqueue_script( $data['name'] );\n\n\t\t\twp_localize_script(\n\t\t\t\t$data['name'],\n\t\t\t\t$data['name'],\n\t\t\t\t$data['params']\n\t\t\t);\n\t\t}\n\t}\n```"
            ],
            [
                275,
                "php",
                "ProductMapper.getProduct",
                "```php\npublic function getProduct(array $productData)\n    {\n        // check if all mandatory fields are present\n        foreach ($this->mandatoryFields as $mandatoryField) {\n            if (!array_key_exists($mandatoryField, $productData)) {\n                throw new ProductException(\"The field '$mandatoryField' is missing in the given product data\");\n            }\n        }\n\n        // try to create a product from the available data\n        try {\n\n            // sku\n            $sku = new SKU($productData[self::FIELD_SKU]);\n\n            // slug\n            $slug = new Slug($productData[self::FIELD_SLUG]);\n\n            // product content\n            $content = $this->contentMapper->getContent($productData);\n\n            $product = new Product($sku, $slug, $content);\n            return $product;\n\n        } catch (\\Exception $productException) {\n            throw new ProductException(sprintf(\"Failed to create a product from the given data: %s\",\n                $productException->getMessage()), $productException);\n        }\n    }\n```"
            ],
            [
                307,
                "php",
                "Assetic.assetCss",
                "```php\npublic function assetCss($url = null, $path = null, $compress = true)\n    {\n\n        // Basic paths\n        $srcPath = $this->routeMap['assets']['assetsPath'] . $this->routeMap['assets']['assetsDir'] . '/' . $url;\n        if (is_null($path)) {\n            $path = 'assets';\n            if (isset($this->routeMap['assets']['assetsDir']) and !empty($this->routeMap['assets']['assetsDir'])) {\n                $path = $this->routeMap['assets']['assetsDir'];\n                $this->checkDir($path);\n            }\n            $dstPath = $this->routeMap['assets']['cachePath'] . $path . '/' . $url;\n        } else {\n            $dstPath = $this->routeMap['assets']['cachePath'] . $path;\n        }\n\n        // Copying a file if it does not exist\n        if (!file_exists($dstPath)) {\n            if (!file_exists($srcPath)) {\n                return '';\n            }\n\n            $pathInfo = pathinfo($dstPath);\n            if (!file_exists($pathInfo['dirname'])) {\n                if (!mkdir($pathInfo['dirname'], 0777, true)) {\n                    throw new AsseticException('Unable to create' . $path, 403);\n                }\n            }\n\n            $args = [];\n            //$args[] = new Yui\\CssCompressorFilter('C:\\yuicompressor-2.4.7\\build\\yuicompressor-2.4.7.jar', 'java'),\n\n            if ($compress === true) {\n                if ($this->routeMap['assets']['minifyCssEnabled'] == true) {\n                    $args[] = new CssMinFilter();\n                }\n\n                $args[] = new PhpCssEmbedFilter();\n                $args[] = new CssRewriteFilter();\n                $args[] = new CssImportFilter();\n            }\n\n            $css = new AssetCollection(\n                [\n                    new FileAsset($srcPath),\n                ],\n                $args\n            );\n\n            preg_match_all('/url\\(\"([^\\)]+?\\.(woff2|woff|eot|ttf|svg|png|jpg|jpeg|gif))/', $css->dump(), $m);\n\n            $srcPathInfo = pathinfo($srcPath);\n\n            foreach ($m['1'] as $key => $url) {\n                $subPathInfo = pathinfo($pathInfo['dirname'] . '/' . $url);\n                if (!file_exists($subPathInfo['dirname'])) {\n                    if (!mkdir($subPathInfo['dirname'], 0777, true)) {\n                        throw new AsseticException('Unable to create' . $path, 403);\n                    }\n                }\n\n                if (!copy($srcPathInfo['dirname'] . '/' . $url, $pathInfo['dirname'] . '/' . $url)) {\n                    $msg = date('Y-m-d h:m:s') . ' :: Unable to copy an asset From: ' . $srcPathInfo['dirname'] . '/' . $url . ' TO ' . $pathInfo['dirname'] . '/' . $url . \"\\n\";\n                    $out = fopen(APP_DIR . 'View/logs/router.txt', 'w');\n                    fwrite($out, $msg);\n                    fclose($out);\n                }\n            }\n\n            if (!file_put_contents($dstPath, $css->dump())) {\n                $msg = date('Y-m-d h:m:s') . ' :: Unable to copy an asset From: ' . $srcPath . ' TO ' . $dstPath . \"\\n\";\n                $out = fopen(APP_DIR . '/View/logs/router.txt', 'w');\n                fwrite($out, $msg);\n                fclose($out);\n            }\n        }\n\n        // Return the link to the copy\n        $expressionUrl = $url;\n        $url = $this->requestPrefix . $this->routeMap['assets']['cacheUrl'] . $path . '/';\n        $url .= $expressionUrl;\n\n        return $url;\n    }\n```"
            ],
            [
                204,
                "php",
                "BaseType.actualValue",
                "```php\nprivate static function actualValue(array $info, $value)\n    {\n        /**\n         * Shortcut. Objects can be assigned as is.\n         */\n        if (is_object($value)) {\n            return $value;\n        }\n\n        $types = explode('|', $info['type']);\n\n        foreach ($types as $type) {\n            switch ($type) {\n                case 'integer':\n                case 'string':\n                case 'double':\n                case 'boolean':\n                case 'any':\n                    return $value;\n                case 'DateTime':\n                    return new \\DateTime($value, new \\DateTimeZone('UTC'));\n            }\n        }\n\n        return new $info['type']($value);\n    }\n```"
            ],
            [
                75,
                "php",
                "ErrorSuppressionFixer.getDefinition",
                "```php\npublic function getDefinition()\n    {\n        return new FixerDefinition(\n            'Error control operator should be added to deprecation notices and/or removed from other cases.',\n            [\n                new CodeSample(\"<?php\\ntrigger_error('Warning.', E_USER_DEPRECATED);\\n\"),\n                new CodeSample(\n                    \"<?php\\n@mkdir(\\$dir);\\n@unlink(\\$path);\\n\",\n                    [self::OPTION_NOISE_REMAINING_USAGES => true]\n                ),\n                new CodeSample(\n                    \"<?php\\n@mkdir(\\$dir);\\n@unlink(\\$path);\\n\",\n                    [\n                        self::OPTION_NOISE_REMAINING_USAGES => true,\n                        self::OPTION_NOISE_REMAINING_USAGES_EXCLUDE => ['unlink'],\n                    ]\n                ),\n            ],\n            null,\n            'Risky because adding/removing `@` might cause changes to code behaviour or if `trigger_error` function is overridden.'\n        );\n    }\n```"
            ],
            [
                733,
                "php",
                "LaravelHelpersServiceProvider.registerCustomHelpers",
                "```php\npublic function registerCustomHelpers()\n    {\n        foreach(glob(app_path($this->namespace.'/*')) as $helper)\n        {\n            $helperName = last(explode('/', $helper));\n            if(!in_array($helperName, $this->customExclude))\n            {\n                if(in_array('*', $this->customInclude) || in_array($helperName, $this->customInclude))\n                {\n                    require_once $helper;\n                }\n            }\n        }\n    }\n```"
            ],
            [
                366,
                "php",
                "GdImage.isSemitransparent",
                "```php\npublic function isSemitransparent()\n\t{\n\t\tif (!imageistruecolor($this->gdResource))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t$width = imagesx($this->gdResource);\n\t\t$height = imagesy($this->gdResource);\n\n\t\tfor ($x = 0; $x < $width; $x++)\n\t\t{\n\t\t\tfor ($y = 0; $y < $height; $y++)\n\t\t\t{\n\t\t\t\t// Check if the pixel is semitransparent\n\t\t\t\t$alpha = (imagecolorat($this->gdResource, $x, $y) >> 24) & 0x7F;\n\n\t\t\t\tif ($alpha > 0 && $alpha < 127)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n```"
            ],
            [
                616,
                "php",
                "Builder.listWords",
                "```php\nabstract public function __construct(ConnectionInterface $connection);\n\n\tpublic function listWords($word, $field = null)\n\t{\n\t\t$this->where('word','==',$word);\n\n\t\tif (!is_null($field)){\n\t\t\t$this->scope->listWordsField = $field;\n\t\t}\n\t\telse {\n\t\t\t$this->scope->listWordsField = '';\n\t\t}\n\n\t\treturn $this;\n\t}\n```"
            ],
            [
                305,
                "php",
                "Dimensions.toNode",
                "```php\npublic function toNode(DOMDocument $document = null)\n    {\n        if (null === $document) {\n            $document = new DOMDocument();\n        }\n\n        $node = $document->createElement('Dimensions');\n        $node->appendChild($document->createElement('Length', $this->getLength()));\n        $node->appendChild($document->createElement('Height', $this->getHeight()));\n        $node->appendChild($document->createElement('Width', $this->getWidth()));\n        $node->appendChild($this->getUnitOfMeasurement()->toNode($document));\n\n        return $node;\n    }\n```"
            ],
            [
                811,
                "php",
                "Internal.getCurrentGroups",
                "```php\npublic static function getCurrentGroups(&$logEntries, $curDepth)\n    {\n        /*\n            curDepth will fluctuate as we go back through log\n            minDepth will decrease as we work our way down/up the groups\n        */\n        $minDepth = $curDepth;\n        $entries = array();\n        for ($i = \\count($logEntries) - 1; $i >= 0; $i--) {\n            if ($curDepth < 1) {\n                break;\n            }\n            $method = $logEntries[$i][0];\n            if (\\in_array($method, array('group', 'groupCollapsed'))) {\n                $curDepth--;\n                if ($curDepth < $minDepth) {\n                    $minDepth--;\n                    $entries[$i] = $logEntries[$i];\n                }\n            } elseif ($method == 'groupEnd') {\n                $curDepth++;\n            }\n        }\n        return $entries;\n    }\n```"
            ],
            [
                599,
                "php",
                "Api.checkImageOptimizationStatus",
                "```php\npublic function checkImageOptimizationStatus()\n    {\n        $url = $this->_getApiServiceUri(). 'dynamic_io_settings';\n        $result = $this->_fetch($url, \\Zend_Http_Client::GET);\n\n        return $result;\n    }\n```"
            ],
            [
                761,
                "php",
                "ContextProvider.createDefaultContext",
                "```php\nprotected function createDefaultContext(): ContextInterface\n    {\n        $context = $this->createContext();\n\n        if ($this->customerProvider->hasCustomer()) {\n            $this->fillFromCustomer($context, $this->customerProvider->getCustomer());\n        }\n\n        $this->finalize($context);\n\n        return $context;\n    }\n```"
            ],
            [
                813,
                "php",
                "Application.getRootDir",
                "```php\npublic function getRootDir()\n    {\n        if (!$this->rootDir) {\n            $refl = new \\ReflectionObject($this);\n            $filename = $refl->getFileName();\n            if (false !== ($pos = strrpos($filename, '/vendor/'))) {\n                $filename = substr($filename, 0, $pos);\n            } else {\n                $filename = dirname($filename).'/..';\n            }\n\n            $this->rootDir = str_replace('\\\\', '/', $filename);\n        }\n\n        return $this->rootDir;\n    }\n```"
            ],
            [
                168,
                "php",
                "Router.locate",
                "```php\nfunction locate(array $path, string $method) : bool {\n        unset($this->params, $this->mRet);\n        $this->method = $method;\n        if (!isset($this->_tree[$method]))\n            goto Err;\n        $this->_pCall = &$this->_tree[$method];\n        $this->_mPush();\n        foreach ($path as $value) {\n            if (isset($this->_pCall[$value]))\n                $this->_pCall = &$this->_pCall[$value];\n            elseif (isset($this->_pCall[self::_PARAMETER])) {\n                $this->_pCall = &$this->_pCall[self::_PARAMETER];\n                $this->params[$this->_pCall[self::_NAME]] = $value;\n            } else goto Err;\n            $this->_mPush();\n        }\n        Loop:\n        if (isset($this->_pCall[self::_CALLBACK]))\n            goto Success;\n        if (isset($this->_pCall[self::_PARAMETER])) {\n            $this->_pCall = &$this->_pCall[self::_PARAMETER];\n            $this->params[$this->_pCall[self::_NAME]] = '';\n            $this->_mPush();\n            goto Loop;\n        }\n        Err:\n        if (isset($this->_tree[$method][self::_404])) {\n            $this->_pCall = &$this->_tree[$method][self::_404];\n            $this->_mPush();\n            goto Success;\n        }\n        return false;\n        Success:\n        $this->_call();\n        return true;\n    }\n```"
            ],
            [
                248,
                "php",
                "YamlPipelineRepositorySpec.it_creates_the_YAML_file",
                "```php\npublic function it_creates_the_YAML_file($files)\n    {\n        $files->makeDirectory('path/to/workflows', 0755, true, true)->shouldBeCalled();\n\n        $files->put('path/to/workflows/workflows.yml', '')->shouldBeCalled();\n\n        $this->settle();\n    }\n```"
            ],
            [
                97,
                "php",
                "RedisStorage.destroy",
                "```php\npublic function destroy(string $id) : bool\n    {\n        return $this->client->del($this->getKey($id)) > 0;\n    }\n```"
            ],
            [
                612,
                "php",
                "FrontendTemplate.getCustomSections",
                "```php\npublic function getCustomSections($strKey=null)\n\t{\n\t\t@trigger_error('Using FrontendTemplate::getCustomSections() has been deprecated and will no longer work in Contao 5.0. Use FrontendTemplate::sections() instead.', E_USER_DEPRECATED);\n\n\t\tif ($strKey != '' && !isset($this->positions[$strKey]))\n\t\t{\n\t\t\treturn '';\n\t\t}\n\n\t\t$tag = 'div';\n\n\t\t// Use the section tag for the main column\n\t\tif ($strKey == 'main')\n\t\t{\n\t\t\t$tag = 'section';\n\t\t}\n\n\t\t$sections = '';\n\n\t\t// Standardize the IDs (thanks to Tsarma) (see #4251)\n\t\tforeach ($this->positions[$strKey] as $sect)\n\t\t{\n\t\t\tif (isset($this->sections[$sect['id']]))\n\t\t\t{\n\t\t\t\t$sections .= \"\\n\" . '<' . $tag . ' id=\"' . StringUtil::standardize($sect['id'], true) . '\">' . \"\\n\" . '<div class=\"inside\">' . \"\\n\" . $this->sections[$sect['id']] . \"\\n\" . '</div>' . \"\\n\" . '</' . $tag . '>' . \"\\n\";\n\t\t\t}\n\t\t}\n\n\t\tif ($sections == '')\n\t\t{\n\t\t\treturn '';\n\t\t}\n\n\t\treturn '<div class=\"custom\">' . \"\\n\" . $sections . \"\\n\" . '</div>' . \"\\n\";\n\t}\n```"
            ],
            [
                377,
                "php",
                "AuthenticationSuccessHandler.onAuthenticationSuccess",
                "```php\npublic function onAuthenticationSuccess(Request $request, TokenInterface $token): RedirectResponse\n    {\n        $this->user = $token->getUser();\n\n        if (!$this->user instanceof User) {\n            return $this->getRedirectResponse($request);\n        }\n\n        $this->user->lastLogin = $this->user->currentLogin;\n        $this->user->currentLogin = time();\n        $this->user->save();\n\n        if (null !== $this->logger) {\n            $this->logger->info(\n                sprintf('User \"%s\" has logged in', $this->user->username),\n                ['contao' => new ContaoContext(__METHOD__, ContaoContext::ACCESS, $this->user->username)]\n            );\n        }\n\n        $this->triggerPostLoginHook();\n\n        return $this->getRedirectResponse($request);\n    }\n```"
            ],
            [
                111,
                "php",
                "Ov.updateOv",
                "```php\nprivate function updateOv($dwnl)\n    {\n        $entity = new  EBonDwnl();\n        /** @var EBonDwnl $one */\n        foreach ($dwnl as $one) {\n            $ov = $one->getOv();\n            $calcId = $one->getCalculationRef();\n            $custId = $one->getCustomerRef();\n            $entity->setOv($ov);\n            $id = [\n                EBonDwnl::A_CALC_REF => $calcId,\n                EBonDwnl::A_CUST_REF => $custId\n            ];\n            $this->daoBonDwnl->updateById($id, $entity);\n        }\n    }\n```"
            ],
            [
                824,
                "php",
                "PaymentSubjectTrait.getRemainingAmount",
                "```php\npublic function getRemainingAmount()\n    {\n        $amount = 0;\n        $currency = $this->getCurrency()->getCode();\n\n        $hasDeposit = 1 === Money::compare($this->depositTotal, 0, $currency);\n\n        // If deposit total is greater than zero and paid total is lower than deposit total\n        if ($hasDeposit && (-1 === Money::compare($this->paidTotal, $this->depositTotal, $currency))) {\n            // Pay deposit\n            $total = $this->depositTotal;\n        } else {\n            // Pay grand total\n            $total = $this->grandTotal;\n        }\n\n        $c = Money::compare($total, $this->paidTotal + $this->outstandingAccepted + $this->pendingTotal, $currency);\n\n        // If (paid total + accepted outstanding + pending total) is lower limit\n        if (1 === $c) {\n            // Pay difference\n            $amount = $total - $this->paidTotal - $this->outstandingAccepted - $this->pendingTotal;\n        } else if (0 === $c && 0 < $this->outstandingAccepted) {\n            // Pay outstanding\n            $amount = $this->outstandingAccepted;\n        }\n\n        if (0 < $amount) {\n            return $amount;\n        }\n\n        return 0;\n    }\n```"
            ],
            [
                587,
                "php",
                "Comment.jsonSerialize",
                "```php\npublic function jsonSerialize()\n    {\n        $json = [];\n\n        if (null !== $this->objectId) {\n            $json['objectId'] = $this->objectId;\n        }\n        if (null !== $this->comment) {\n            $json['comment'] = $this->comment;\n        }\n        if (null !== $this->parentId) {\n            $json['parentId'] = $this->parentId;\n        }\n        if (null !== $this->userName) {\n            $json['userName'] = $this->userName;\n        }\n        if (null !== $this->userEmail) {\n            $json['userEmail'] = $this->userEmail;\n        }\n\n        return $json;\n    }\n```"
            ],
            [
                471,
                "php",
                "PasteButtonListener.getModelById",
                "```php\nprivate function getModelById($modelId)\n    {\n        if ($modelId === null) {\n            return null;\n        }\n\n        $provider = $this->environment->getDataProvider();\n        $config   = $provider\n            ->getEmptyConfig()\n            ->setId($modelId);\n\n        return $provider->fetch($config);\n    }\n```"
            ]
        ]
    },
    "Validation-php MRR (bs=1,000)": 0.010612827239812809,
    "Examples-Test-go": {
        "_type": "table",
        "columns": [
            "Rank",
            "Language",
            "Query",
            "Code"
        ],
        "data": [
            [
                660,
                "go",
                "leaseTimeToLiveCommandFunc",
                "```go\nfunc leaseTimeToLiveCommandFunc(cmd *cobra.Command, args []string) {\n\tif len(args) != 1 {\n\t\tExitWithError(ExitBadArgs, fmt.Errorf(\"lease timetolive command needs lease ID as argument\"))\n\t}\n\tvar opts []v3.LeaseOption\n\tif timeToLiveKeys {\n\t\topts = append(opts, v3.WithAttachedKeys())\n\t}\n\tresp, rerr := mustClientFromCmd(cmd).TimeToLive(context.TODO(), leaseFromArgs(args[0]), opts...)\n\tif rerr != nil {\n\t\tExitWithError(ExitBadConnection, rerr)\n\t}\n\tdisplay.TimeToLive(*resp, timeToLiveKeys)\n}\n```"
            ],
            [
                364,
                "go",
                "Visit",
                "```go\nfunc (m visitedPointers) Visit(v reflect.Value) bool {\n\tp := value.PointerOf(v)\n\t_, visited := m[p]\n\tm[p] = struct{}{}\n\treturn visited\n}\n```"
            ],
            [
                54,
                "go",
                "Environ",
                "```go\nfunc Environ() []string {\n\ts := make([]string, 0)\n\n\tFlagSet.VisitAll(func(f *flag.Flag) {\n\t\tif value, ok := getenv(f.Name); ok {\n\t\t\ts = append(s, flagAsEnv(f.Name)+\"=\"+value)\n\t\t}\n\t})\n\n\treturn s\n}\n```"
            ],
            [
                1,
                "go",
                "Validate",
                "```go\nfunc Validate(data []byte, expected []byte) error {\n\n\tactual := Checksum(data)\n\n\t// validate the provided checksum against the calculated\n\tif !bytes.Equal(actual, expected) {\n\t\treturn ErrInvalidChecksum\n\t}\n\n\treturn nil\n}\n```"
            ],
            [
                10,
                "go",
                "MonitoringMetricLocator",
                "```go\nfunc (api *API) MonitoringMetricLocator(href string) *MonitoringMetricLocator {\n\treturn &MonitoringMetricLocator{Href(href), api}\n}\n```"
            ],
            [
                8,
                "go",
                "PutFileWriter",
                "```go\nfunc (c *putFileClient) PutFileWriter(repoName, commitID, path string) (io.WriteCloser, error) {\n\treturn c.newPutFileWriteCloser(repoName, commitID, path, pfs.Delimiter_NONE, 0, 0, 0, nil)\n}\n```"
            ],
            [
                12,
                "go",
                "UserPreferenceLocator",
                "```go\nfunc (api *API) UserPreferenceLocator(href string) *UserPreferenceLocator {\n\treturn &UserPreferenceLocator{Href(href), api}\n}\n```"
            ],
            [
                78,
                "go",
                "defaultArguments",
                "```go\nfunc defaultArguments(t *buildv1alpha1.TemplateInstantiationSpec, rawEnv map[string]string) {\n\tkeys := sets.String{}\n\tfor _, arg := range t.Arguments {\n\t\tkeys.Insert(arg.Name)\n\t}\n\tfor _, k := range sets.StringKeySet(rawEnv).List() { // deterministic ordering\n\t\tif keys.Has(k) {\n\t\t\tcontinue\n\t\t}\n\t\tt.Arguments = append(t.Arguments, buildv1alpha1.ArgumentSpec{Name: k, Value: rawEnv[k]})\n\t}\n}\n```"
            ],
            [
                6,
                "go",
                "ParseURL",
                "```go\nfunc ParseURL(urlStr string) (*ObjectStoreURL, error) {\n\turl, err := url.Parse(urlStr)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error parsing url %v: %v\", urlStr, err)\n\t}\n\tswitch url.Scheme {\n\tcase \"s3\", \"gcs\", \"gs\", \"local\":\n\t\treturn &ObjectStoreURL{\n\t\t\tStore:  url.Scheme,\n\t\t\tBucket: url.Host,\n\t\t\tObject: strings.Trim(url.Path, \"/\"),\n\t\t}, nil\n\tcase \"as\", \"wasb\":\n\t\t// In Azure, the first part of the path is the container name.\n\t\tparts := strings.Split(strings.Trim(url.Path, \"/\"), \"/\")\n\t\tif len(parts) < 1 {\n\t\t\treturn nil, fmt.Errorf(\"malformed Azure URI: %v\", urlStr)\n\t\t}\n\t\treturn &ObjectStoreURL{\n\t\t\tStore:  url.Scheme,\n\t\t\tBucket: parts[0],\n\t\t\tObject: strings.Trim(path.Join(parts[1:]...), \"/\"),\n\t\t}, nil\n\t}\n\treturn nil, fmt.Errorf(\"unrecognized object store: %s\", url.Scheme)\n}\n```"
            ],
            [
                26,
                "go",
                "SetupCertificates",
                "```go\nfunc SetupCertificates(dir string, tlsc *tls.Config) error {\n\tlogrus.Debugf(\"Looking for TLS certificates and private keys in %s\", dir)\n\tfs, err := ioutil.ReadDir(dir)\n\tif err != nil {\n\t\tif os.IsNotExist(err) {\n\t\t\treturn nil\n\t\t}\n\t\tif os.IsPermission(err) {\n\t\t\tlogrus.Debugf(\"Skipping scan of %s due to permission error: %v\", dir, err)\n\t\t\treturn nil\n\t\t}\n\t\treturn err\n\t}\n\n\tfor _, f := range fs {\n\t\tfullPath := filepath.Join(dir, f.Name())\n\t\tif strings.HasSuffix(f.Name(), \".crt\") {\n\t\t\tlogrus.Debugf(\" crt: %s\", fullPath)\n\t\t\tdata, err := ioutil.ReadFile(fullPath)\n\t\t\tif err != nil {\n\t\t\t\tif os.IsNotExist(err) {\n\t\t\t\t\t// Dangling symbolic link?\n\t\t\t\t\t// Race with someone who deleted the\n\t\t\t\t\t// file after we read the directory's\n\t\t\t\t\t// list of contents?\n\t\t\t\t\tlogrus.Warnf(\"error reading certificate %q: %v\", fullPath, err)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tif tlsc.RootCAs == nil {\n\t\t\t\tsystemPool, err := tlsconfig.SystemCertPool()\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn errors.Wrap(err, \"unable to get system cert pool\")\n\t\t\t\t}\n\t\t\t\ttlsc.RootCAs = systemPool\n\t\t\t}\n\t\t\ttlsc.RootCAs.AppendCertsFromPEM(data)\n\t\t}\n\t\tif strings.HasSuffix(f.Name(), \".cert\") {\n\t\t\tcertName := f.Name()\n\t\t\tkeyName := certName[:len(certName)-5] + \".key\"\n\t\t\tlogrus.Debugf(\" cert: %s\", fullPath)\n\t\t\tif !hasFile(fs, keyName) {\n\t\t\t\treturn errors.Errorf(\"missing key %s for client certificate %s. Note that CA certificates should use the extension .crt\", keyName, certName)\n\t\t\t}\n\t\t\tcert, err := tls.LoadX509KeyPair(filepath.Join(dir, certName), filepath.Join(dir, keyName))\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\ttlsc.Certificates = append(tlsc.Certificates, cert)\n\t\t}\n\t\tif strings.HasSuffix(f.Name(), \".key\") {\n\t\t\tkeyName := f.Name()\n\t\t\tcertName := keyName[:len(keyName)-4] + \".cert\"\n\t\t\tlogrus.Debugf(\" key: %s\", fullPath)\n\t\t\tif !hasFile(fs, certName) {\n\t\t\t\treturn errors.Errorf(\"missing client certificate %s for key %s\", certName, keyName)\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\n```"
            ],
            [
                58,
                "go",
                "NewOutgoingMessage",
                "```go\nfunc (api *TelegramBotAPI) NewOutgoingMessage(recipient Recipient, text string) *OutgoingMessage {\n\treturn &OutgoingMessage{\n\t\toutgoingMessageBase: outgoingMessageBase{\n\t\t\toutgoingBase: outgoingBase{\n\t\t\t\tapi:       api,\n\t\t\t\tRecipient: recipient,\n\t\t\t},\n\t\t},\n\t\tText:      text,\n\t\tParseMode: ModeDefault,\n\t}\n}\n```"
            ],
            [
                181,
                "go",
                "releasePreviousFragment",
                "```go\nfunc (r *reqResReader) releasePreviousFragment() {\n\tfragment := r.previousFragment\n\tr.previousFragment = nil\n\tif fragment != nil {\n\t\tfragment.done()\n\t}\n}\n```"
            ],
            [
                170,
                "go",
                "Pull",
                "```go\nfunc (r *Release) Pull(releaseLocation string) (filename string, err error) {\n\tu, uerr := url.Parse(releaseLocation)\n\tif uerr != nil || !(u.Scheme == \"http\" || u.Scheme == \"https\") {\n\t\t// assume a local file, ensure it exists\n\t\tif _, ferr := os.Stat(releaseLocation); os.IsNotExist(ferr) {\n\t\t\terr = fmt.Errorf(\"Could not pull %s. The file doesn't exist or isn't a valid http(s) URL\", releaseLocation)\n\t\t\treturn\n\t\t}\n\t\tfilename = releaseLocation\n\t} else {\n\t\t// remote file, ensure its in the local cache\n\t\tfilename = r.CacheDir + \"/\" + path.Base(releaseLocation)\n\t\tif _, err = os.Stat(filename); os.IsNotExist(err) {\n\t\t\tfmt.Println(\"Could not find release in local cache. Downloading now.\")\n\t\t\terr = r.download(releaseLocation, filename)\n\t\t}\n\t}\n\treturn\n}\n```"
            ],
            [
                495,
                "go",
                "HTTP",
                "```go\nfunc (s *Sentinel) HTTP(listener net.Listener, handler http.Handler, opts ...ServerOption) error {\n\ts.Lock()\n\tdefer s.Unlock()\n\n\tif s.started {\n\t\treturn ErrAlreadyStarted\n\t}\n\n\tvar err error\n\n\t// create server and apply options\n\tserver := &http.Server{\n\t\tHandler: handler,\n\t}\n\tfor _, o := range opts {\n\t\tif err = o(server); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\t// register server\n\treturn s.Register(func() error {\n\t\treturn server.Serve(listener)\n\t}, server.Shutdown, IgnoreServerClosed, IgnoreNetOpError)\n}\n```"
            ],
            [
                54,
                "go",
                "Release",
                "```go\nfunc (writer *VideoWriter) Release() {\n\twriter_c := (*C.CvVideoWriter)(writer)\n\tC.cvReleaseVideoWriter(&writer_c)\n}\n```"
            ],
            [
                1,
                "go",
                "WithIncludeCommandLineAPI",
                "```go\nfunc (p RunScriptParams) WithIncludeCommandLineAPI(includeCommandLineAPI bool) *RunScriptParams {\n\tp.IncludeCommandLineAPI = includeCommandLineAPI\n\treturn &p\n}\n```"
            ],
            [
                800,
                "go",
                "MarshalJSON",
                "```go\nfunc (v RequestDatabaseParams) MarshalJSON() ([]byte, error) {\n\tw := jwriter.Writer{}\n\teasyjsonC5a4559bEncodeGithubComChromedpCdprotoIndexeddb1(&w, v)\n\treturn w.Buffer.BuildBytes(), w.Error\n}\n```"
            ],
            [
                551,
                "go",
                "Create",
                "```go\nfunc (s *platformService) Create(opts appTypes.PlatformOptions) error {\n\tp := appTypes.Platform{Name: opts.Name}\n\tif err := s.validate(p); err != nil {\n\t\treturn err\n\t}\n\terr := s.storage.Insert(p)\n\tif err != nil {\n\t\treturn err\n\t}\n\topts.ImageName, err = servicemanager.PlatformImage.NewImage(opts.Name)\n\tif err != nil {\n\t\treturn err\n\t}\n\terr = builder.PlatformAdd(opts)\n\tif err != nil {\n\t\tif imgErr := servicemanager.PlatformImage.DeleteImages(opts.Name); imgErr != nil {\n\t\t\tlog.Errorf(\"unable to remove platform images: %s\", imgErr)\n\t\t}\n\t\tdbErr := s.storage.Delete(p)\n\t\tif dbErr != nil {\n\t\t\treturn tsuruErrors.NewMultiError(\n\t\t\t\terrors.Wrapf(dbErr, \"unable to rollback platform add\"),\n\t\t\t\terrors.Wrapf(err, \"original platform add error\"),\n\t\t\t)\n\t\t}\n\t\treturn err\n\t}\n\treturn servicemanager.PlatformImage.AppendImage(opts.Name, opts.ImageName)\n}\n```"
            ],
            [
                40,
                "go",
                "WithFormat",
                "```go\nfunc (p CaptureSnapshotParams) WithFormat(format CaptureSnapshotFormat) *CaptureSnapshotParams {\n\tp.Format = format\n\treturn &p\n}\n```"
            ],
            [
                17,
                "go",
                "EscapeHTML",
                "```go\nfunc EscapeHTML(s string) string {\n\tif Verbose {\n\t\tfmt.Println(\"Use html.EscapeString instead of EscapeHTML\")\n\t}\n\treturn html.EscapeString(s)\n}\n```"
            ],
            [
                873,
                "go",
                "InspectDatum",
                "```go\nfunc (c APIClient) InspectDatum(jobID string, datumID string) (*pps.DatumInfo, error) {\n\tdatumInfo, err := c.PpsAPIClient.InspectDatum(\n\t\tc.Ctx(),\n\t\t&pps.InspectDatumRequest{\n\t\t\tDatum: &pps.Datum{\n\t\t\t\tID:  datumID,\n\t\t\t\tJob: NewJob(jobID),\n\t\t\t},\n\t\t},\n\t)\n\tif err != nil {\n\t\treturn nil, grpcutil.ScrubGRPC(err)\n\t}\n\treturn datumInfo, nil\n}\n```"
            ],
            [
                31,
                "go",
                "bundle",
                "```go\nfunc (s *app) bundle(tarFile string) (err error) {\n\tvar out io.Writer\n\tif tarFile == \"-\" {\n\t\tout = os.Stdout\n\t} else {\n\t\tf, err := os.Create(tarFile)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer func() {\n\t\t\tif cerr := f.Close(); err == nil {\n\t\t\t\terr = cerr\n\t\t\t}\n\t\t}()\n\t\tout = f\n\t}\n\ttw := tar.NewWriter(out)\n\n\tfor srcDir, importName := range s.imports {\n\t\tdstDir := \"_gopath/src/\" + importName\n\t\tif err = copyTree(tw, dstDir, srcDir); err != nil {\n\t\t\treturn fmt.Errorf(\"unable to copy directory %v to %v: %v\", srcDir, dstDir, err)\n\t\t}\n\t}\n\tif err := copyTree(tw, \".\", *rootDir); err != nil {\n\t\treturn fmt.Errorf(\"unable to copy root directory to /app: %v\", err)\n\t}\n\tif !s.hasMain {\n\t\tif err := synthesizeMain(tw, s.appFiles); err != nil {\n\t\t\treturn fmt.Errorf(\"unable to synthesize new main func: %v\", err)\n\t\t}\n\t}\n\n\tif err := tw.Close(); err != nil {\n\t\treturn fmt.Errorf(\"unable to close tar file %v: %v\", tarFile, err)\n\t}\n\treturn nil\n}\n```"
            ],
            [
                175,
                "go",
                "CompareInt",
                "```go\nfunc CompareInt(this, that unsafe.Pointer) int {\n\tthisItem := (*intKeyItem)(this)\n\tthatItem := (*intKeyItem)(that)\n\treturn int(*thisItem - *thatItem)\n}\n```"
            ],
            [
                596,
                "go",
                "replayWAL",
                "```go\nfunc (rc *raftNode) replayWAL() *wal.WAL {\n\tlog.Printf(\"replaying WAL of member %d\", rc.id)\n\tsnapshot := rc.loadSnapshot()\n\tw := rc.openWAL(snapshot)\n\t_, st, ents, err := w.ReadAll()\n\tif err != nil {\n\t\tlog.Fatalf(\"raftexample: failed to read WAL (%v)\", err)\n\t}\n\trc.raftStorage = raft.NewMemoryStorage()\n\tif snapshot != nil {\n\t\trc.raftStorage.ApplySnapshot(*snapshot)\n\t}\n\trc.raftStorage.SetHardState(st)\n\n\t// append to storage so raft starts at the right place in log\n\trc.raftStorage.Append(ents)\n\t// send nil once lastIndex is published so client knows commit channel is current\n\tif len(ents) > 0 {\n\t\trc.lastIndex = ents[len(ents)-1].Index\n\t} else {\n\t\trc.commitC <- nil\n\t}\n\treturn w\n}\n```"
            ],
            [
                540,
                "go",
                "prepareReviewersBody",
                "```go\nfunc prepareReviewersBody(logins []string, org string) (map[string][]string, error) {\n\tbody := map[string][]string{}\n\tvar errors []error\n\tfor _, login := range logins {\n\t\tmat := teamRe.FindStringSubmatch(login)\n\t\tif mat == nil {\n\t\t\tif _, exists := body[\"reviewers\"]; !exists {\n\t\t\t\tbody[\"reviewers\"] = []string{}\n\t\t\t}\n\t\t\tbody[\"reviewers\"] = append(body[\"reviewers\"], login)\n\t\t} else if mat[1] == org {\n\t\t\tif _, exists := body[\"team_reviewers\"]; !exists {\n\t\t\t\tbody[\"team_reviewers\"] = []string{}\n\t\t\t}\n\t\t\tbody[\"team_reviewers\"] = append(body[\"team_reviewers\"], mat[2])\n\t\t} else {\n\t\t\terrors = append(errors, fmt.Errorf(\"team %s is not part of %s org\", login, org))\n\t\t}\n\t}\n\treturn body, errorutil.NewAggregate(errors...)\n}\n```"
            ],
            [
                1,
                "go",
                "StopJob",
                "```go\nfunc (c APIClient) StopJob(jobID string) error {\n\t_, err := c.PpsAPIClient.StopJob(\n\t\tc.Ctx(),\n\t\t&pps.StopJobRequest{\n\t\t\tJob: NewJob(jobID),\n\t\t},\n\t)\n\treturn grpcutil.ScrubGRPC(err)\n}\n```"
            ],
            [
                85,
                "go",
                "ContainerToArgs",
                "```go\nfunc ContainerToArgs(container *Container) ContainerArgs {\n\targs := ContainerArgs{\n\t\tID:           container.ID,\n\t\tProject:      container.Project,\n\t\tName:         container.Name,\n\t\tNode:         container.Node,\n\t\tCtype:        ContainerType(container.Type),\n\t\tArchitecture: container.Architecture,\n\t\tEphemeral:    container.Ephemeral,\n\t\tCreationDate: container.CreationDate,\n\t\tStateful:     container.Stateful,\n\t\tLastUsedDate: container.LastUseDate,\n\t\tDescription:  container.Description,\n\t\tConfig:       container.Config,\n\t\tDevices:      container.Devices,\n\t\tProfiles:     container.Profiles,\n\t\tExpiryDate:   container.ExpiryDate,\n\t}\n\n\tif args.Devices == nil {\n\t\targs.Devices = types.Devices{}\n\t}\n\n\treturn args\n}\n```"
            ],
            [
                113,
                "go",
                "SyncConfig",
                "```go\nfunc (r *Ranch) SyncConfig(config string) error {\n\tresources, err := ParseConfig(config)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif err := r.Storage.SyncResources(resources); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n```"
            ],
            [
                200,
                "go",
                "OCSPServer",
                "```go\nfunc OCSPServer(value ...string) Option {\n\treturn func(c *configuration) {\n\t\tc.ocspServer = append(c.ocspServer, value...)\n\t}\n}\n```"
            ],
            [
                289,
                "go",
                "Level",
                "```go\nfunc (l *slog) Level() Level {\n\treturn Level(atomic.LoadUint32((*uint32)(&l.lvl)))\n}\n```"
            ],
            [
                434,
                "go",
                "Get",
                "```go\nfunc (c *apps) Get(name string, options meta_v1.GetOptions) (result *v1.App, err error) {\n\tresult = &v1.App{}\n\terr = c.client.Get().\n\t\tNamespace(c.ns).\n\t\tResource(\"apps\").\n\t\tName(name).\n\t\tVersionedParams(&options, scheme.ParameterCodec).\n\t\tDo().\n\t\tInto(result)\n\treturn\n}\n```"
            ],
            [
                41,
                "go",
                "GetCols",
                "```go\nfunc GetCols(arr Arr, submat *Mat, start_col, end_col int) *Mat {\n\tmat_new := C.cvGetCols(\n\t\tunsafe.Pointer(arr),\n\t\t(*C.CvMat)(submat),\n\t\tC.int(start_col),\n\t\tC.int(end_col),\n\t)\n\treturn (*Mat)(mat_new)\n}\n```"
            ],
            [
                269,
                "go",
                "RegisterCommands",
                "```go\nfunc RegisterCommands(registrar rsapi.APICommandRegistrar) {\n\tcommandValues = rsapi.ActionCommands{}\n\tregistrar.RegisterActionCommands(APIName, GenMetadata, commandValues)\n}\n```"
            ],
            [
                254,
                "go",
                "RunAnnotated",
                "```go\nfunc RunAnnotated(task Task, description string, symbol string, options ...interface{}) error {\n\tdoneCh := make(chan bool)\n\terrCh := make(chan error)\n\n\tl := logger.Log\n\tt := DefaultTicker\n\n\tfor _, o := range options {\n\t\tif value, ok := o.(logger.Logger); ok {\n\t\t\tl = value\n\t\t} else if value, ok := o.(*time.Ticker); ok {\n\t\t\tt = value\n\t\t}\n\t}\n\n\tgo func() {\n\t\terrCh <- task()\n\t}()\n\n\tl(description)\n\tlogActivity(symbol, l, t, doneCh)\n\n\terr := <-errCh\n\tdoneCh <- true\n\n\treturn err\n}\n```"
            ],
            [
                60,
                "go",
                "SetFlagsFromEnv",
                "```go\nfunc SetFlagsFromEnv(prefix string, fs *flag.FlagSet) error {\n\tvar err error\n\talreadySet := make(map[string]bool)\n\tfs.Visit(func(f *flag.Flag) {\n\t\talreadySet[FlagToEnv(prefix, f.Name)] = true\n\t})\n\tusedEnvKey := make(map[string]bool)\n\tfs.VisitAll(func(f *flag.Flag) {\n\t\tif serr := setFlagFromEnv(fs, prefix, f.Name, usedEnvKey, alreadySet, true); serr != nil {\n\t\t\terr = serr\n\t\t}\n\t})\n\tverifyEnv(prefix, usedEnvKey, alreadySet)\n\treturn err\n}\n```"
            ],
            [
                288,
                "go",
                "step2b",
                "```go\nfunc step2b(word *snowballword.SnowballWord) bool {\n\tsuffix, suffixRunes := word.FirstSuffixIn(word.RVstart, len(word.RS),\n\t\t\"i\u00e9semos\", \"i\u00e9ramos\", \"ir\u00edamos\", \"er\u00edamos\", \"ar\u00edamos\", \"\u00e1semos\",\n\t\t\"\u00e1ramos\", \"\u00e1bamos\", \"isteis\", \"ir\u00edais\", \"iremos\", \"ieseis\",\n\t\t\"ierais\", \"er\u00edais\", \"eremos\", \"asteis\", \"ar\u00edais\", \"aremos\",\n\t\t\"\u00edamos\", \"ir\u00edas\", \"ir\u00edan\", \"ir\u00e9is\", \"ieses\", \"iesen\", \"ieron\",\n\t\t\"ieras\", \"ieran\", \"iendo\", \"er\u00edas\", \"er\u00edan\", \"er\u00e9is\", \"aseis\",\n\t\t\"ar\u00edas\", \"ar\u00edan\", \"ar\u00e9is\", \"arais\", \"abais\", \"\u00edais\", \"iste\",\n\t\t\"ir\u00eda\", \"ir\u00e1s\", \"ir\u00e1n\", \"imos\", \"iese\", \"iera\", \"idos\", \"idas\",\n\t\t\"er\u00eda\", \"er\u00e1s\", \"er\u00e1n\", \"aste\", \"ases\", \"asen\", \"ar\u00eda\", \"ar\u00e1s\",\n\t\t\"ar\u00e1n\", \"aron\", \"aras\", \"aran\", \"ando\", \"amos\", \"ados\", \"adas\",\n\t\t\"abas\", \"aban\", \"\u00edas\", \"\u00edan\", \"\u00e9is\", \"\u00e1is\", \"ir\u00e9\", \"ir\u00e1\", \"ido\",\n\t\t\"ida\", \"er\u00e9\", \"er\u00e1\", \"emos\", \"ase\", \"ar\u00e9\", \"ar\u00e1\", \"ara\", \"ado\",\n\t\t\"ada\", \"aba\", \"\u00eds\", \"\u00eda\", \"i\u00f3\", \"ir\", \"id\", \"es\", \"er\", \"en\",\n\t\t\"ed\", \"as\", \"ar\", \"an\", \"ad\",\n\t)\n\tswitch suffix {\n\tcase \"\":\n\t\treturn false\n\n\tcase \"en\", \"es\", \"\u00e9is\", \"emos\":\n\n\t\t// Delete, and if preceded by gu delete the u (the gu need not be in RV)\n\t\tword.RemoveLastNRunes(len(suffixRunes))\n\t\tguSuffix, _ := word.FirstSuffix(\"gu\")\n\t\tif guSuffix != \"\" {\n\t\t\tword.RemoveLastNRunes(1)\n\t\t}\n\n\tdefault:\n\n\t\t// Delete\n\t\tword.RemoveLastNRunes(len(suffixRunes))\n\t}\n\treturn true\n}\n```"
            ],
            [
                68,
                "go",
                "provisionerList",
                "```go\nfunc provisionerList(w http.ResponseWriter, r *http.Request, t auth.Token) (err error) {\n\tallowed := permission.Check(t, permission.PermClusterRead)\n\tif !allowed {\n\t\treturn permission.ErrUnauthorized\n\t}\n\tprovs, err := provision.Registry()\n\tif err != nil {\n\t\treturn err\n\t}\n\tinfo := make([]provisionerInfo, len(provs))\n\tfor i, p := range provs {\n\t\tinfo[i].Name = p.GetName()\n\t\tif clusterProv, ok := p.(cluster.ClusteredProvisioner); ok {\n\t\t\tinfo[i].ClusterHelp = clusterProv.ClusterHelp()\n\t\t}\n\t}\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\treturn json.NewEncoder(w).Encode(info)\n}\n```"
            ],
            [
                3,
                "go",
                "AddMulti",
                "```go\nfunc AddMulti(c context.Context, tasks []*Task, queueName string) ([]*Task, error) {\n\treq := &pb.TaskQueueBulkAddRequest{\n\t\tAddRequest: make([]*pb.TaskQueueAddRequest, len(tasks)),\n\t}\n\tme, any := make(appengine.MultiError, len(tasks)), false\n\tfor i, t := range tasks {\n\t\treq.AddRequest[i], me[i] = newAddReq(c, t, queueName)\n\t\tany = any || me[i] != nil\n\t}\n\tif any {\n\t\treturn nil, me\n\t}\n\tres := &pb.TaskQueueBulkAddResponse{}\n\tif err := internal.Call(c, \"taskqueue\", \"BulkAdd\", req, res); err != nil {\n\t\treturn nil, err\n\t}\n\tif len(res.Taskresult) != len(tasks) {\n\t\treturn nil, errors.New(\"taskqueue: server error\")\n\t}\n\ttasksOut := make([]*Task, len(tasks))\n\tfor i, tr := range res.Taskresult {\n\t\ttasksOut[i] = new(Task)\n\t\t*tasksOut[i] = *tasks[i]\n\t\ttasksOut[i].Method = tasksOut[i].method()\n\t\tif tasksOut[i].Name == \"\" {\n\t\t\ttasksOut[i].Name = string(tr.ChosenTaskName)\n\t\t}\n\t\tif *tr.Result != pb.TaskQueueServiceError_OK {\n\t\t\tif alreadyAddedErrors[*tr.Result] {\n\t\t\t\tme[i] = ErrTaskAlreadyAdded\n\t\t\t} else {\n\t\t\t\tme[i] = &internal.APIError{\n\t\t\t\t\tService: \"taskqueue\",\n\t\t\t\t\tCode:    int32(*tr.Result),\n\t\t\t\t}\n\t\t\t}\n\t\t\tany = true\n\t\t}\n\t}\n\tif any {\n\t\treturn tasksOut, me\n\t}\n\treturn tasksOut, nil\n}\n```"
            ],
            [
                289,
                "go",
                "RaftNodeAddress",
                "```go\nfunc (n *NodeTx) RaftNodeAddress(id int64) (string, error) {\n\tstmt := \"SELECT address FROM raft_nodes WHERE id=?\"\n\taddresses, err := query.SelectStrings(n.tx, stmt, id)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tswitch len(addresses) {\n\tcase 0:\n\t\treturn \"\", ErrNoSuchObject\n\tcase 1:\n\t\treturn addresses[0], nil\n\tdefault:\n\t\t// This should never happen since we have a UNIQUE constraint\n\t\t// on the raft_nodes.id column.\n\t\treturn \"\", fmt.Errorf(\"more than one match found\")\n\t}\n}\n```"
            ],
            [
                679,
                "go",
                "GetBalancedNic",
                "```go\nfunc (c *Client) GetBalancedNic(dcid, lbalid, balnicid string) (*Nic, error) {\n\turl := balnicPath(dcid, lbalid, balnicid) + `?depth=` + c.client.depth + `&pretty=` + strconv.FormatBool(c.client.pretty)\n\tret := &Nic{}\n\terr := c.client.Get(url, ret, http.StatusOK)\n\treturn ret, err\n}\n```"
            ],
            [
                91,
                "go",
                "UnmarshalJSON",
                "```go\nfunc (v *TextBoxSnapshot) UnmarshalJSON(data []byte) error {\n\tr := jlexer.Lexer{Data: data}\n\teasyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot(&r, v)\n\treturn r.Error()\n}\n```"
            ],
            [
                1,
                "go",
                "NewCheckWithOptions",
                "```go\nfunc NewCheckWithOptions(options CheckOptions) *Check {\n\tc := NewCheck()\n\tif options.StatusPolicy != nil {\n\t\tc.statusPolicy = options.StatusPolicy\n\t}\n\treturn c\n}\n```"
            ],
            [
                96,
                "go",
                "Actual",
                "```go\nfunc (r *InstanceGroup) Actual(immutable *cluster.Cluster) (*cluster.Cluster, cloud.Resource, error) {\n\tlogger.Debug(\"instanceGroup.Actual\")\n\tif r.CachedActual != nil {\n\t\tlogger.Debug(\"Using cached instance [actual]\")\n\t\treturn immutable, r.CachedActual, nil\n\t}\n\tnewResource := &InstanceGroup{\n\t\tShared: Shared{\n\t\t\tName:    r.Name,\n\t\t\tCloudID: r.ServerPool.Identifier,\n\t\t},\n\t}\n\n\tproject, err := Sdk.Service.Projects.Get(immutable.ProviderConfig().CloudId).Do()\n\tif err != nil && project != nil {\n\t\tinstances, err := Sdk.Service.Instances.List(immutable.ProviderConfig().CloudId, immutable.ProviderConfig().Location).Do()\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\n\t\tcount := len(instances.Items)\n\t\tif count > 0 {\n\t\t\tnewResource.Count = count\n\n\t\t\tinstance := instances.Items[0]\n\t\t\tnewResource.Name = instance.Name\n\t\t\tnewResource.CloudID = string(instance.Id)\n\t\t\tnewResource.Size = instance.Kind\n\t\t\tnewResource.Image = r.Image\n\t\t\tnewResource.Location = instance.Zone\n\t\t}\n\t}\n\n\tnewResource.BootstrapScripts = r.ServerPool.BootstrapScripts\n\tnewResource.SSHFingerprint = immutable.ProviderConfig().SSH.PublicKeyFingerprint\n\tnewResource.Name = r.Name\n\tr.CachedActual = newResource\n\treturn immutable, newResource, nil\n}\n```"
            ],
            [
                5,
                "go",
                "Parse",
                "```go\nfunc (p *Parser) Parse(args []string) error {\n\t// If -h or --help were specified then print usage\n\tfor _, arg := range args {\n\t\tif arg == \"-h\" || arg == \"--help\" {\n\t\t\treturn ErrHelp\n\t\t}\n\t\tif arg == \"--version\" {\n\t\t\treturn ErrVersion\n\t\t}\n\t\tif arg == \"--\" {\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// Process all command line arguments\n\treturn process(p.specs, args)\n}\n```"
            ],
            [
                681,
                "go",
                "OpPut",
                "```go\nfunc OpPut(key, val string, opts ...OpOption) Op {\n\tret := Op{t: tPut, key: []byte(key), val: []byte(val)}\n\tret.applyOpts(opts)\n\tswitch {\n\tcase ret.end != nil:\n\t\tpanic(\"unexpected range in put\")\n\tcase ret.limit != 0:\n\t\tpanic(\"unexpected limit in put\")\n\tcase ret.rev != 0:\n\t\tpanic(\"unexpected revision in put\")\n\tcase ret.sort != nil:\n\t\tpanic(\"unexpected sort in put\")\n\tcase ret.serializable:\n\t\tpanic(\"unexpected serializable in put\")\n\tcase ret.countOnly:\n\t\tpanic(\"unexpected countOnly in put\")\n\tcase ret.minModRev != 0, ret.maxModRev != 0:\n\t\tpanic(\"unexpected mod revision filter in put\")\n\tcase ret.minCreateRev != 0, ret.maxCreateRev != 0:\n\t\tpanic(\"unexpected create revision filter in put\")\n\tcase ret.filterDelete, ret.filterPut:\n\t\tpanic(\"unexpected filter in put\")\n\tcase ret.createdNotify:\n\t\tpanic(\"unexpected createdNotify in put\")\n\t}\n\treturn ret\n}\n```"
            ],
            [
                469,
                "go",
                "StreamServerInterceptor",
                "```go\nfunc StreamServerInterceptor(log ttnlog.Interface) grpc.StreamServerInterceptor {\n\treturn func(srv interface{}, ss grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) (err error) {\n\t\tlog := getLog(log).WithField(\"method\", info.FullMethod)\n\t\tlog = log.WithFields(FieldsFromIncomingContext(ss.Context()))\n\t\tstart := time.Now()\n\t\tlog.Debug(\"rpc-server: stream starting\")\n\t\terr = handler(srv, ss)\n\t\tlog = log.WithField(\"duration\", time.Since(start))\n\t\tif err != nil {\n\t\t\tif err == context.Canceled || grpc.Code(err) == codes.Canceled {\n\t\t\t\tlog.Debug(\"rpc-server: stream canceled\")\n\t\t\t\treturn\n\t\t\t}\n\t\t\tlog.WithError(err).Debug(\"rpc-server: stream failed\")\n\t\t\treturn\n\t\t}\n\t\tlog.Debug(\"rpc-server: stream done\")\n\t\treturn\n\t}\n}\n```"
            ],
            [
                2,
                "go",
                "Ptr",
                "```go\nfunc (t Time) Ptr() *time.Time {\n\tif !t.Valid {\n\t\treturn nil\n\t}\n\treturn &t.Time\n}\n```"
            ],
            [
                693,
                "go",
                "session",
                "```go\nfunc session(ctx *Context) {\n\tvar cookie *http.Cookie\n\tcookies := ctx.Request.Cookies()\n\tif len(cookies) == 0 {\n\t\tctx.Next()\n\t\treturn\n\t}\n\n\tfor _, v := range cookies {\n\t\tif v.Name == httpCookie.Name {\n\t\t\tcookie = v\n\t\t\tbreak\n\t\t}\n\t}\n\tif cookie == nil {\n\t\tctx.Next()\n\t\treturn\n\t}\n\n\tsid := cookie.Value\n\tstore, err := provider.Get(sid)\n\tif err != nil {\n\t\tlog.WithFields(log.Fields{\"sid\": sid, \"err\": err}).Warnln(\"\u8bfb\u53d6session\u5931\u8d25\")\n\t\tctx.Fail(err)\n\t\treturn\n\t}\n\tif len(store.Values) > 0 {\n\t\t//err := provider.refresh(store)\n\t\terr := provider.UpExpire(sid)\n\t\tif err != nil {\n\t\t\tlog.WithFields(log.Fields{\"sid\": sid, \"err\": err}).Warnln(\"\u5237\u65b0session\u5931\u8d25\")\n\t\t\tctx.Fail(err)\n\t\t\treturn\n\t\t}\n\t\tcookie := httpCookie\n\t\tcookie.Value = sid\n\t\tctx.Data[\"session\"] = store\n\t\tctx.Data[\"Sid\"] = sid\n\t\thttp.SetCookie(ctx.ResponseWriter, &cookie)\n\t}\n\n\tctx.Next()\n}\n```"
            ],
            [
                189,
                "go",
                "CreateTeam",
                "```go\nfunc (c *Client) CreateTeam(org string, team Team) (*Team, error) {\n\tc.log(\"CreateTeam\", org, team)\n\tif team.Name == \"\" {\n\t\treturn nil, errors.New(\"team.Name must be non-empty\")\n\t}\n\tif c.fake {\n\t\treturn nil, nil\n\t} else if c.dry {\n\t\treturn &team, nil\n\t}\n\tpath := fmt.Sprintf(\"/orgs/%s/teams\", org)\n\tvar retTeam Team\n\t_, err := c.request(&request{\n\t\tmethod: http.MethodPost,\n\t\tpath:   path,\n\t\t// This accept header enables the nested teams preview.\n\t\t// https://developer.github.com/changes/2017-08-30-preview-nested-teams/\n\t\taccept:      \"application/vnd.github.hellcat-preview+json\",\n\t\trequestBody: &team,\n\t\texitCodes:   []int{201},\n\t}, &retTeam)\n\treturn &retTeam, err\n}\n```"
            ],
            [
                531,
                "go",
                "GetContextError",
                "```go\nfunc GetContextError(err error) error {\n\tif err == context.DeadlineExceeded {\n\t\treturn ErrTimeout\n\t}\n\tif err == context.Canceled {\n\t\treturn ErrRequestCancelled\n\t}\n\treturn err\n}\n```"
            ]
        ]
    },
    "Test-go MRR (bs=1,000)": 0.11950799377025137,
    "Examples-FuncNameTest-go": {
        "_type": "table",
        "columns": [
            "Rank",
            "Language",
            "Query",
            "Code"
        ],
        "data": [
            [
                687,
                "go",
                "leaseTimeToLiveCommandFunc",
                "```go\nfunc leaseTimeToLiveCommandFunc(cmd *cobra.Command, args []string) {\n\tif len(args) != 1 {\n\t\tExitWithError(ExitBadArgs, fmt.Errorf(\"lease timetolive command needs lease ID as argument\"))\n\t}\n\tvar opts []v3.LeaseOption\n\tif timeToLiveKeys {\n\t\topts = append(opts, v3.WithAttachedKeys())\n\t}\n\tresp, rerr := mustClientFromCmd(cmd).TimeToLive(context.TODO(), leaseFromArgs(args[0]), opts...)\n\tif rerr != nil {\n\t\tExitWithError(ExitBadConnection, rerr)\n\t}\n\tdisplay.TimeToLive(*resp, timeToLiveKeys)\n}\n```"
            ],
            [
                514,
                "go",
                "Visit",
                "```go\nfunc (m visitedPointers) Visit(v reflect.Value) bool {\n\tp := value.PointerOf(v)\n\t_, visited := m[p]\n\tm[p] = struct{}{}\n\treturn visited\n}\n```"
            ],
            [
                171,
                "go",
                "Environ",
                "```go\nfunc Environ() []string {\n\ts := make([]string, 0)\n\n\tFlagSet.VisitAll(func(f *flag.Flag) {\n\t\tif value, ok := getenv(f.Name); ok {\n\t\t\ts = append(s, flagAsEnv(f.Name)+\"=\"+value)\n\t\t}\n\t})\n\n\treturn s\n}\n```"
            ],
            [
                193,
                "go",
                "Validate",
                "```go\nfunc Validate(data []byte, expected []byte) error {\n\n\tactual := Checksum(data)\n\n\t// validate the provided checksum against the calculated\n\tif !bytes.Equal(actual, expected) {\n\t\treturn ErrInvalidChecksum\n\t}\n\n\treturn nil\n}\n```"
            ],
            [
                935,
                "go",
                "MonitoringMetricLocator",
                "```go\nfunc (api *API) MonitoringMetricLocator(href string) *MonitoringMetricLocator {\n\treturn &MonitoringMetricLocator{Href(href), api}\n}\n```"
            ],
            [
                349,
                "go",
                "PutFileWriter",
                "```go\nfunc (c *putFileClient) PutFileWriter(repoName, commitID, path string) (io.WriteCloser, error) {\n\treturn c.newPutFileWriteCloser(repoName, commitID, path, pfs.Delimiter_NONE, 0, 0, 0, nil)\n}\n```"
            ],
            [
                456,
                "go",
                "UserPreferenceLocator",
                "```go\nfunc (api *API) UserPreferenceLocator(href string) *UserPreferenceLocator {\n\treturn &UserPreferenceLocator{Href(href), api}\n}\n```"
            ],
            [
                138,
                "go",
                "defaultArguments",
                "```go\nfunc defaultArguments(t *buildv1alpha1.TemplateInstantiationSpec, rawEnv map[string]string) {\n\tkeys := sets.String{}\n\tfor _, arg := range t.Arguments {\n\t\tkeys.Insert(arg.Name)\n\t}\n\tfor _, k := range sets.StringKeySet(rawEnv).List() { // deterministic ordering\n\t\tif keys.Has(k) {\n\t\t\tcontinue\n\t\t}\n\t\tt.Arguments = append(t.Arguments, buildv1alpha1.ArgumentSpec{Name: k, Value: rawEnv[k]})\n\t}\n}\n```"
            ],
            [
                2,
                "go",
                "ParseURL",
                "```go\nfunc ParseURL(urlStr string) (*ObjectStoreURL, error) {\n\turl, err := url.Parse(urlStr)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error parsing url %v: %v\", urlStr, err)\n\t}\n\tswitch url.Scheme {\n\tcase \"s3\", \"gcs\", \"gs\", \"local\":\n\t\treturn &ObjectStoreURL{\n\t\t\tStore:  url.Scheme,\n\t\t\tBucket: url.Host,\n\t\t\tObject: strings.Trim(url.Path, \"/\"),\n\t\t}, nil\n\tcase \"as\", \"wasb\":\n\t\t// In Azure, the first part of the path is the container name.\n\t\tparts := strings.Split(strings.Trim(url.Path, \"/\"), \"/\")\n\t\tif len(parts) < 1 {\n\t\t\treturn nil, fmt.Errorf(\"malformed Azure URI: %v\", urlStr)\n\t\t}\n\t\treturn &ObjectStoreURL{\n\t\t\tStore:  url.Scheme,\n\t\t\tBucket: parts[0],\n\t\t\tObject: strings.Trim(path.Join(parts[1:]...), \"/\"),\n\t\t}, nil\n\t}\n\treturn nil, fmt.Errorf(\"unrecognized object store: %s\", url.Scheme)\n}\n```"
            ],
            [
                354,
                "go",
                "SetupCertificates",
                "```go\nfunc SetupCertificates(dir string, tlsc *tls.Config) error {\n\tlogrus.Debugf(\"Looking for TLS certificates and private keys in %s\", dir)\n\tfs, err := ioutil.ReadDir(dir)\n\tif err != nil {\n\t\tif os.IsNotExist(err) {\n\t\t\treturn nil\n\t\t}\n\t\tif os.IsPermission(err) {\n\t\t\tlogrus.Debugf(\"Skipping scan of %s due to permission error: %v\", dir, err)\n\t\t\treturn nil\n\t\t}\n\t\treturn err\n\t}\n\n\tfor _, f := range fs {\n\t\tfullPath := filepath.Join(dir, f.Name())\n\t\tif strings.HasSuffix(f.Name(), \".crt\") {\n\t\t\tlogrus.Debugf(\" crt: %s\", fullPath)\n\t\t\tdata, err := ioutil.ReadFile(fullPath)\n\t\t\tif err != nil {\n\t\t\t\tif os.IsNotExist(err) {\n\t\t\t\t\t// Dangling symbolic link?\n\t\t\t\t\t// Race with someone who deleted the\n\t\t\t\t\t// file after we read the directory's\n\t\t\t\t\t// list of contents?\n\t\t\t\t\tlogrus.Warnf(\"error reading certificate %q: %v\", fullPath, err)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tif tlsc.RootCAs == nil {\n\t\t\t\tsystemPool, err := tlsconfig.SystemCertPool()\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn errors.Wrap(err, \"unable to get system cert pool\")\n\t\t\t\t}\n\t\t\t\ttlsc.RootCAs = systemPool\n\t\t\t}\n\t\t\ttlsc.RootCAs.AppendCertsFromPEM(data)\n\t\t}\n\t\tif strings.HasSuffix(f.Name(), \".cert\") {\n\t\t\tcertName := f.Name()\n\t\t\tkeyName := certName[:len(certName)-5] + \".key\"\n\t\t\tlogrus.Debugf(\" cert: %s\", fullPath)\n\t\t\tif !hasFile(fs, keyName) {\n\t\t\t\treturn errors.Errorf(\"missing key %s for client certificate %s. Note that CA certificates should use the extension .crt\", keyName, certName)\n\t\t\t}\n\t\t\tcert, err := tls.LoadX509KeyPair(filepath.Join(dir, certName), filepath.Join(dir, keyName))\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\ttlsc.Certificates = append(tlsc.Certificates, cert)\n\t\t}\n\t\tif strings.HasSuffix(f.Name(), \".key\") {\n\t\t\tkeyName := f.Name()\n\t\t\tcertName := keyName[:len(keyName)-4] + \".cert\"\n\t\t\tlogrus.Debugf(\" key: %s\", fullPath)\n\t\t\tif !hasFile(fs, certName) {\n\t\t\t\treturn errors.Errorf(\"missing client certificate %s for key %s\", certName, keyName)\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\n```"
            ],
            [
                57,
                "go",
                "NewOutgoingMessage",
                "```go\nfunc (api *TelegramBotAPI) NewOutgoingMessage(recipient Recipient, text string) *OutgoingMessage {\n\treturn &OutgoingMessage{\n\t\toutgoingMessageBase: outgoingMessageBase{\n\t\t\toutgoingBase: outgoingBase{\n\t\t\t\tapi:       api,\n\t\t\t\tRecipient: recipient,\n\t\t\t},\n\t\t},\n\t\tText:      text,\n\t\tParseMode: ModeDefault,\n\t}\n}\n```"
            ],
            [
                201,
                "go",
                "releasePreviousFragment",
                "```go\nfunc (r *reqResReader) releasePreviousFragment() {\n\tfragment := r.previousFragment\n\tr.previousFragment = nil\n\tif fragment != nil {\n\t\tfragment.done()\n\t}\n}\n```"
            ],
            [
                219,
                "go",
                "Pull",
                "```go\nfunc (r *Release) Pull(releaseLocation string) (filename string, err error) {\n\tu, uerr := url.Parse(releaseLocation)\n\tif uerr != nil || !(u.Scheme == \"http\" || u.Scheme == \"https\") {\n\t\t// assume a local file, ensure it exists\n\t\tif _, ferr := os.Stat(releaseLocation); os.IsNotExist(ferr) {\n\t\t\terr = fmt.Errorf(\"Could not pull %s. The file doesn't exist or isn't a valid http(s) URL\", releaseLocation)\n\t\t\treturn\n\t\t}\n\t\tfilename = releaseLocation\n\t} else {\n\t\t// remote file, ensure its in the local cache\n\t\tfilename = r.CacheDir + \"/\" + path.Base(releaseLocation)\n\t\tif _, err = os.Stat(filename); os.IsNotExist(err) {\n\t\t\tfmt.Println(\"Could not find release in local cache. Downloading now.\")\n\t\t\terr = r.download(releaseLocation, filename)\n\t\t}\n\t}\n\treturn\n}\n```"
            ],
            [
                901,
                "go",
                "HTTP",
                "```go\nfunc (s *Sentinel) HTTP(listener net.Listener, handler http.Handler, opts ...ServerOption) error {\n\ts.Lock()\n\tdefer s.Unlock()\n\n\tif s.started {\n\t\treturn ErrAlreadyStarted\n\t}\n\n\tvar err error\n\n\t// create server and apply options\n\tserver := &http.Server{\n\t\tHandler: handler,\n\t}\n\tfor _, o := range opts {\n\t\tif err = o(server); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\t// register server\n\treturn s.Register(func() error {\n\t\treturn server.Serve(listener)\n\t}, server.Shutdown, IgnoreServerClosed, IgnoreNetOpError)\n}\n```"
            ],
            [
                465,
                "go",
                "Release",
                "```go\nfunc (writer *VideoWriter) Release() {\n\twriter_c := (*C.CvVideoWriter)(writer)\n\tC.cvReleaseVideoWriter(&writer_c)\n}\n```"
            ],
            [
                9,
                "go",
                "WithIncludeCommandLineAPI",
                "```go\nfunc (p RunScriptParams) WithIncludeCommandLineAPI(includeCommandLineAPI bool) *RunScriptParams {\n\tp.IncludeCommandLineAPI = includeCommandLineAPI\n\treturn &p\n}\n```"
            ],
            [
                574,
                "go",
                "MarshalJSON",
                "```go\nfunc (v RequestDatabaseParams) MarshalJSON() ([]byte, error) {\n\tw := jwriter.Writer{}\n\teasyjsonC5a4559bEncodeGithubComChromedpCdprotoIndexeddb1(&w, v)\n\treturn w.Buffer.BuildBytes(), w.Error\n}\n```"
            ],
            [
                594,
                "go",
                "Create",
                "```go\nfunc (s *platformService) Create(opts appTypes.PlatformOptions) error {\n\tp := appTypes.Platform{Name: opts.Name}\n\tif err := s.validate(p); err != nil {\n\t\treturn err\n\t}\n\terr := s.storage.Insert(p)\n\tif err != nil {\n\t\treturn err\n\t}\n\topts.ImageName, err = servicemanager.PlatformImage.NewImage(opts.Name)\n\tif err != nil {\n\t\treturn err\n\t}\n\terr = builder.PlatformAdd(opts)\n\tif err != nil {\n\t\tif imgErr := servicemanager.PlatformImage.DeleteImages(opts.Name); imgErr != nil {\n\t\t\tlog.Errorf(\"unable to remove platform images: %s\", imgErr)\n\t\t}\n\t\tdbErr := s.storage.Delete(p)\n\t\tif dbErr != nil {\n\t\t\treturn tsuruErrors.NewMultiError(\n\t\t\t\terrors.Wrapf(dbErr, \"unable to rollback platform add\"),\n\t\t\t\terrors.Wrapf(err, \"original platform add error\"),\n\t\t\t)\n\t\t}\n\t\treturn err\n\t}\n\treturn servicemanager.PlatformImage.AppendImage(opts.Name, opts.ImageName)\n}\n```"
            ],
            [
                55,
                "go",
                "WithFormat",
                "```go\nfunc (p CaptureSnapshotParams) WithFormat(format CaptureSnapshotFormat) *CaptureSnapshotParams {\n\tp.Format = format\n\treturn &p\n}\n```"
            ],
            [
                5,
                "go",
                "EscapeHTML",
                "```go\nfunc EscapeHTML(s string) string {\n\tif Verbose {\n\t\tfmt.Println(\"Use html.EscapeString instead of EscapeHTML\")\n\t}\n\treturn html.EscapeString(s)\n}\n```"
            ],
            [
                763,
                "go",
                "InspectDatum",
                "```go\nfunc (c APIClient) InspectDatum(jobID string, datumID string) (*pps.DatumInfo, error) {\n\tdatumInfo, err := c.PpsAPIClient.InspectDatum(\n\t\tc.Ctx(),\n\t\t&pps.InspectDatumRequest{\n\t\t\tDatum: &pps.Datum{\n\t\t\t\tID:  datumID,\n\t\t\t\tJob: NewJob(jobID),\n\t\t\t},\n\t\t},\n\t)\n\tif err != nil {\n\t\treturn nil, grpcutil.ScrubGRPC(err)\n\t}\n\treturn datumInfo, nil\n}\n```"
            ],
            [
                244,
                "go",
                "bundle",
                "```go\nfunc (s *app) bundle(tarFile string) (err error) {\n\tvar out io.Writer\n\tif tarFile == \"-\" {\n\t\tout = os.Stdout\n\t} else {\n\t\tf, err := os.Create(tarFile)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer func() {\n\t\t\tif cerr := f.Close(); err == nil {\n\t\t\t\terr = cerr\n\t\t\t}\n\t\t}()\n\t\tout = f\n\t}\n\ttw := tar.NewWriter(out)\n\n\tfor srcDir, importName := range s.imports {\n\t\tdstDir := \"_gopath/src/\" + importName\n\t\tif err = copyTree(tw, dstDir, srcDir); err != nil {\n\t\t\treturn fmt.Errorf(\"unable to copy directory %v to %v: %v\", srcDir, dstDir, err)\n\t\t}\n\t}\n\tif err := copyTree(tw, \".\", *rootDir); err != nil {\n\t\treturn fmt.Errorf(\"unable to copy root directory to /app: %v\", err)\n\t}\n\tif !s.hasMain {\n\t\tif err := synthesizeMain(tw, s.appFiles); err != nil {\n\t\t\treturn fmt.Errorf(\"unable to synthesize new main func: %v\", err)\n\t\t}\n\t}\n\n\tif err := tw.Close(); err != nil {\n\t\treturn fmt.Errorf(\"unable to close tar file %v: %v\", tarFile, err)\n\t}\n\treturn nil\n}\n```"
            ],
            [
                104,
                "go",
                "CompareInt",
                "```go\nfunc CompareInt(this, that unsafe.Pointer) int {\n\tthisItem := (*intKeyItem)(this)\n\tthatItem := (*intKeyItem)(that)\n\treturn int(*thisItem - *thatItem)\n}\n```"
            ],
            [
                99,
                "go",
                "replayWAL",
                "```go\nfunc (rc *raftNode) replayWAL() *wal.WAL {\n\tlog.Printf(\"replaying WAL of member %d\", rc.id)\n\tsnapshot := rc.loadSnapshot()\n\tw := rc.openWAL(snapshot)\n\t_, st, ents, err := w.ReadAll()\n\tif err != nil {\n\t\tlog.Fatalf(\"raftexample: failed to read WAL (%v)\", err)\n\t}\n\trc.raftStorage = raft.NewMemoryStorage()\n\tif snapshot != nil {\n\t\trc.raftStorage.ApplySnapshot(*snapshot)\n\t}\n\trc.raftStorage.SetHardState(st)\n\n\t// append to storage so raft starts at the right place in log\n\trc.raftStorage.Append(ents)\n\t// send nil once lastIndex is published so client knows commit channel is current\n\tif len(ents) > 0 {\n\t\trc.lastIndex = ents[len(ents)-1].Index\n\t} else {\n\t\trc.commitC <- nil\n\t}\n\treturn w\n}\n```"
            ],
            [
                189,
                "go",
                "prepareReviewersBody",
                "```go\nfunc prepareReviewersBody(logins []string, org string) (map[string][]string, error) {\n\tbody := map[string][]string{}\n\tvar errors []error\n\tfor _, login := range logins {\n\t\tmat := teamRe.FindStringSubmatch(login)\n\t\tif mat == nil {\n\t\t\tif _, exists := body[\"reviewers\"]; !exists {\n\t\t\t\tbody[\"reviewers\"] = []string{}\n\t\t\t}\n\t\t\tbody[\"reviewers\"] = append(body[\"reviewers\"], login)\n\t\t} else if mat[1] == org {\n\t\t\tif _, exists := body[\"team_reviewers\"]; !exists {\n\t\t\t\tbody[\"team_reviewers\"] = []string{}\n\t\t\t}\n\t\t\tbody[\"team_reviewers\"] = append(body[\"team_reviewers\"], mat[2])\n\t\t} else {\n\t\t\terrors = append(errors, fmt.Errorf(\"team %s is not part of %s org\", login, org))\n\t\t}\n\t}\n\treturn body, errorutil.NewAggregate(errors...)\n}\n```"
            ],
            [
                208,
                "go",
                "StopJob",
                "```go\nfunc (c APIClient) StopJob(jobID string) error {\n\t_, err := c.PpsAPIClient.StopJob(\n\t\tc.Ctx(),\n\t\t&pps.StopJobRequest{\n\t\t\tJob: NewJob(jobID),\n\t\t},\n\t)\n\treturn grpcutil.ScrubGRPC(err)\n}\n```"
            ],
            [
                126,
                "go",
                "ContainerToArgs",
                "```go\nfunc ContainerToArgs(container *Container) ContainerArgs {\n\targs := ContainerArgs{\n\t\tID:           container.ID,\n\t\tProject:      container.Project,\n\t\tName:         container.Name,\n\t\tNode:         container.Node,\n\t\tCtype:        ContainerType(container.Type),\n\t\tArchitecture: container.Architecture,\n\t\tEphemeral:    container.Ephemeral,\n\t\tCreationDate: container.CreationDate,\n\t\tStateful:     container.Stateful,\n\t\tLastUsedDate: container.LastUseDate,\n\t\tDescription:  container.Description,\n\t\tConfig:       container.Config,\n\t\tDevices:      container.Devices,\n\t\tProfiles:     container.Profiles,\n\t\tExpiryDate:   container.ExpiryDate,\n\t}\n\n\tif args.Devices == nil {\n\t\targs.Devices = types.Devices{}\n\t}\n\n\treturn args\n}\n```"
            ],
            [
                315,
                "go",
                "SyncConfig",
                "```go\nfunc (r *Ranch) SyncConfig(config string) error {\n\tresources, err := ParseConfig(config)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif err := r.Storage.SyncResources(resources); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n```"
            ],
            [
                23,
                "go",
                "OCSPServer",
                "```go\nfunc OCSPServer(value ...string) Option {\n\treturn func(c *configuration) {\n\t\tc.ocspServer = append(c.ocspServer, value...)\n\t}\n}\n```"
            ],
            [
                850,
                "go",
                "Level",
                "```go\nfunc (l *slog) Level() Level {\n\treturn Level(atomic.LoadUint32((*uint32)(&l.lvl)))\n}\n```"
            ],
            [
                137,
                "go",
                "Get",
                "```go\nfunc (c *apps) Get(name string, options meta_v1.GetOptions) (result *v1.App, err error) {\n\tresult = &v1.App{}\n\terr = c.client.Get().\n\t\tNamespace(c.ns).\n\t\tResource(\"apps\").\n\t\tName(name).\n\t\tVersionedParams(&options, scheme.ParameterCodec).\n\t\tDo().\n\t\tInto(result)\n\treturn\n}\n```"
            ],
            [
                103,
                "go",
                "GetCols",
                "```go\nfunc GetCols(arr Arr, submat *Mat, start_col, end_col int) *Mat {\n\tmat_new := C.cvGetCols(\n\t\tunsafe.Pointer(arr),\n\t\t(*C.CvMat)(submat),\n\t\tC.int(start_col),\n\t\tC.int(end_col),\n\t)\n\treturn (*Mat)(mat_new)\n}\n```"
            ],
            [
                13,
                "go",
                "RegisterCommands",
                "```go\nfunc RegisterCommands(registrar rsapi.APICommandRegistrar) {\n\tcommandValues = rsapi.ActionCommands{}\n\tregistrar.RegisterActionCommands(APIName, GenMetadata, commandValues)\n}\n```"
            ],
            [
                126,
                "go",
                "RunAnnotated",
                "```go\nfunc RunAnnotated(task Task, description string, symbol string, options ...interface{}) error {\n\tdoneCh := make(chan bool)\n\terrCh := make(chan error)\n\n\tl := logger.Log\n\tt := DefaultTicker\n\n\tfor _, o := range options {\n\t\tif value, ok := o.(logger.Logger); ok {\n\t\t\tl = value\n\t\t} else if value, ok := o.(*time.Ticker); ok {\n\t\t\tt = value\n\t\t}\n\t}\n\n\tgo func() {\n\t\terrCh <- task()\n\t}()\n\n\tl(description)\n\tlogActivity(symbol, l, t, doneCh)\n\n\terr := <-errCh\n\tdoneCh <- true\n\n\treturn err\n}\n```"
            ],
            [
                3,
                "go",
                "SetFlagsFromEnv",
                "```go\nfunc SetFlagsFromEnv(prefix string, fs *flag.FlagSet) error {\n\tvar err error\n\talreadySet := make(map[string]bool)\n\tfs.Visit(func(f *flag.Flag) {\n\t\talreadySet[FlagToEnv(prefix, f.Name)] = true\n\t})\n\tusedEnvKey := make(map[string]bool)\n\tfs.VisitAll(func(f *flag.Flag) {\n\t\tif serr := setFlagFromEnv(fs, prefix, f.Name, usedEnvKey, alreadySet, true); serr != nil {\n\t\t\terr = serr\n\t\t}\n\t})\n\tverifyEnv(prefix, usedEnvKey, alreadySet)\n\treturn err\n}\n```"
            ],
            [
                608,
                "go",
                "step2b",
                "```go\nfunc step2b(word *snowballword.SnowballWord) bool {\n\tsuffix, suffixRunes := word.FirstSuffixIn(word.RVstart, len(word.RS),\n\t\t\"i\u00e9semos\", \"i\u00e9ramos\", \"ir\u00edamos\", \"er\u00edamos\", \"ar\u00edamos\", \"\u00e1semos\",\n\t\t\"\u00e1ramos\", \"\u00e1bamos\", \"isteis\", \"ir\u00edais\", \"iremos\", \"ieseis\",\n\t\t\"ierais\", \"er\u00edais\", \"eremos\", \"asteis\", \"ar\u00edais\", \"aremos\",\n\t\t\"\u00edamos\", \"ir\u00edas\", \"ir\u00edan\", \"ir\u00e9is\", \"ieses\", \"iesen\", \"ieron\",\n\t\t\"ieras\", \"ieran\", \"iendo\", \"er\u00edas\", \"er\u00edan\", \"er\u00e9is\", \"aseis\",\n\t\t\"ar\u00edas\", \"ar\u00edan\", \"ar\u00e9is\", \"arais\", \"abais\", \"\u00edais\", \"iste\",\n\t\t\"ir\u00eda\", \"ir\u00e1s\", \"ir\u00e1n\", \"imos\", \"iese\", \"iera\", \"idos\", \"idas\",\n\t\t\"er\u00eda\", \"er\u00e1s\", \"er\u00e1n\", \"aste\", \"ases\", \"asen\", \"ar\u00eda\", \"ar\u00e1s\",\n\t\t\"ar\u00e1n\", \"aron\", \"aras\", \"aran\", \"ando\", \"amos\", \"ados\", \"adas\",\n\t\t\"abas\", \"aban\", \"\u00edas\", \"\u00edan\", \"\u00e9is\", \"\u00e1is\", \"ir\u00e9\", \"ir\u00e1\", \"ido\",\n\t\t\"ida\", \"er\u00e9\", \"er\u00e1\", \"emos\", \"ase\", \"ar\u00e9\", \"ar\u00e1\", \"ara\", \"ado\",\n\t\t\"ada\", \"aba\", \"\u00eds\", \"\u00eda\", \"i\u00f3\", \"ir\", \"id\", \"es\", \"er\", \"en\",\n\t\t\"ed\", \"as\", \"ar\", \"an\", \"ad\",\n\t)\n\tswitch suffix {\n\tcase \"\":\n\t\treturn false\n\n\tcase \"en\", \"es\", \"\u00e9is\", \"emos\":\n\n\t\t// Delete, and if preceded by gu delete the u (the gu need not be in RV)\n\t\tword.RemoveLastNRunes(len(suffixRunes))\n\t\tguSuffix, _ := word.FirstSuffix(\"gu\")\n\t\tif guSuffix != \"\" {\n\t\t\tword.RemoveLastNRunes(1)\n\t\t}\n\n\tdefault:\n\n\t\t// Delete\n\t\tword.RemoveLastNRunes(len(suffixRunes))\n\t}\n\treturn true\n}\n```"
            ],
            [
                403,
                "go",
                "provisionerList",
                "```go\nfunc provisionerList(w http.ResponseWriter, r *http.Request, t auth.Token) (err error) {\n\tallowed := permission.Check(t, permission.PermClusterRead)\n\tif !allowed {\n\t\treturn permission.ErrUnauthorized\n\t}\n\tprovs, err := provision.Registry()\n\tif err != nil {\n\t\treturn err\n\t}\n\tinfo := make([]provisionerInfo, len(provs))\n\tfor i, p := range provs {\n\t\tinfo[i].Name = p.GetName()\n\t\tif clusterProv, ok := p.(cluster.ClusteredProvisioner); ok {\n\t\t\tinfo[i].ClusterHelp = clusterProv.ClusterHelp()\n\t\t}\n\t}\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\treturn json.NewEncoder(w).Encode(info)\n}\n```"
            ],
            [
                163,
                "go",
                "AddMulti",
                "```go\nfunc AddMulti(c context.Context, tasks []*Task, queueName string) ([]*Task, error) {\n\treq := &pb.TaskQueueBulkAddRequest{\n\t\tAddRequest: make([]*pb.TaskQueueAddRequest, len(tasks)),\n\t}\n\tme, any := make(appengine.MultiError, len(tasks)), false\n\tfor i, t := range tasks {\n\t\treq.AddRequest[i], me[i] = newAddReq(c, t, queueName)\n\t\tany = any || me[i] != nil\n\t}\n\tif any {\n\t\treturn nil, me\n\t}\n\tres := &pb.TaskQueueBulkAddResponse{}\n\tif err := internal.Call(c, \"taskqueue\", \"BulkAdd\", req, res); err != nil {\n\t\treturn nil, err\n\t}\n\tif len(res.Taskresult) != len(tasks) {\n\t\treturn nil, errors.New(\"taskqueue: server error\")\n\t}\n\ttasksOut := make([]*Task, len(tasks))\n\tfor i, tr := range res.Taskresult {\n\t\ttasksOut[i] = new(Task)\n\t\t*tasksOut[i] = *tasks[i]\n\t\ttasksOut[i].Method = tasksOut[i].method()\n\t\tif tasksOut[i].Name == \"\" {\n\t\t\ttasksOut[i].Name = string(tr.ChosenTaskName)\n\t\t}\n\t\tif *tr.Result != pb.TaskQueueServiceError_OK {\n\t\t\tif alreadyAddedErrors[*tr.Result] {\n\t\t\t\tme[i] = ErrTaskAlreadyAdded\n\t\t\t} else {\n\t\t\t\tme[i] = &internal.APIError{\n\t\t\t\t\tService: \"taskqueue\",\n\t\t\t\t\tCode:    int32(*tr.Result),\n\t\t\t\t}\n\t\t\t}\n\t\t\tany = true\n\t\t}\n\t}\n\tif any {\n\t\treturn tasksOut, me\n\t}\n\treturn tasksOut, nil\n}\n```"
            ],
            [
                971,
                "go",
                "RaftNodeAddress",
                "```go\nfunc (n *NodeTx) RaftNodeAddress(id int64) (string, error) {\n\tstmt := \"SELECT address FROM raft_nodes WHERE id=?\"\n\taddresses, err := query.SelectStrings(n.tx, stmt, id)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tswitch len(addresses) {\n\tcase 0:\n\t\treturn \"\", ErrNoSuchObject\n\tcase 1:\n\t\treturn addresses[0], nil\n\tdefault:\n\t\t// This should never happen since we have a UNIQUE constraint\n\t\t// on the raft_nodes.id column.\n\t\treturn \"\", fmt.Errorf(\"more than one match found\")\n\t}\n}\n```"
            ],
            [
                50,
                "go",
                "GetBalancedNic",
                "```go\nfunc (c *Client) GetBalancedNic(dcid, lbalid, balnicid string) (*Nic, error) {\n\turl := balnicPath(dcid, lbalid, balnicid) + `?depth=` + c.client.depth + `&pretty=` + strconv.FormatBool(c.client.pretty)\n\tret := &Nic{}\n\terr := c.client.Get(url, ret, http.StatusOK)\n\treturn ret, err\n}\n```"
            ],
            [
                350,
                "go",
                "UnmarshalJSON",
                "```go\nfunc (v *TextBoxSnapshot) UnmarshalJSON(data []byte) error {\n\tr := jlexer.Lexer{Data: data}\n\teasyjsonC5a4559bDecodeGithubComChromedpCdprotoDomsnapshot(&r, v)\n\treturn r.Error()\n}\n```"
            ],
            [
                1,
                "go",
                "NewCheckWithOptions",
                "```go\nfunc NewCheckWithOptions(options CheckOptions) *Check {\n\tc := NewCheck()\n\tif options.StatusPolicy != nil {\n\t\tc.statusPolicy = options.StatusPolicy\n\t}\n\treturn c\n}\n```"
            ],
            [
                80,
                "go",
                "Actual",
                "```go\nfunc (r *InstanceGroup) Actual(immutable *cluster.Cluster) (*cluster.Cluster, cloud.Resource, error) {\n\tlogger.Debug(\"instanceGroup.Actual\")\n\tif r.CachedActual != nil {\n\t\tlogger.Debug(\"Using cached instance [actual]\")\n\t\treturn immutable, r.CachedActual, nil\n\t}\n\tnewResource := &InstanceGroup{\n\t\tShared: Shared{\n\t\t\tName:    r.Name,\n\t\t\tCloudID: r.ServerPool.Identifier,\n\t\t},\n\t}\n\n\tproject, err := Sdk.Service.Projects.Get(immutable.ProviderConfig().CloudId).Do()\n\tif err != nil && project != nil {\n\t\tinstances, err := Sdk.Service.Instances.List(immutable.ProviderConfig().CloudId, immutable.ProviderConfig().Location).Do()\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\n\t\tcount := len(instances.Items)\n\t\tif count > 0 {\n\t\t\tnewResource.Count = count\n\n\t\t\tinstance := instances.Items[0]\n\t\t\tnewResource.Name = instance.Name\n\t\t\tnewResource.CloudID = string(instance.Id)\n\t\t\tnewResource.Size = instance.Kind\n\t\t\tnewResource.Image = r.Image\n\t\t\tnewResource.Location = instance.Zone\n\t\t}\n\t}\n\n\tnewResource.BootstrapScripts = r.ServerPool.BootstrapScripts\n\tnewResource.SSHFingerprint = immutable.ProviderConfig().SSH.PublicKeyFingerprint\n\tnewResource.Name = r.Name\n\tr.CachedActual = newResource\n\treturn immutable, newResource, nil\n}\n```"
            ],
            [
                25,
                "go",
                "Parse",
                "```go\nfunc (p *Parser) Parse(args []string) error {\n\t// If -h or --help were specified then print usage\n\tfor _, arg := range args {\n\t\tif arg == \"-h\" || arg == \"--help\" {\n\t\t\treturn ErrHelp\n\t\t}\n\t\tif arg == \"--version\" {\n\t\t\treturn ErrVersion\n\t\t}\n\t\tif arg == \"--\" {\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// Process all command line arguments\n\treturn process(p.specs, args)\n}\n```"
            ],
            [
                773,
                "go",
                "OpPut",
                "```go\nfunc OpPut(key, val string, opts ...OpOption) Op {\n\tret := Op{t: tPut, key: []byte(key), val: []byte(val)}\n\tret.applyOpts(opts)\n\tswitch {\n\tcase ret.end != nil:\n\t\tpanic(\"unexpected range in put\")\n\tcase ret.limit != 0:\n\t\tpanic(\"unexpected limit in put\")\n\tcase ret.rev != 0:\n\t\tpanic(\"unexpected revision in put\")\n\tcase ret.sort != nil:\n\t\tpanic(\"unexpected sort in put\")\n\tcase ret.serializable:\n\t\tpanic(\"unexpected serializable in put\")\n\tcase ret.countOnly:\n\t\tpanic(\"unexpected countOnly in put\")\n\tcase ret.minModRev != 0, ret.maxModRev != 0:\n\t\tpanic(\"unexpected mod revision filter in put\")\n\tcase ret.minCreateRev != 0, ret.maxCreateRev != 0:\n\t\tpanic(\"unexpected create revision filter in put\")\n\tcase ret.filterDelete, ret.filterPut:\n\t\tpanic(\"unexpected filter in put\")\n\tcase ret.createdNotify:\n\t\tpanic(\"unexpected createdNotify in put\")\n\t}\n\treturn ret\n}\n```"
            ],
            [
                537,
                "go",
                "StreamServerInterceptor",
                "```go\nfunc StreamServerInterceptor(log ttnlog.Interface) grpc.StreamServerInterceptor {\n\treturn func(srv interface{}, ss grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) (err error) {\n\t\tlog := getLog(log).WithField(\"method\", info.FullMethod)\n\t\tlog = log.WithFields(FieldsFromIncomingContext(ss.Context()))\n\t\tstart := time.Now()\n\t\tlog.Debug(\"rpc-server: stream starting\")\n\t\terr = handler(srv, ss)\n\t\tlog = log.WithField(\"duration\", time.Since(start))\n\t\tif err != nil {\n\t\t\tif err == context.Canceled || grpc.Code(err) == codes.Canceled {\n\t\t\t\tlog.Debug(\"rpc-server: stream canceled\")\n\t\t\t\treturn\n\t\t\t}\n\t\t\tlog.WithError(err).Debug(\"rpc-server: stream failed\")\n\t\t\treturn\n\t\t}\n\t\tlog.Debug(\"rpc-server: stream done\")\n\t\treturn\n\t}\n}\n```"
            ],
            [
                675,
                "go",
                "Ptr",
                "```go\nfunc (t Time) Ptr() *time.Time {\n\tif !t.Valid {\n\t\treturn nil\n\t}\n\treturn &t.Time\n}\n```"
            ],
            [
                722,
                "go",
                "session",
                "```go\nfunc session(ctx *Context) {\n\tvar cookie *http.Cookie\n\tcookies := ctx.Request.Cookies()\n\tif len(cookies) == 0 {\n\t\tctx.Next()\n\t\treturn\n\t}\n\n\tfor _, v := range cookies {\n\t\tif v.Name == httpCookie.Name {\n\t\t\tcookie = v\n\t\t\tbreak\n\t\t}\n\t}\n\tif cookie == nil {\n\t\tctx.Next()\n\t\treturn\n\t}\n\n\tsid := cookie.Value\n\tstore, err := provider.Get(sid)\n\tif err != nil {\n\t\tlog.WithFields(log.Fields{\"sid\": sid, \"err\": err}).Warnln(\"\u8bfb\u53d6session\u5931\u8d25\")\n\t\tctx.Fail(err)\n\t\treturn\n\t}\n\tif len(store.Values) > 0 {\n\t\t//err := provider.refresh(store)\n\t\terr := provider.UpExpire(sid)\n\t\tif err != nil {\n\t\t\tlog.WithFields(log.Fields{\"sid\": sid, \"err\": err}).Warnln(\"\u5237\u65b0session\u5931\u8d25\")\n\t\t\tctx.Fail(err)\n\t\t\treturn\n\t\t}\n\t\tcookie := httpCookie\n\t\tcookie.Value = sid\n\t\tctx.Data[\"session\"] = store\n\t\tctx.Data[\"Sid\"] = sid\n\t\thttp.SetCookie(ctx.ResponseWriter, &cookie)\n\t}\n\n\tctx.Next()\n}\n```"
            ],
            [
                921,
                "go",
                "CreateTeam",
                "```go\nfunc (c *Client) CreateTeam(org string, team Team) (*Team, error) {\n\tc.log(\"CreateTeam\", org, team)\n\tif team.Name == \"\" {\n\t\treturn nil, errors.New(\"team.Name must be non-empty\")\n\t}\n\tif c.fake {\n\t\treturn nil, nil\n\t} else if c.dry {\n\t\treturn &team, nil\n\t}\n\tpath := fmt.Sprintf(\"/orgs/%s/teams\", org)\n\tvar retTeam Team\n\t_, err := c.request(&request{\n\t\tmethod: http.MethodPost,\n\t\tpath:   path,\n\t\t// This accept header enables the nested teams preview.\n\t\t// https://developer.github.com/changes/2017-08-30-preview-nested-teams/\n\t\taccept:      \"application/vnd.github.hellcat-preview+json\",\n\t\trequestBody: &team,\n\t\texitCodes:   []int{201},\n\t}, &retTeam)\n\treturn &retTeam, err\n}\n```"
            ],
            [
                236,
                "go",
                "GetContextError",
                "```go\nfunc GetContextError(err error) error {\n\tif err == context.DeadlineExceeded {\n\t\treturn ErrTimeout\n\t}\n\tif err == context.Canceled {\n\t\treturn ErrRequestCancelled\n\t}\n\treturn err\n}\n```"
            ]
        ]
    },
    "FuncNameTest-go MRR (bs=1,000)": 0.03447415222380256,
    "Examples-Validation-go": {
        "_type": "table",
        "columns": [
            "Rank",
            "Language",
            "Query",
            "Code"
        ],
        "data": [
            [
                24,
                "go",
                "Start",
                "```go\nfunc (networkBus *NetworkBus) Start() error {\n\tvar err error\n\tservice := networkBus.service\n\tclientService := networkBus.Client.service\n\tserverService := networkBus.Server.service\n\tif !service.started {\n\t\tserver := rpc.NewServer()\n\t\tserver.RegisterName(\"ServerService\", serverService)\n\t\tserver.RegisterName(\"ClientService\", clientService)\n\t\tserver.HandleHTTP(networkBus.path, \"/debug\"+networkBus.path)\n\t\tl, e := net.Listen(\"tcp\", networkBus.address)\n\t\tif e != nil {\n\t\t\terr = fmt.Errorf(\"listen error: %v\", e)\n\t\t}\n\t\tservice.wg.Add(1)\n\t\tgo http.Serve(l, nil)\n\t} else {\n\t\terr = errors.New(\"Server bus already started\")\n\t}\n\treturn err\n}\n```"
            ],
            [
                25,
                "go",
                "Columns",
                "```go\nfunc (r Record) Columns() []string {\n\tcols := []string{}\n\tfor k := range r {\n\t\tcols = append(cols, k)\n\t}\n\tsort.Strings(cols)\n\n\treturn cols\n}\n```"
            ],
            [
                1,
                "go",
                "GetMetadata",
                "```go\nfunc (c *ec2MetadataClientImpl) GetMetadata(path string) (string, error) {\n\treturn c.client.GetMetadata(path)\n}\n```"
            ],
            [
                88,
                "go",
                "Update",
                "```go\nfunc (kb dbKeybase) Update(name, oldpass, newpass string) error {\n\tinfo, err := kb.Get(name)\n\tif err != nil {\n\t\treturn err\n\t}\n\tswitch info.(type) {\n\tcase localInfo:\n\t\tlinfo := info.(localInfo)\n\t\tkey, err := unarmorDecryptPrivKey(linfo.PrivKeyArmor, oldpass)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tkb.writeLocalKey(key, name, newpass)\n\t\treturn nil\n\tdefault:\n\t\treturn fmt.Errorf(\"Locally stored key required\")\n\t}\n}\n```"
            ],
            [
                265,
                "go",
                "ApplicationWindowNew",
                "```go\nfunc ApplicationWindowNew(app *Application) (*ApplicationWindow, error) {\n\tc := C.gtk_application_window_new(app.native())\n\tif c == nil {\n\t\treturn nil, nilPtrErr\n\t}\n\treturn wrapApplicationWindow(glib.Take(unsafe.Pointer(c))), nil\n}\n```"
            ],
            [
                92,
                "go",
                "lintName",
                "```go\nfunc lintName(name string, initialisms map[string]bool) (should string) {\n\t// A large part of this function is copied from\n\t// github.com/golang/lint, Copyright (c) 2013 The Go Authors,\n\t// licensed under the BSD 3-clause license.\n\n\t// Fast path for simple cases: \"_\" and all lowercase.\n\tif name == \"_\" {\n\t\treturn name\n\t}\n\tif strings.IndexFunc(name, func(r rune) bool { return !unicode.IsLower(r) }) == -1 {\n\t\treturn name\n\t}\n\n\t// Split camelCase at any lower->upper transition, and split on underscores.\n\t// Check each word for common initialisms.\n\trunes := []rune(name)\n\tw, i := 0, 0 // index of start of word, scan\n\tfor i+1 <= len(runes) {\n\t\teow := false // whether we hit the end of a word\n\t\tif i+1 == len(runes) {\n\t\t\teow = true\n\t\t} else if runes[i+1] == '_' && i+1 != len(runes)-1 {\n\t\t\t// underscore; shift the remainder forward over any run of underscores\n\t\t\teow = true\n\t\t\tn := 1\n\t\t\tfor i+n+1 < len(runes) && runes[i+n+1] == '_' {\n\t\t\t\tn++\n\t\t\t}\n\n\t\t\t// Leave at most one underscore if the underscore is between two digits\n\t\t\tif i+n+1 < len(runes) && unicode.IsDigit(runes[i]) && unicode.IsDigit(runes[i+n+1]) {\n\t\t\t\tn--\n\t\t\t}\n\n\t\t\tcopy(runes[i+1:], runes[i+n+1:])\n\t\t\trunes = runes[:len(runes)-n]\n\t\t} else if unicode.IsLower(runes[i]) && !unicode.IsLower(runes[i+1]) {\n\t\t\t// lower->non-lower\n\t\t\teow = true\n\t\t}\n\t\ti++\n\t\tif !eow {\n\t\t\tcontinue\n\t\t}\n\n\t\t// [w,i) is a word.\n\t\tword := string(runes[w:i])\n\t\tif u := strings.ToUpper(word); initialisms[u] {\n\t\t\t// Keep consistent case, which is lowercase only at the start.\n\t\t\tif w == 0 && unicode.IsLower(runes[w]) {\n\t\t\t\tu = strings.ToLower(u)\n\t\t\t}\n\t\t\t// All the common initialisms are ASCII,\n\t\t\t// so we can replace the bytes exactly.\n\t\t\t// TODO(dh): this won't be true once we allow custom initialisms\n\t\t\tcopy(runes[w:], []rune(u))\n\t\t} else if w > 0 && strings.ToLower(word) == word {\n\t\t\t// already all lowercase, and not the first word, so uppercase the first character.\n\t\t\trunes[w] = unicode.ToUpper(runes[w])\n\t\t}\n\t\tw = i\n\t}\n\treturn string(runes)\n}\n```"
            ],
            [
                43,
                "go",
                "FramebufferRenderbuffer",
                "```go\nfunc FramebufferRenderbuffer(target uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32) {\n\tC.glowFramebufferRenderbuffer(gpFramebufferRenderbuffer, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(renderbuffertarget), (C.GLuint)(renderbuffer))\n}\n```"
            ],
            [
                1,
                "go",
                "UpdateSecretVersionStageRequest",
                "```go\nfunc (m *MockSecretsManagerAPI) UpdateSecretVersionStageRequest(arg0 *secretsmanager.UpdateSecretVersionStageInput) (*request.Request, *secretsmanager.UpdateSecretVersionStageOutput) {\n\tret := m.ctrl.Call(m, \"UpdateSecretVersionStageRequest\", arg0)\n\tret0, _ := ret[0].(*request.Request)\n\tret1, _ := ret[1].(*secretsmanager.UpdateSecretVersionStageOutput)\n\treturn ret0, ret1\n}\n```"
            ],
            [
                128,
                "go",
                "SetFocusOnClick",
                "```go\nfunc (v *Button) SetFocusOnClick(focusOnClick bool) {\n\tC.gtk_button_set_focus_on_click(v.native(), gbool(focusOnClick))\n}\n```"
            ],
            [
                795,
                "go",
                "GetShaderInfoLog",
                "```go\nfunc GetShaderInfoLog(shader uint32, bufSize int32, length *int32, infoLog *uint8) {\n\tC.glowGetShaderInfoLog(gpGetShaderInfoLog, (C.GLuint)(shader), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(infoLog)))\n}\n```"
            ],
            [
                425,
                "go",
                "ClientFromEnv",
                "```go\nfunc ClientFromEnv(key string) (*Client, error) {\n\turl := os.Getenv(key)\n\treturn ClientFromURL(url)\n}\n```"
            ],
            [
                255,
                "go",
                "GetOfferingUsage",
                "```go\nfunc (h *Handler) GetOfferingUsage(password, offeringID string) (*uint, error) {\n\tlogger := h.logger.Add(\"method\", \"GetOfferingUsage\",\n\t\t\"offeringID\", offeringID)\n\n\treturn h.uintFromQuery(logger, password,\n\t\t`SELECT SUM(sessions.units_used)\n\t\t   FROM channels\n\t\t   \tJOIN sessions\n\t\t\tON sessions.channel=channels.id\n\t\t\t   AND channels.offering=$1`,\n\t\tofferingID)\n}\n```"
            ],
            [
                376,
                "go",
                "Signature",
                "```go\nfunc (c *CallCommon) Signature() *types.Signature {\n\tif c.Method != nil {\n\t\treturn c.Method.Type().(*types.Signature)\n\t}\n\treturn c.Value.Type().Underlying().(*types.Signature)\n}\n```"
            ],
            [
                229,
                "go",
                "ListBoxNew",
                "```go\nfunc ListBoxNew() (*ListBox, error) {\n\tc := C.gtk_list_box_new()\n\tif c == nil {\n\t\treturn nil, nilPtrErr\n\t}\n\treturn wrapListBox(glib.Take(unsafe.Pointer(c))), nil\n}\n```"
            ],
            [
                424,
                "go",
                "State",
                "```go\nfunc (mr *MockDockerStateResolverMockRecorder) State() *gomock.Call {\n\treturn mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"State\", reflect.TypeOf((*MockDockerStateResolver)(nil).State))\n}\n```"
            ],
            [
                22,
                "go",
                "Check",
                "```go\nfunc (otp *HOTP) Check(code string) bool {\n\tcodeBytes := []byte(code)\n\tgenCode := []byte(otp.OTP())\n\tif subtle.ConstantTimeCompare(codeBytes, genCode) != 1 {\n\t\totp.setCounter(otp.Counter() - 1)\n\t\treturn false\n\t}\n\treturn true\n}\n```"
            ],
            [
                29,
                "go",
                "SetSecureCookie",
                "```go\nfunc (ctx *Context) SetSecureCookie(name, value string, others ...interface{}) {\n\tctx.SetSuperSecureCookie(defaultCookieSecret, name, value, others...)\n}\n```"
            ],
            [
                27,
                "go",
                "GetTime",
                "```go\nfunc (l *LogStreamDefinition) GetTime() WidgetTime {\n\tif l == nil || l.Time == nil {\n\t\treturn WidgetTime{}\n\t}\n\treturn *l.Time\n}\n```"
            ],
            [
                77,
                "go",
                "mergePassInto",
                "```go\nfunc (d *decoder) mergePassInto(dst image.Image, src image.Image, pass int) {\n\tp := interlacing[pass]\n\tvar (\n\t\tsrcPix        []uint8\n\t\tdstPix        []uint8\n\t\tstride        int\n\t\trect          image.Rectangle\n\t\tbytesPerPixel int\n\t)\n\tswitch target := dst.(type) {\n\tcase *image.Alpha:\n\t\tsrcPix = src.(*image.Alpha).Pix\n\t\tdstPix, stride, rect = target.Pix, target.Stride, target.Rect\n\t\tbytesPerPixel = 1\n\tcase *image.Alpha16:\n\t\tsrcPix = src.(*image.Alpha16).Pix\n\t\tdstPix, stride, rect = target.Pix, target.Stride, target.Rect\n\t\tbytesPerPixel = 2\n\tcase *image.Gray:\n\t\tsrcPix = src.(*image.Gray).Pix\n\t\tdstPix, stride, rect = target.Pix, target.Stride, target.Rect\n\t\tbytesPerPixel = 1\n\tcase *image.Gray16:\n\t\tsrcPix = src.(*image.Gray16).Pix\n\t\tdstPix, stride, rect = target.Pix, target.Stride, target.Rect\n\t\tbytesPerPixel = 2\n\tcase *image.NRGBA:\n\t\tsrcPix = src.(*image.NRGBA).Pix\n\t\tdstPix, stride, rect = target.Pix, target.Stride, target.Rect\n\t\tbytesPerPixel = 4\n\tcase *image.NRGBA64:\n\t\tsrcPix = src.(*image.NRGBA64).Pix\n\t\tdstPix, stride, rect = target.Pix, target.Stride, target.Rect\n\t\tbytesPerPixel = 8\n\tcase *image.Paletted:\n\t\tsrcPix = src.(*image.Paletted).Pix\n\t\tdstPix, stride, rect = target.Pix, target.Stride, target.Rect\n\t\tbytesPerPixel = 1\n\tcase *image.RGBA:\n\t\tsrcPix = src.(*image.RGBA).Pix\n\t\tdstPix, stride, rect = target.Pix, target.Stride, target.Rect\n\t\tbytesPerPixel = 4\n\tcase *image.RGBA64:\n\t\tsrcPix = src.(*image.RGBA64).Pix\n\t\tdstPix, stride, rect = target.Pix, target.Stride, target.Rect\n\t\tbytesPerPixel = 8\n\t}\n\ts, bounds := 0, src.Bounds()\n\tfor y := bounds.Min.Y; y < bounds.Max.Y; y++ {\n\t\tdBase := (y*p.yFactor+p.yOffset-rect.Min.Y)*stride + (p.xOffset-rect.Min.X)*bytesPerPixel\n\t\tfor x := bounds.Min.X; x < bounds.Max.X; x++ {\n\t\t\td := dBase + x*p.xFactor*bytesPerPixel\n\t\t\tcopy(dstPix[d:], srcPix[s:s+bytesPerPixel])\n\t\t\ts += bytesPerPixel\n\t\t}\n\t}\n}\n```"
            ],
            [
                949,
                "go",
                "IsMouseButtonPressed",
                "```go\nfunc IsMouseButtonPressed(mouseButton MouseButton) bool {\n\treturn uiDriver().Input().IsMouseButtonPressed(driver.MouseButton(mouseButton))\n}\n```"
            ],
            [
                354,
                "go",
                "Listen",
                "```go\nfunc (api *Api) Listen(addr *net.TCPAddr) error {\n\treturn api.StartFunc(func() error {\n\n\t\ttcpListener, err := net.ListenTCP(\"tcp\", addr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\ts := grpc.NewServer()\n\t\tcarbonpb.RegisterCarbonServer(s, api)\n\t\t// Register reflection service on gRPC server.\n\t\treflection.Register(s)\n\n\t\tapi.Go(func(exit chan struct{}) {\n\t\t\t<-exit\n\t\t\ts.Stop()\n\t\t})\n\n\t\tapi.Go(func(exit chan struct{}) {\n\t\t\tdefer s.Stop()\n\n\t\t\tif err := s.Serve(tcpListener); err != nil {\n\t\t\t\t// may be stopped - not error\n\t\t\t\t// zapwriter.Logger(\"api\").Fatal(\"failed to serve\", zap.Error(err))\n\t\t\t}\n\n\t\t})\n\n\t\tapi.listener = tcpListener\n\n\t\treturn nil\n\t})\n}\n```"
            ],
            [
                444,
                "go",
                "newQuiescence",
                "```go\nfunc newQuiescence(ch chan *template.Template, min, max time.Duration, t *template.Template) *quiescence {\n\treturn &quiescence{\n\t\ttemplate: t,\n\t\tmin:      min,\n\t\tmax:      max,\n\t\tch:       ch,\n\t}\n}\n```"
            ],
            [
                143,
                "go",
                "WaitForSingleObject",
                "```go\nfunc WaitForSingleObject(handle uintptr, msWait uint32) (bool, error) {\n\tr1, _, err := waitForSingleObjectProc.Call(handle, uintptr(uint32(msWait)))\n\tswitch r1 {\n\tcase WAIT_ABANDONED, WAIT_TIMEOUT:\n\t\treturn false, nil\n\tcase WAIT_SIGNALED:\n\t\treturn true, nil\n\t}\n\tuse(msWait)\n\treturn false, err\n}\n```"
            ],
            [
                71,
                "go",
                "MultiDrawElementsBaseVertex",
                "```go\nfunc MultiDrawElementsBaseVertex(mode uint32, count *int32, xtype uint32, indices *unsafe.Pointer, drawcount int32, basevertex *int32) {\n\tC.glowMultiDrawElementsBaseVertex(gpMultiDrawElementsBaseVertex, (C.GLenum)(mode), (*C.GLsizei)(unsafe.Pointer(count)), (C.GLenum)(xtype), indices, (C.GLsizei)(drawcount), (*C.GLint)(unsafe.Pointer(basevertex)))\n}\n```"
            ],
            [
                65,
                "go",
                "ToggleButtonNew",
                "```go\nfunc ToggleButtonNew() (*ToggleButton, error) {\n\tc := C.gtk_toggle_button_new()\n\tif c == nil {\n\t\treturn nil, nilPtrErr\n\t}\n\treturn wrapToggleButton(glib.Take(unsafe.Pointer(c))), nil\n}\n```"
            ],
            [
                22,
                "go",
                "Validate",
                "```go\nfunc (s *RunTaskInput) Validate() error {\n\tinvalidParams := request.ErrInvalidParams{Context: \"RunTaskInput\"}\n\tif s.TaskDefinition == nil {\n\t\tinvalidParams.Add(request.NewErrParamRequired(\"TaskDefinition\"))\n\t}\n\tif s.NetworkConfiguration != nil {\n\t\tif err := s.NetworkConfiguration.Validate(); err != nil {\n\t\t\tinvalidParams.AddNested(\"NetworkConfiguration\", err.(request.ErrInvalidParams))\n\t\t}\n\t}\n\n\tif invalidParams.Len() > 0 {\n\t\treturn invalidParams\n\t}\n\treturn nil\n}\n```"
            ],
            [
                509,
                "go",
                "Uint192ToBytes",
                "```go\nfunc Uint192ToBytes(x *big.Int) [24]byte {\n\tvar ret [24]byte\n\txBytes := x.Bytes()\n\tfor i, v := range xBytes {\n\t\tret[24-len(xBytes)+i] = v\n\t}\n\treturn ret\n}\n```"
            ],
            [
                404,
                "go",
                "DeleteRuleSetGroupByCID",
                "```go\nfunc (a *API) DeleteRuleSetGroupByCID(cid CIDType) (bool, error) {\n\tif cid == nil || *cid == \"\" {\n\t\treturn false, fmt.Errorf(\"Invalid rule set group CID [none]\")\n\t}\n\n\tgroupCID := string(*cid)\n\n\tmatched, err := regexp.MatchString(config.RuleSetGroupCIDRegex, groupCID)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\tif !matched {\n\t\treturn false, fmt.Errorf(\"Invalid rule set group CID [%s]\", groupCID)\n\t}\n\n\t_, err = a.Delete(groupCID)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\n\treturn true, nil\n}\n```"
            ],
            [
                24,
                "go",
                "tagTypeForObject",
                "```go\nfunc tagTypeForObject(obj object.Reference) (string, error) {\n\tswitch obj.(type) {\n\tcase *object.VirtualMachine:\n\t\treturn vSphereTagTypeVirtualMachine, nil\n\tcase *object.Datastore:\n\t\treturn vSphereTagTypeDatastore, nil\n\tcase *object.Network:\n\t\treturn vSphereTagTypeNetwork, nil\n\tcase *object.Folder:\n\t\treturn vSphereTagTypeFolder, nil\n\tcase *object.VmwareDistributedVirtualSwitch:\n\t\treturn vSphereTagTypeVmwareDistributedVirtualSwitch, nil\n\tcase *object.DistributedVirtualSwitch:\n\t\treturn vSphereTagTypeDistributedVirtualSwitch, nil\n\tcase *object.DistributedVirtualPortgroup:\n\t\treturn vSphereTagTypeDistributedVirtualPortgroup, nil\n\tcase *object.Datacenter:\n\t\treturn vSphereTagTypeDatacenter, nil\n\tcase *object.ClusterComputeResource:\n\t\treturn vSphereTagTypeClusterComputeResource, nil\n\tcase *object.HostSystem:\n\t\treturn vSphereTagTypeHostSystem, nil\n\tcase *object.StoragePod:\n\t\treturn vSphereTagTypeStoragePod, nil\n\tcase *object.ResourcePool:\n\t\treturn vSphereTagTypeResourcePool, nil\n\tcase *object.VirtualApp:\n\t\treturn vSphereTagTypeVirtualApp, nil\n\t}\n\treturn \"\", fmt.Errorf(\"unsupported type for tagging: %T\", obj)\n}\n```"
            ],
            [
                227,
                "go",
                "GetType",
                "```go\nfunc (s *ScatterplotDefinition) GetType() string {\n\tif s == nil || s.Type == nil {\n\t\treturn \"\"\n\t}\n\treturn *s.Type\n}\n```"
            ],
            [
                461,
                "go",
                "AddMnemonic",
                "```go\nfunc (v *Window) AddMnemonic(keyval uint, target *Widget) {\n\tC.gtk_window_add_mnemonic(v.native(), C.guint(keyval), target.native())\n}\n```"
            ],
            [
                169,
                "go",
                "String",
                "```go\nfunc (d *HealthServiceQuery) String() string {\n\tname := d.name\n\tif d.tag != \"\" {\n\t\tname = d.tag + \".\" + name\n\t}\n\tif d.dc != \"\" {\n\t\tname = name + \"@\" + d.dc\n\t}\n\tif d.near != \"\" {\n\t\tname = name + \"~\" + d.near\n\t}\n\tif len(d.filters) > 0 {\n\t\tname = name + \"|\" + strings.Join(d.filters, \",\")\n\t}\n\treturn fmt.Sprintf(\"health.service(%s)\", name)\n}\n```"
            ],
            [
                959,
                "go",
                "AssistantNew",
                "```go\nfunc AssistantNew() (*Assistant, error) {\n\tc := C.gtk_assistant_new()\n\tif c == nil {\n\t\treturn nil, nilPtrErr\n\t}\n\tobj := glib.Take(unsafe.Pointer(c))\n\treturn wrapAssistant(obj), nil\n}\n```"
            ],
            [
                458,
                "go",
                "GetShowResourceList",
                "```go\nfunc (t *TraceServiceDefinition) GetShowResourceList() bool {\n\tif t == nil || t.ShowResourceList == nil {\n\t\treturn false\n\t}\n\treturn *t.ShowResourceList\n}\n```"
            ],
            [
                315,
                "go",
                "GetBalance",
                "```go\nfunc (c Client) GetBalance() (float64, error) {\n\tbalance := map[string]string{}\n\tif err := c.Get(\"account/balance\", nil, &balance); err != nil {\n\t\treturn 0.0, err\n\t}\n\tbalanceFloat, err := strconv.ParseFloat(balance[\"amount\"], 64)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\treturn balanceFloat, nil\n}\n```"
            ],
            [
                30,
                "go",
                "waitToStop",
                "```go\nfunc (engine *DockerStatsEngine) waitToStop() {\n\t// Waiting for the event stream to close\n\tctx := engine.containerChangeEventStream.Context()\n\tselect {\n\tcase <-ctx.Done():\n\t\tseelog.Debug(\"Event stream closed, stop listening to the event stream\")\n\t\tengine.containerChangeEventStream.Unsubscribe(containerChangeHandler)\n\t\tengine.removeAll()\n\t}\n}\n```"
            ],
            [
                125,
                "go",
                "native",
                "```go\nfunc (v *ListBox) native() *C.GtkListBox {\n\tif v == nil || v.GObject == nil {\n\t\treturn nil\n\t}\n\tp := unsafe.Pointer(v.GObject)\n\treturn C.toGtkListBox(p)\n}\n```"
            ],
            [
                239,
                "go",
                "PrintOperationGetError",
                "```go\nfunc (po *PrintOperation) PrintOperationGetError() error {\n\tvar err *C.GError = nil\n\tC.gtk_print_operation_get_error(po.native(), &err)\n\tdefer C.g_error_free(err)\n\treturn errors.New(C.GoString((*C.char)(err.message)))\n}\n```"
            ],
            [
                1,
                "go",
                "handleToken",
                "```go\nfunc (g GitlabHook) handleToken(r *http.Request, body []byte, secret string) error {\n\ttoken := r.Header.Get(\"X-Gitlab-Token\")\n\tif token != \"\" {\n\t\tif secret == \"\" {\n\t\t\tLogger().Print(\"Unable to verify request. Secret not set in caddyfile!\\n\")\n\t\t} else {\n\t\t\tif token != secret {\n\t\t\t\treturn errors.New(\"Unable to verify request. The token and specified secret do not match!\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nil\n}\n```"
            ],
            [
                119,
                "go",
                "GetColor",
                "```go\nfunc (c *ConditionalFormat) GetColor() string {\n\tif c == nil || c.Color == nil {\n\t\treturn \"\"\n\t}\n\treturn *c.Color\n}\n```"
            ],
            [
                24,
                "go",
                "TextBufferNew",
                "```go\nfunc TextBufferNew(table *TextTagTable) (*TextBuffer, error) {\n\tc := C.gtk_text_buffer_new(table.native())\n\tif c == nil {\n\t\treturn nil, nilPtrErr\n\t}\n\n\te := wrapTextBuffer(glib.Take(unsafe.Pointer(c)))\n\treturn e, nil\n}\n```"
            ],
            [
                351,
                "go",
                "flattenVMwareUplinkPortOrderPolicy",
                "```go\nfunc flattenVMwareUplinkPortOrderPolicy(d *schema.ResourceData, obj *types.VMwareUplinkPortOrderPolicy) error {\n\tif obj == nil {\n\t\treturn nil\n\t}\n\n\tif err := d.Set(\"active_uplinks\", obj.ActiveUplinkPort); err != nil {\n\t\treturn err\n\t}\n\tif err := d.Set(\"standby_uplinks\", obj.StandbyUplinkPort); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n```"
            ],
            [
                140,
                "go",
                "NewDBFromConnStr",
                "```go\nfunc NewDBFromConnStr(connStr string) (*reform.DB, error) {\n\tconn, err := dbConnect(connStr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn newReform(conn), nil\n}\n```"
            ],
            [
                330,
                "go",
                "String",
                "```go\nfunc (eni *ENI) String() string {\n\tvar ipv4Addresses []string\n\tfor _, addr := range eni.IPV4Addresses {\n\t\tipv4Addresses = append(ipv4Addresses, addr.Address)\n\t}\n\tvar ipv6Addresses []string\n\tfor _, addr := range eni.IPV6Addresses {\n\t\tipv6Addresses = append(ipv6Addresses, addr.Address)\n\t}\n\treturn fmt.Sprintf(\n\t\t\"eni id:%s, mac: %s, hostname: %s, ipv4addresses: [%s], ipv6addresses: [%s], dns: [%s], dns search: [%s], gateway ipv4: [%s]\",\n\t\teni.ID, eni.MacAddress, eni.GetHostname(), strings.Join(ipv4Addresses, \",\"), strings.Join(ipv6Addresses, \",\"),\n\t\tstrings.Join(eni.DomainNameServers, \",\"), strings.Join(eni.DomainNameSearchList, \",\"), eni.SubnetGatewayIPV4Address)\n}\n```"
            ],
            [
                1,
                "go",
                "FullSrcLine",
                "```go\nfunc (c *Call) FullSrcLine() string {\n\treturn fmt.Sprintf(\"%s:%d\", c.SrcPath, c.Line)\n}\n```"
            ],
            [
                1,
                "go",
                "CleanupSubnetIfExists",
                "```go\nfunc (a AzureClient) CleanupSubnetIfExists(resourceGroup, virtualNetwork, name string) error {\n\treturn a.cleanupResourceIfExists(&subnetCleanup{\n\t\trg: resourceGroup, vnet: virtualNetwork, name: name,\n\t})\n}\n```"
            ],
            [
                594,
                "go",
                "itemsFilter",
                "```go\nfunc itemsFilter(vs []datatypes.Product_Item_Price, f func(datatypes.Product_Item_Price) bool) []datatypes.Product_Item_Price {\n\tvsf := make([]datatypes.Product_Item_Price, 0)\n\tfor _, v := range vs {\n\t\tif f(v) {\n\t\t\tvsf = append(vsf, v)\n\t\t}\n\t}\n\n\treturn vsf\n}\n```"
            ],
            [
                232,
                "go",
                "badPrefix",
                "```go\nfunc badPrefix(fpath string) error {\n\tvar badprefixes = []string{\"/usr\"}\n\n\tfor _, prefix := range badprefixes {\n\t\tif fpath == prefix || strings.HasPrefix(fpath, fmt.Sprintf(\"%s/\", prefix)) {\n\t\t\treturn fmt.Errorf(\"Relabeling content in %s is not allowed.\", prefix)\n\t\t}\n\t}\n\treturn nil\n}\n```"
            ],
            [
                166,
                "go",
                "IsDup",
                "```go\nfunc IsDup(err error) bool {\n\t// Besides being handy, helps with MongoDB bugs SERVER-7164 and SERVER-11493.\n\t// What follows makes me sad. Hopefully conventions will be more clear over time.\n\tswitch e := err.(type) {\n\tcase *LastError:\n\t\treturn e.Code == 11000 || e.Code == 11001 || e.Code == 12582 || e.Code == 16460 && strings.Contains(e.Err, \" E11000 \")\n\tcase *QueryError:\n\t\treturn e.Code == 11000 || e.Code == 11001 || e.Code == 12582\n\t}\n\treturn false\n}\n```"
            ],
            [
                1,
                "go",
                "MakeRequest",
                "```go\nfunc (m *MockClientServer) MakeRequest(arg0 interface{}) error {\n\tret := m.ctrl.Call(m, \"MakeRequest\", arg0)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}\n```"
            ]
        ]
    },
    "Validation-go MRR (bs=1,000)": 0.1330895146406879,
    "Examples-Test-javascript": {
        "_type": "table",
        "columns": [
            "Rank",
            "Language",
            "Query",
            "Code"
        ],
        "data": [
            [
                942,
                "javascript",
                "loader",
                "```javascript\nfunction loader ( module, filePath ) {\n\n    let content = fs.readFileSync(filePath, 'utf8');\n    let moduleId = `data-v-${ hash(filePath) }`;\n\n    let vueTemplate = '';\n    let vueComponent = compiler.parseComponent(stripBom(content));\n\n    let script = vueComponent.script;\n    let styles = vueComponent.styles;\n    let template = vueComponent.template;\n\n    let scoped = styles.some(({ attrs }) => attrs.scoped);\n\n    [].concat(script, template, styles).forEach(( tag, index ) => {\n        if (tag) {\n            let type = tag.type;\n            let content = tag.content;\n            let lang = tag.attrs.lang || store[type].defaults;\n            let handler = store[type].langs[lang];\n            if (handler) {\n                content = handler(content, filePath, index, module);\n            }\n            switch (type) {\n                case 'style':\n                    if (browserEnv) {\n                        /**\n                         * Only in Browser Environment, append style to head\n                         */\n                        if (tag.attrs.scoped) {\n                            let ast = css.parse(content);\n                            ast.stylesheet.rules.forEach(( rule ) => {\n                                rule.selectors = rule.selectors.map(( selector ) => {\n                                    let [ patterns ] = cssWhat(selector);\n                                    let index = patterns.length - 1;\n                                    for (; index >= 0; index--) {\n                                        let { type } = patterns[index];\n                                        if (type !== 'pseudo' && type !== 'pseudo-element') {\n                                            break;\n                                        }\n                                    }\n                                    patterns.splice(index + 1, 0, {\n                                        value : '',\n                                        name : moduleId,\n                                        action : 'exists',\n                                        type : 'attribute',\n                                        ignoreCase : false,\n                                    });\n                                    return cssWhat.stringify([patterns]);\n                                });\n                            });\n                            content = css.stringify(ast);\n                        }\n                        let style = document.createElement('style');\n                        style.innerHTML = content;\n                        store.style.exports.call(module.exports, style, {\n                            index,\n                            styles,\n                            filePath,\n                        });\n                    }\n                    break;\n                case 'script':\n                    module._compile(content, filePath);\n                    break;\n                case 'template':\n                    if (browserEnv) {\n                        /**\n                         * Only in Browser Environment, set Attribute for each element\n                         */\n                        if (scoped) {\n                            let div = document.createElement('div');\n                            div.innerHTML = content;\n                            let root = div.firstElementChild;\n                            let walk = function walk ( element, handler ) {\n                                handler(element);\n                                let children = element.children || [];\n                                [].forEach.call(children, ( child ) => {\n                                    walk(child, handler);\n                                });\n                            };\n                            walk(root, ( element ) => {\n                                element.setAttribute(moduleId, '');\n                            });\n                            content = div.innerHTML;\n                        }\n                    }\n                    vueTemplate = content;\n                    break;\n            }\n        }\n    });\n\n    module.exports.vueComponent = vueComponent;\n    module.exports.template = vueTemplate;\n}\n```"
            ],
            [
                69,
                "javascript",
                "",
                "```javascript\nfunction (options) {\n  if (arguments.length < 1 || !options.appKey || !options.appSecret) {\n    throw paramError;\n  }\n  if (!options.private) {\n    if (!options.callbackUrl) {\n      throw paramError;\n    }\n    options.scope || (options.scope = ['read_basic']);\n  }\n\n  this.app_key = options.appKey || '';\n  this.app_secret = options.appSecret || '';\n  this.private = options.private || false;\n  this.callback_url = options.callbackUrl || '';\n  this.scope = options.scope || '';\n  this.redirect_url = options.redirectUrl || '';\n  this.protocol = options.protocol || config.httpProtocol;\n  this.host = options.host || config.appHost;\n  this._request = new Request({\n    protocol: this.protocol,\n  });\n}\n```"
            ],
            [
                188,
                "javascript",
                "",
                "```javascript\nfunction (format) {\n        var args = Ext.toArray(arguments, 1);\n        return format.replace(Ext.util.Format.formatRe, function(m, i) {\n            return args[i];\n        });\n    }\n```"
            ],
            [
                240,
                "javascript",
                "checkID",
                "```javascript\nfunction checkID (expectedIdAndVersion, pinfo) {\n    if (!expectedIdAndVersion) return;\n\n    var parsedSpec = pluginSpec.parse(expectedIdAndVersion);\n\n    if (parsedSpec.id !== pinfo.id) {\n        throw new Error('Expected plugin to have ID \"' + parsedSpec.id + '\" but got \"' + pinfo.id + '\".');\n    }\n\n    if (parsedSpec.version && !semver.satisfies(pinfo.version, parsedSpec.version)) {\n        throw new Error('Expected plugin ' + pinfo.id + ' to satisfy version \"' + parsedSpec.version + '\" but got \"' + pinfo.version + '\".');\n    }\n}\n```"
            ],
            [
                802,
                "javascript",
                "ServerSideSortingRequestControl",
                "```javascript\nfunction ServerSideSortingRequestControl(options) {\n  assert.optionalObject(options);\n  options = options || {};\n  options.type = ServerSideSortingRequestControl.OID;\n  if (options.value) {\n    if (Buffer.isBuffer(options.value)) {\n      this.parse(options.value);\n    } else if (Array.isArray(options.value)) {\n      assert.arrayOfObject(options.value, 'options.value must be Objects');\n      for (var i = 0; i < options.value.length; i++) {\n        if (!options.value[i].hasOwnProperty('attributeType')) {\n          throw new Error('Missing required key: attributeType');\n        }\n      }\n      this._value = options.value;\n    } else if (typeof (options.value) === 'object') {\n      if (!options.value.hasOwnProperty('attributeType')) {\n        throw new Error('Missing required key: attributeType');\n      }\n      this._value = [options.value];\n    } else {\n      throw new TypeError('options.value must be a Buffer, Array or Object');\n    }\n    options.value = null;\n  }\n  Control.call(this, options);\n}\n```"
            ],
            [
                7,
                "javascript",
                "getJsxAttributePropertySymbol",
                "```javascript\nfunction getJsxAttributePropertySymbol(attrib) {\n            var attributesType = getJsxElementAttributesType(attrib.parent);\n            var prop = getPropertyOfType(attributesType, attrib.name.text);\n            return prop || unknownSymbol;\n        }\n```"
            ],
            [
                963,
                "javascript",
                "stats_calculate_coverage",
                "```javascript\nfunction stats_calculate_coverage(moduleName) {\n    var stats = sb.trigger('*:stats-get', moduleName, null)[1],\n        total,\n        covered,\n        lineId,\n        lineNum,\n        parts;\n\n    var lineReport = {};\n\n    if (!stats.lines) {\n        return;\n    }\n    stats.coverage = {};\n\n    covered = 0;\n    total = stats.lines.length;\n    for (lineId in stats.runLines) {\n        if (stats.runLines[lineId] > 0) {\n            covered++;\n        } else {\n            lineNum = lineId;\n            if (!lineReport[lineNum]) {\n                lineReport[lineNum] = {};\n            }\n            lineReport[lineNum].lines = false;\n        }\n    }\n    stats.coverage.lines = {\n        total: total,\n        covered: covered,\n        percentage: 100.0 * (total ? covered / total : 1)\n    };\n\n    covered = 0;\n    total = stats.functions.length;\n    for (lineId in stats.runFunctions) {\n        if (stats.runFunctions[lineId] > 0) {\n            covered++;\n        } else {\n            parts = lineId.split(':');\n            lineNum = parts[1];\n            if (!lineReport[lineNum]) {\n                lineReport[lineNum] = {};\n            }\n            if (!lineReport[lineNum].functions) {\n                lineReport[lineNum].functions = [];\n            }\n            lineReport[lineNum].functions.push(parts[0]);\n        }\n    }\n    stats.coverage.functions = {\n        total:total,\n        covered:covered,\n        percentage:100.0 * (total ? covered / total : 1)\n    };\n\n    covered = 0;\n    total = stats.conditions.length;\n    for (lineId in stats.runConditions) {\n        if (stats.runConditions[lineId][1] > 0) {\n            covered += 1;\n        }\n\n        if (stats.runConditions[lineId][1] === 0) {\n\n            parts = lineId.split(':');\n            lineNum = parts[1];\n            if (!lineReport[lineNum]) {\n                lineReport[lineNum] = {};\n            }\n            if (!lineReport[lineNum].conditions) {\n                lineReport[lineNum].conditions = [];\n            }\n            lineReport[lineNum].conditions.push(stats.runConditions[lineId]);\n        }\n    }\n    stats.coverage.conditions = {\n        total:total,\n        covered:covered,\n        percentage:100.0 * (total ? covered / total : 1)\n    };\n    stats.coverage.report = lineReport;\n}\n```"
            ],
            [
                7,
                "javascript",
                "",
                "```javascript\nfunction (val, size, ch) {\n        var result = String(val);\n        ch = ch || \" \";\n        while (result.length < size) {\n            result = ch + result;\n        }\n        return result;\n    }\n```"
            ],
            [
                864,
                "javascript",
                "",
                "```javascript\nfunction(name, _skipAssert) {\n    var container = this.container,\n        route = container.lookup('route:'+name),\n        controller;\n\n    if (route && route.controllerName) {\n      name = route.controllerName;\n    }\n\n    controller = container.lookup('controller:' + name);\n\n    // NOTE: We're specifically checking that skipAssert is true, because according\n    //   to the old API the second parameter was model. We do not want people who\n    //   passed a model to skip the assertion.\n    Ember.assert(\"The controller named '\"+name+\"' could not be found. Make sure \" +\n                 \"that this route exists and has already been entered at least \" +\n                 \"once. If you are accessing a controller not associated with a \" +\n                 \"route, make sure the controller class is explicitly defined.\",\n                 controller || _skipAssert === true);\n\n    return controller;\n  }\n```"
            ],
            [
                183,
                "javascript",
                "DockerCmdManager",
                "```javascript\nfunction DockerCmdManager(dockerdescPath) {\n    dockerdescPath = dockerdescPath || './dockerdesc.json';\n\n    if (!fs.existsSync(dockerdescPath)) {\n        throw new Error(util.format('The path \"%s\" does not exists.', dockerdescPath));\n    }\n    /** @type {string} */\n    this.dockerdescDir = path.dirname(dockerdescPath);\n\n    var dockerdescPathStat = fs.statSync(dockerdescPath);\n    if (dockerdescPathStat.isDirectory()) {\n        this.dockerdescDir = dockerdescPath;\n        dockerdescPath = path.join(dockerdescPath, 'dockerdesc.json');\n    }\n    /** @type {Dockerdesc} */\n    var dockerdescContent = fs.readFileSync(dockerdescPath);\n    try {\n        this.dockerdesc = JSON.parse(dockerdescContent);\n    } catch (err) {\n        throw new Error('Problem in the dockerdesc.json file format.\\n' + err.stack);\n    }\n}\n```"
            ],
            [
                319,
                "javascript",
                "getRangeData",
                "```javascript\nfunction getRangeData ( quantifier ) {\n\n\tlet rangeType = dateRange.DAY;\n\tlet startRange = 'day';\n\n\tif ( /seconds?/i.test(quantifier) ) {\n\t\trangeType = dateRange.SEC;\n\t\tstartRange = 'second';\n\t} else if ( /minutes?/i.test(quantifier) ) {\n\t\trangeType = dateRange.MIN;\n\t\tstartRange = 'minute';\n\t} else if ( /hours?/i.test(quantifier) ) {\n\t\trangeType = dateRange.HOUR;\n\t\tstartRange = 'hour';\n\t} else if ( new RegExp(`${days.join('s?|')}s?`, 'i').test(quantifier) ) {\n\t\trangeType = dateRange.DAY * 7;\n\t\tstartRange = quantifier;\n\t}\n\n\treturn {\n\t\trangeType: rangeType,\n\t\tstartRange: startRange\n\t};\n\n}\n```"
            ],
            [
                14,
                "javascript",
                "",
                "```javascript\nfunction( model, coll, options ) {\n\t\t\tif ( ( this.keyId || this.keyId === 0 ) && model.id === this.keyId ) { // since 0 can be a valid `id` as well\n\t\t\t\tthis.addRelated( model, options );\n\t\t\t\tthis.keyId = null;\n\t\t\t}\n\t\t}\n```"
            ],
            [
                837,
                "javascript",
                "SearchEntry",
                "```javascript\nfunction SearchEntry(options) {\n  options = options || {};\n  assert.object(options);\n  lassert.optionalStringDN(options.objectName);\n\n  options.protocolOp = Protocol.LDAP_REP_SEARCH_ENTRY;\n  LDAPMessage.call(this, options);\n\n  this.objectName = options.objectName || null;\n  this.setAttributes(options.attributes || []);\n}\n```"
            ],
            [
                489,
                "javascript",
                "",
                "```javascript\nfunction(item) {\n        var key = this.getKey(item);\n        if (key) {\n            return this.containsKey(key);\n        } else {\n            return Ext.Array.contains(this.items, item);\n        }\n    }\n```"
            ],
            [
                504,
                "javascript",
                "runAsync",
                "```javascript\nfunction runAsync () {\n    if (runIndex++ < sampleSize) {\n      fn.call(child, function () {\n        setTimeout(runAsync, 0)\n      })\n    } else {\n      setTimeout(finishChild, 0)\n    }\n  }\n```"
            ],
            [
                129,
                "javascript",
                "giveNameToAnonymousFunction",
                "```javascript\nfunction giveNameToAnonymousFunction () {\n\t\tvar node = this;\n\n\t\tif (node[0].name == \"var\" || node[0].name == \"object\") {\n\t\t\tnode[1].forEach(function (assignemt) {\n\t\t\t\tif (assignemt[1]) {\n\t\t\t\t\tif (assignemt[1][0].name === \"function\") {\n\t\t\t\t\t\tassignemt[1][0].anonymousName = assignemt[0];\n\t\t\t\t\t} else if (assignemt[1][0].name === \"conditional\") {\n\t\t\t\t\t\tif (assignemt[1][2][0] && assignemt[1][2][0].name === \"function\") {\n\t\t\t\t\t\t\tassignemt[1][2][0].anonymousName = assignemt[0];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (assignemt[1][3][0] && assignemt[1][3][0].name === \"function\") {\n\t\t\t\t\t\t\tassignemt[1][3][0].anonymousName = assignemt[0];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (node[0].name == \"assign\" && node[1] === true) {\n\t\t\tif (node[3][0].name === \"function\") {\n\t\t\t\tnode[3][0].anonymousName = getNameFromAssign(node);\n\t\t\t} else if (node[3][0] === \"conditional\") {\n\t\t\t\tif (node[3][2][0] && node[3][2][0].name === \"function\") {\n\t\t\t\t\tnode[3][2][0].anonymousName = getNameFromAssign(node);\n\t\t\t\t}\n\t\t\t\tif (node[3][3][0] && node[3][3][0].name === \"function\") {\n\t\t\t\t\tnode[3][3][0].anonymousName = getNameFromAssign(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```"
            ],
            [
                635,
                "javascript",
                "",
                "```javascript\nfunction(sorterFn) {\n        var me     = this,\n            items  = me.items,\n            keys   = me.keys,\n            length = items.length,\n            temp   = [],\n            i;\n\n        //first we create a copy of the items array so that we can sort it\n        for (i = 0; i < length; i++) {\n            temp[i] = {\n                key  : keys[i],\n                value: items[i],\n                index: i\n            };\n        }\n\n        Ext.Array.sort(temp, function(a, b) {\n            var v = sorterFn(a.value, b.value);\n            if (v === 0) {\n                v = (a.index < b.index ? -1 : 1);\n            }\n\n            return v;\n        });\n\n        //copy the temporary array back into the main this.items and this.keys objects\n        for (i = 0; i < length; i++) {\n            items[i] = temp[i].value;\n            keys[i]  = temp[i].key;\n        }\n\n        me.fireEvent('sort', me, items, keys);\n    }\n```"
            ],
            [
                217,
                "javascript",
                "",
                "```javascript\nfunction(modules, needs, arr) {\n\t\tarr = arr || [];\n\n\t\t// todo - this assumes the entire set of dependencies exists on the device (i.e. a module with the same n/f values)\n\t\t// but this is not the case, e.g. when upgrading from a 2 module system to 3 module system.\n\t\tfor (var i = 0; i < modules.length; i++) {\n\t\t\tvar m = modules[i];\n\n\t\t\tif (m.n !== needs.n) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (m.f !== needs.f) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//found one!\n\t\t\tif (m.v < needs.v) {\n\t\t\t\t//\n\t\t\t\t// it's...\n\t\t\t\t//\t  .---.       .-''-.     .-'''-.    .-'''-.     ,---------. .---.  .---.    ____    ,---.   .--.\n\t\t\t\t//\t  | ,_|     .'_ _   \\   / _     \\  / _     \\    \\          \\|   |  |_ _|  .'  __ `. |    \\  |  |\n\t\t\t\t//\t,-./  )    / ( ` )   ' (`' )/`--' (`' )/`--'     `--.  ,---'|   |  ( ' ) /   '  \\  \\|  ,  \\ |  |\n\t\t\t\t//\t\\  '_ '`) . (_ o _)  |(_ o _).   (_ o _).           |   \\   |   '-(_{;}_)|___|  /  ||  |\\_ \\|  |\n\t\t\t\t//\t > (_)  ) |  (_,_)___| (_,_). '.  (_,_). '.         :_ _:   |      (_,_)    _.-`   ||  _( )_\\  |\n\t\t\t\t//\t(  .  .-' '  \\   .---..---.  \\  :.---.  \\  :        (_I_)   | _ _--.   | .'   _    || (_ o _)  |\n\t\t\t\t//\t `-'`-'|___\\  `-'    /\\    `-'  |\\    `-'  |       (_(=)_)  |( ' ) |   | |  _( )_  ||  (_,_)\\  |\n\t\t\t\t//\t  |        \\\\       /  \\       /  \\       /         (_I_)   (_{;}_)|   | \\ (_ o _) /|  |    |  |\n\t\t\t\t//\t  `--------` `'-..-'    `-...-'    `-...-'          '---'   '(_,_) '---'  '.(_,_).' '--'    '--'\n\t\t\t\t//\n\n\t\t\t\t//arr.push(m);\n\n\t\t\t\t// instead of returning the module we found, lets return the module with the version we need,\n\t\t\t\t// and any dependencies it requires, I think that's more clear.\n\n\t\t\t\tvar missing = extend(m, { v: needs.v });\n\t\t\t\tarr.push(missing);\n\t\t\t\t// todo mdm - this is wrong. we shouldn't be fabricating dependencies for a new version of a module\n\t\t\t\t// (need) from the installed version (m) - dependencies can and do change between versions.\n\t\t\t\t// The database of known modules should be the definitive source of module dependencies.\n\n\t\t\t\t// if we're updating this, we better check its dependencies too.\n\t\t\t\tif (m.d && (m.d.length > 0)) {\n\t\t\t\t\t//oh no!  this module has dependencies!\n\t\t\t\t\t// do we have to update those too?\n\t\t\t\t\t// (this doesn't fully make sense to me right now, but lets go with it.)\n\t\t\t\t\t// todo mdm - this won't do anything, since `m` is always a satisfied dependency\n\t\t\t\t\t// (it came from the modules array.)\n\t\t\t\t\t// at the very least we should be iterating over m.d[] as the needed modules\n\t\t\t\t\tarr = this._walkChain(modules, m, arr);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn arr;\n\t}\n```"
            ],
            [
                204,
                "javascript",
                "setInMessage",
                "```javascript\nfunction setInMessage(obj, root) {\n    obj.inmessage = true;\n\n    if (obj.type == 'static' || obj.type == 'struct' || obj.type == 'message') {\n        for (var i = 0; i < obj.val.length; ++i) {\n            var cval = obj.val[i];\n            if (cval.hasOwnProperty('type2') && 'expand' == cval.type2) {\n                continue ;\n            }\n\n            var mytype = getRealType(cval.type, root);\n            if (isBaseType(mytype)) {\n                continue ;\n            }\n\n            setInMessage(getGlobalObj(mytype, root), root);\n        }\n    }\n}\n```"
            ],
            [
                602,
                "javascript",
                "position",
                "```javascript\nfunction position(row, u, rect, flush) {\n    var i = -1,\n        n = row.length,\n        x = rect.x,\n        y = rect.y,\n        v = u ? round(row.area / u) : 0,\n        o;\n    if (u == rect.dx) { // horizontal subdivision\n      if (flush || v > rect.dy) v = v ? rect.dy : 0; // over+underflow\n      while (++i < n) {\n        o = row[i];\n        o.x = x;\n        o.y = y;\n        o.dy = v;\n        x += o.dx = v ? round(o.area / v) : 0;\n      }\n      o.z = true;\n      o.dx += rect.x + rect.dx - x; // rounding error\n      rect.y += v;\n      rect.dy -= v;\n    } else { // vertical subdivision\n      if (flush || v > rect.dx) v = v ? rect.dx : 0; // over+underflow\n      while (++i < n) {\n        o = row[i];\n        o.x = x;\n        o.y = y;\n        o.dx = v;\n        y += o.dy = v ? round(o.area / v) : 0;\n      }\n      o.z = false;\n      o.dy += rect.y + rect.dy - y; // rounding error\n      rect.x += v;\n      rect.dx -= v;\n    }\n  }\n```"
            ],
            [
                856,
                "javascript",
                "custom",
                "```javascript\nfunction custom (fn) {\n  return function (req, res, next) {\n    fn(req, function (result) {\n      if (result === true) { return next(); }\n      next(new ErrorUnauthorized('Authentication Failed'));\n    });\n  };\n}\n```"
            ],
            [
                729,
                "javascript",
                "plural$1",
                "```javascript\nfunction plural$1(ms, n, name) {\n  if (ms < n) return;\n  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n```"
            ],
            [
                424,
                "javascript",
                "checkTypeAnnotationAsExpression",
                "```javascript\nfunction checkTypeAnnotationAsExpression(node) {\n            switch (node.kind) {\n                case 141 /* PropertyDeclaration */:\n                    checkTypeNodeAsExpression(node.type);\n                    break;\n                case 138 /* Parameter */:\n                    checkTypeNodeAsExpression(node.type);\n                    break;\n                case 143 /* MethodDeclaration */:\n                    checkTypeNodeAsExpression(node.type);\n                    break;\n                case 145 /* GetAccessor */:\n                    checkTypeNodeAsExpression(node.type);\n                    break;\n                case 146 /* SetAccessor */:\n                    checkTypeNodeAsExpression(ts.getSetAccessorTypeAnnotationNode(node));\n                    break;\n            }\n        }\n```"
            ],
            [
                108,
                "javascript",
                "",
                "```javascript\nfunction () {\r\n                var bytes = this._messageQueue.reduce(function (acc, message) {\r\n                    if (typeof message === 'string') {\r\n                        acc += message.length; // not byte size\r\n                    }\r\n                    else if (message instanceof Blob) {\r\n                        acc += message.size;\r\n                    }\r\n                    else {\r\n                        acc += message.byteLength;\r\n                    }\r\n                    return acc;\r\n                }, 0);\r\n                return bytes + (this._ws ? this._ws.bufferedAmount : 0);\r\n            }\n```"
            ],
            [
                494,
                "javascript",
                "createZoomRangePath",
                "```javascript\nfunction createZoomRangePath(options) {\n      if (!angular.isObject(options.state)) {\n        options.state = {};\n      }\n      if (!angular.isObject(options.state.range)) {\n        options.state.range = [];\n      }\n    }\n```"
            ],
            [
                184,
                "javascript",
                "ElementNode",
                "```javascript\nfunction ElementNode(parent, tagname, attributes) {\n  Node.call(this, 'element', parent);\n\n  // Since this is an element there will minimum one tag\n  this.tags = (tagname === 'br' || tagname === 'wbr') ? 0 : 1;\n\n  // Element nodes also has a tagname and an attribute collection\n  this.tagname = tagname;\n  this.attr = attributes;\n  this.classes = attributes.hasOwnProperty('class') ?\n    attributes['class'].trim().split(WHITE_SPACE) : [];\n\n  // Add node to the classlist\n  this.root.classlist.addNode(this);\n\n  this._blockySelfCache = domHelpers.BLOCK_ELEMENTS.hasOwnProperty(tagname);\n  this._countTagnames = {};\n}\n```"
            ],
            [
                846,
                "javascript",
                "checkSquareInView",
                "```javascript\nfunction checkSquareInView(m, v) {\n        var check1 = checkInView(m, v.slice(0, 3));\n        var check2 = checkInView(m, v.slice(3, 6));\n        var check3 = checkInView(m, v.slice(6, 9));\n        var check4 = checkInView(m, v.slice(9, 12));\n        var testX = check1[0] + check2[0] + check3[0] + check4[0];\n        if ( testX == -4 || testX == 4 )\n            return false;\n        var testY = check1[1] + check2[1] + check3[1] + check4[1];\n        if ( testY == -4 || testY == 4 )\n            return false;\n        var testZ = check1[2] + check2[2] + check3[2] + check4[2];\n        return testZ != 4;\n        \n\n    }\n```"
            ],
            [
                103,
                "javascript",
                "reduceDirectories",
                "```javascript\nfunction reduceDirectories() {\n  return Array.prototype.slice.call(arguments)\n    .map(function (candidate) {\n      return path.normalize(candidate);\n    })\n    .filter(function (candidate) {\n      return fs.existsSync(candidate) && fs.statSync(candidate).isDirectory();\n    })\n    .shift();\n}\n```"
            ],
            [
                8,
                "javascript",
                "bind_d3",
                "```javascript\nfunction bind_d3(f, context) {\n    return function() {\n        var args = [this].concat([].slice.call(arguments)) // convert argument to array\n        f.apply(context, args)\n    }\n}\n```"
            ],
            [
                452,
                "javascript",
                "build",
                "```javascript\nfunction build(mode, system, cdef, out, cb) {\n    _containers.getHandler(system, cdef.type, function(err, container) {\n      if (err) { return cb(err); }\n      if (!container) {\n        err = new Error('no matching container available for type: ' + cdef.type);\n        logger.error(err.message);\n        return cb(err);\n      }\n\n      if (container.build) {\n        out.progress('--> executing container specific build for ' +  cdef.id);\n        logger.info({ containerDefinition: cdef.id }, 'executing container specific build');\n        container.build(mode, system, cdef, out, function(err, specific) {\n          if (err) { logger.error(err); out.stdout(err); return cb(err); }\n\n          out.progress('--> ' + cdef.id + ' built');\n          logger.info({ containerDefinition: cdef.id }, 'built');\n          cb(err);\n        });\n      } else {\n        out.progress('--> no need to build ' + cdef.id);\n        cb(null, {});\n      }\n    });\n  }\n```"
            ],
            [
                446,
                "javascript",
                "prepareJob",
                "```javascript\nfunction prepareJob(emitter, job) {\n  Project.findOne({ name: job.project }).populate('creator').exec(function (err, project) {\n    if (err || !project) return debug('job.prepare - failed to get project', job.project, err);\n    // ok so the project is real, we can go ahead and save this job\n    var provider = common.extensions.provider[project.provider.id];\n\n    if (!provider) {\n      return debug('job.prepare - provider not found for project', job.project, project.provider.id);\n    }\n\n    Job.create(job, function (err, mjob) {\n      if (err) return debug('job.prepare - failed to save job', job, err);\n\n      var jjob = mjob.toJSON();\n\n      jjob.project = project;\n      jjob.providerConfig = project.provider.config;\n      jjob.fromStriderJson = true;\n\n      striderJson(provider, project, job.ref, function (err, config) {\n        if (err) {\n          if (err.status === 403 || err.statusCode === 403) {\n            debug('job.prepare - access to strider.json is forbidden, skipping config merge');\n            config = {};\n            jjob.fromStriderJson = false;\n          } else if (err.status === 404 || err.statusCode === 404) {\n            debug('job.prepare - strider.json not found, skipping config merge');\n            config = {};\n            jjob.fromStriderJson = false;\n          } else {\n            debug('job.prepare - error opening/processing project\\'s `strider.json` file: ', err);\n            config = {};\n            jjob.fromStriderJson = false;\n          }\n        } else {\n          debug('Using configuration from \"strider.json\".');\n        }\n\n        var branch = project.branch(job.ref.branch || 'master');\n\n        if (!branch) {\n          return debug('job.prepare - branch not found', job.ref.branch || 'master', project.name);\n        }\n\n        branch = branch.mirror_master ? project.branch('master') : branch;\n        jjob.providerConfig = _.extend({}, project.provider.config, config.provider || {});\n        config.runner = config.runner || branch.runner;\n\n        if (!common.extensions.runner[config.runner.id]) {\n          debug(`Error: A job was registered for a runner that doesn't exist, i.e. \"${config.runner.id}\". This job will never run!`);\n        }\n\n        if (config) {\n          delete config.provider;\n          config = utils.mergeConfigs(branch, config);\n        }\n\n        emitter.emit('job.new', jjob, config);\n\n        if (!mjob.runner) mjob.runner = {};\n\n        mjob.runner.id = config.runner.id;\n        mjob.save()\n          .then(() => debug('job saved'))\n          .catch(e => debug(e));\n      });\n    });\n  });\n}\n```"
            ],
            [
                346,
                "javascript",
                "parsePostfixExpression",
                "```javascript\nfunction parsePostfixExpression() {\n            var marker = markerCreate(),\n                expr = parseLeftHandSideExpressionAllowCall(),\n                token;\n    \n            if (lookahead.type !== Token.Punctuator) {\n                return expr;\n            }\n    \n            if ((match('++') || match('--')) && !peekLineTerminator()) {\n                // 11.3.1, 11.3.2\n                if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                    throwErrorTolerant({}, Messages.StrictLHSPostfix);\n                }\n    \n                if (!isLeftHandSide(expr)) {\n                    throwError({}, Messages.InvalidLHSInAssignment);\n                }\n    \n                token = lex();\n                expr = markerApply(marker, delegate.createPostfixExpression(token.value, expr));\n            }\n    \n            return expr;\n        }\n```"
            ],
            [
                73,
                "javascript",
                "reportRequiredEndingSpace",
                "```javascript\nfunction reportRequiredEndingSpace( node, token ) {\n    context.report({\n      node: node,\n      loc: token.loc.start,\n      message: 'A space is required before \\'' + token.value + '\\'',\n      fix: function( fixer ) {\n        return fixer.insertTextBefore( token, ' ' );\n      }\n    });\n  }\n```"
            ],
            [
                105,
                "javascript",
                "",
                "```javascript\nfunction(e) {\n        var me = this;\n        if (e.target != me.element.dom) {\n            return;\n        }\n        if (me.getDeselectOnContainerClick() && me.getStore()) {\n            me.deselectAll();\n        }\n    }\n```"
            ],
            [
                989,
                "javascript",
                "create",
                "```javascript\nfunction create(parent, baseUrl, params, callback) {\n  parent.getClient().post(baseUrl, params, function(err, definition, response) {\n    if (err) return callback(err);\n    callback(null, new this(parent, definition));\n  }.bind(this));\n}\n```"
            ],
            [
                206,
                "javascript",
                "normalize",
                "```javascript\nfunction normalize (obj) {\n  var result = obj;\n  if (typeof obj !== \"function\") {\n    if (typeof obj !== \"undefined\") {\n      if (Object.prototype.toString.call(obj) !== \"[object Object]\") {\n        result = (function (value) { return function () { return value; }; }(obj));\n      } else {\n        result = (function (o) { return function (key, passthru) {\n          if (o[key] === void 0) {\n            return o.__default || (passthru ? key : undefined);\n          } else {\n            return o[key];\n          }\n        }; }(obj));\n      }\n    } else {\n      result = function (passthru) { return passthru; };\n    }\n  }\n  return result;\n}\n```"
            ],
            [
                158,
                "javascript",
                "getRequiredAuthorizations",
                "```javascript\nfunction getRequiredAuthorizations(doc, oldDoc, authorizationDefinition) {\n    var authorizationMap = utils.resolveDocumentConstraint(authorizationDefinition);\n\n    if (utils.isValueNullOrUndefined(authorizationMap)) {\n      // This document type does not define any authorizations (channels, roles, users) at all\n      return null;\n    }\n\n    var requiredAuthorizations = [ ];\n    var writeAuthorizationFound = false;\n    if (authorizationMap.write) {\n      writeAuthorizationFound = true;\n      appendToAuthorizationList(requiredAuthorizations, authorizationMap.write);\n    }\n\n    if (doc._deleted) {\n      if (authorizationMap.remove) {\n        writeAuthorizationFound = true;\n        appendToAuthorizationList(requiredAuthorizations, authorizationMap.remove);\n      }\n    } else if (!utils.isDocumentMissingOrDeleted(oldDoc) && authorizationMap.replace) {\n      writeAuthorizationFound = true;\n      appendToAuthorizationList(requiredAuthorizations, authorizationMap.replace);\n    } else if (utils.isDocumentMissingOrDeleted(oldDoc) && authorizationMap.add) {\n      writeAuthorizationFound = true;\n      appendToAuthorizationList(requiredAuthorizations, authorizationMap.add);\n    }\n\n    if (writeAuthorizationFound) {\n      return requiredAuthorizations;\n    } else {\n      // This document type does not define any authorizations (channels, roles, users) that apply to this particular write operation type\n      return null;\n    }\n  }\n```"
            ],
            [
                719,
                "javascript",
                "",
                "```javascript\nfunction(target) {\n\tvar undef;\n\n\teach(arguments, function(arg, i) {\n\t\tif (i > 0) {\n\t\t\teach(arg, function(value, key) {\n\t\t\t\tif (value !== undef) {\n\t\t\t\t\tif (typeof(target[key]) === typeof(value) && (typeof(value) === 'object' || util.isArray(value))) {\n\t\t\t\t\t\textend(target[key], value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[key] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\treturn target;\n}\n```"
            ],
            [
                307,
                "javascript",
                "targetNodeHasChildrenExcludingPlaceholder",
                "```javascript\nfunction targetNodeHasChildrenExcludingPlaceholder(info) {\n    return findChild(info, info.targetNode.children, function (v) {\n      return v !== info.dplh;\n    });\n  }\n```"
            ],
            [
                911,
                "javascript",
                "makeAsyncIterator",
                "```javascript\nfunction makeAsyncIterator(bodyFunc, config, semaphore) {\n    // Return a function that returns an iterator.\n    return function iterable() {\n        // Capture the initial arguments used to start the iterator, as an array.\n        var startupArgs = new Array(arguments.length + 1); // Reserve 0th arg for the yield function. \n        for (var i = 0, len = arguments.length; i < len; ++i)\n            startupArgs[i + 1] = arguments[i];\n        // Create a yield() function tailored for this iterator.\n        var yield_ = function (expr) {\n            // Ensure this function is executing inside a fiber.\n            if (!Fiber.current) {\n                throw new Error('await functions, yield functions, and value-returning suspendable ' +\n                    'functions may only be called from inside a suspendable function. ');\n            }\n            // Notify waiters of the next result, then suspend the iterator.\n            if (runContext.callback)\n                runContext.callback(null, { value: expr, done: false });\n            if (runContext.resolver)\n                runContext.resolver.resolve({ value: expr, done: false });\n            Fiber.yield();\n        };\n        // Insert the yield function as the first argument when starting the iterator.\n        startupArgs[0] = yield_;\n        // Create the iterator.\n        var runContext = new RunContext(bodyFunc, this, startupArgs);\n        var iterator = new AsyncIterator(runContext, semaphore, config.returnValue, config.acceptsCallback);\n        // Wrap the given bodyFunc to properly complete the iteration.\n        runContext.wrapped = function () {\n            var len = arguments.length, args = new Array(len);\n            for (var i = 0; i < len; ++i)\n                args[i] = arguments[i];\n            bodyFunc.apply(this, args);\n            iterator.destroy();\n            return { done: true };\n        };\n        // Return the iterator.\n        return iterator;\n    };\n}\n```"
            ],
            [
                515,
                "javascript",
                "exportSql",
                "```javascript\nfunction exportSql(obj, callback) {\n    var str = '';\n    if (Array.isArray(obj)) {\n        for (var i = 0; i < obj.length; ++i) {\n            if (obj[i].type == 'struct' && base.isExportTypeString(obj[i].name)) {\n                var cs = exportTable(obj[i], callback, obj);\n                if (cs == undefined) {\n                    return ;\n                }\n\n                str += cs + '\\r\\n';\n            }\n        }\n\n        return str;\n    }\n\n    return ;\n}\n```"
            ],
            [
                89,
                "javascript",
                "",
                "```javascript\nfunction(config) {\n        var defaultSetupConfig = Ext.defaultSetupConfig,\n            emptyFn = Ext.emptyFn,\n            onReady = config.onReady || emptyFn,\n            onUpdated = config.onUpdated || emptyFn,\n            scope = config.scope,\n            requires = Ext.Array.from(config.requires),\n            extOnReady = Ext.onReady,\n            head = Ext.getHead(),\n            callback, viewport, precomposed;\n\n        Ext.setup = function() {\n            throw new Error(\"Ext.setup has already been called before\");\n        };\n\n        delete config.requires;\n        delete config.onReady;\n        delete config.onUpdated;\n        delete config.scope;\n\n        Ext.require(['Ext.event.Dispatcher']);\n\n        callback = function() {\n            var listeners = Ext.setupListeners,\n                ln = listeners.length,\n                i, listener;\n\n            delete Ext.setupListeners;\n            Ext.isSetup = true;\n\n            for (i = 0; i < ln; i++) {\n                listener = listeners[i];\n                listener.fn.call(listener.scope);\n            }\n\n            Ext.onReady = extOnReady;\n            Ext.onReady(onReady, scope);\n        };\n\n        Ext.onUpdated = onUpdated;\n        Ext.onReady = function(fn, scope) {\n            var origin = onReady;\n\n            onReady = function() {\n                origin();\n                Ext.onReady(fn, scope);\n            };\n        };\n\n        config = Ext.merge({}, defaultSetupConfig, config);\n\n        Ext.onDocumentReady(function() {\n            Ext.factoryConfig(config, function(data) {\n                Ext.event.Dispatcher.getInstance().setPublishers(data.eventPublishers);\n\n                if (data.logger) {\n                    Ext.Logger = data.logger;\n                }\n\n                if (data.animator) {\n                    Ext.Animator = data.animator;\n                }\n\n                if (data.viewport) {\n                    Ext.Viewport = viewport = data.viewport;\n\n                    if (!scope) {\n                        scope = viewport;\n                    }\n\n                    Ext.require(requires, function() {\n                        Ext.Viewport.on('ready', callback, null, {single: true});\n                    });\n                }\n                else {\n                    Ext.require(requires, callback);\n                }\n            });\n\n            if (!Ext.microloaded && navigator.userAgent.match(/IEMobile\\/10\\.0/)) {\n                var msViewportStyle = document.createElement(\"style\");\n                msViewportStyle.appendChild(\n                    document.createTextNode(\n                        \"@media screen and (orientation: portrait) {\" +\n                            \"@-ms-viewport {width: 320px !important;}\" +\n                        \"}\" +\n                        \"@media screen and (orientation: landscape) {\" +\n                            \"@-ms-viewport {width: 560px !important;}\" +\n                        \"}\"\n                    )\n                );\n                head.appendChild(msViewportStyle);\n            }\n        });\n\n        function addMeta(name, content) {\n            var meta = document.createElement('meta');\n\n            meta.setAttribute('name', name);\n            meta.setAttribute('content', content);\n            head.append(meta);\n        }\n\n        function addIcon(href, sizes, precomposed) {\n            var link = document.createElement('link');\n            link.setAttribute('rel', 'apple-touch-icon' + (precomposed ? '-precomposed' : ''));\n            link.setAttribute('href', href);\n            if (sizes) {\n                link.setAttribute('sizes', sizes);\n            }\n            head.append(link);\n        }\n\n        function addStartupImage(href, media) {\n            var link = document.createElement('link');\n            link.setAttribute('rel', 'apple-touch-startup-image');\n            link.setAttribute('href', href);\n            if (media) {\n                link.setAttribute('media', media);\n            }\n            head.append(link);\n        }\n\n        var icon = config.icon,\n            isIconPrecomposed = Boolean(config.isIconPrecomposed),\n            startupImage = config.startupImage || {},\n            statusBarStyle = config.statusBarStyle || 'black',\n            devicePixelRatio = window.devicePixelRatio || 1;\n\n\n        if (navigator.standalone) {\n            addMeta('viewport', 'width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0');\n        }\n        else {\n            addMeta('viewport', 'initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, minimum-ui');\n        }\n        addMeta('apple-mobile-web-app-capable', 'yes');\n        addMeta('apple-touch-fullscreen', 'yes');\n        if (Ext.browser.is.ie) {\n            addMeta('msapplication-tap-highlight', 'no');\n        }\n\n        // status bar style\n        if (statusBarStyle) {\n            addMeta('apple-mobile-web-app-status-bar-style', statusBarStyle);\n        }\n\n        if (Ext.isString(icon)) {\n            icon = {\n                57: icon,\n                72: icon,\n                114: icon,\n                144: icon\n            };\n        }\n        else if (!icon) {\n            icon = {};\n        }\n\n        //<deprecated product=touch since=2.0.1>\n        if ('phoneStartupScreen' in config) {\n            //<debug warn>\n            Ext.Logger.deprecate(\"[Ext.setup()] 'phoneStartupScreen' config is deprecated, please use 'startupImage' \" +\n                \"config instead. Refer to the latest API docs for more details\");\n            //</debug>\n            config['320x460'] = config.phoneStartupScreen;\n        }\n\n        if ('tabletStartupScreen' in config) {\n            //<debug warn>\n            Ext.Logger.deprecate(\"[Ext.setup()] 'tabletStartupScreen' config is deprecated, please use 'startupImage' \" +\n                \"config instead. Refer to the latest API docs for more details\");\n            //</debug>\n            config['768x1004'] = config.tabletStartupScreen;\n        }\n\n        if ('glossOnIcon' in config) {\n            //<debug warn>\n            Ext.Logger.deprecate(\"[Ext.setup()] 'glossOnIcon' config is deprecated, please use 'isIconPrecomposed' \" +\n                \"config instead. Refer to the latest API docs for more details\");\n            //</debug>\n            isIconPrecomposed = Boolean(config.glossOnIcon);\n        }\n        //</deprecated>\n\n        if (Ext.os.is.iPad) {\n            if (devicePixelRatio >= 2) {\n                // Retina iPad - Landscape\n                if ('1496x2048' in startupImage) {\n                    addStartupImage(startupImage['1496x2048'], '(orientation: landscape)');\n                }\n                // Retina iPad - Portrait\n                if ('1536x2008' in startupImage) {\n                    addStartupImage(startupImage['1536x2008'], '(orientation: portrait)');\n                }\n\n                // Retina iPad\n                if ('144' in icon) {\n                    addIcon(icon['144'], '144x144', isIconPrecomposed);\n                }\n            }\n            else {\n                // Non-Retina iPad - Landscape\n                if ('748x1024' in startupImage) {\n                    addStartupImage(startupImage['748x1024'], '(orientation: landscape)');\n                }\n                // Non-Retina iPad - Portrait\n                if ('768x1004' in startupImage) {\n                    addStartupImage(startupImage['768x1004'], '(orientation: portrait)');\n                }\n\n                // Non-Retina iPad\n                if ('72' in icon) {\n                    addIcon(icon['72'], '72x72', isIconPrecomposed);\n                }\n            }\n        }\n        else {\n            // Retina iPhone, iPod touch with iOS version >= 4.3\n            if (devicePixelRatio >= 2 && Ext.os.version.gtEq('4.3')) {\n                if (Ext.os.is.iPhone5) {\n                    addStartupImage(startupImage['640x1096']);\n                } else {\n                    addStartupImage(startupImage['640x920']);\n                }\n\n                // Retina iPhone and iPod touch\n                if ('114' in icon) {\n                    addIcon(icon['114'], '114x114', isIconPrecomposed);\n                }\n            }\n            else {\n                addStartupImage(startupImage['320x460']);\n\n                // Non-Retina iPhone, iPod touch, and Android devices\n                if ('57' in icon) {\n                    addIcon(icon['57'], null, isIconPrecomposed);\n                }\n            }\n        }\n    }\n```"
            ],
            [
                514,
                "javascript",
                "",
                "```javascript\nfunction() {\n\n\t\t// Reset index\n\t\tthis.index = [];\n\n\t\t// Apply extends to the objects\n\t\tfor (var i=0, l=this._objTree.length; i<l; ++i) {\n\t\t\tif (this.objects[this._objTree[i][0]] === undefined) {\n\t\t\t\tthrow \"Extending unknown object \"+this._objTree[i][0];\n\t\t\t}\n\n\t\t\t// Apply\n\t\t\tthis.objects[this._objTree[i][1]].applyExtend(\n\t\t\t\tthis.objects[this._objTree[i][0]]\n\t\t\t);\n\t\t}\n\n\t\t// Resolve dependencies\n\t\tvar deps = toposort( this._objTree ).reverse(), used = {};\n\t\tfor (var i=0, l=deps.length; i<l; ++i) {\n\t\t\tused[deps[i]] = 1;\n\t\t\tthis.objects[deps[i]].id = this.index.length;\n\t\t\tthis.index.push( this.objects[deps[i]] );\n\t\t}\n\n\t\t// Then include objects not part of dependency tree\n\t\tfor (var i=0, l=this._objList.length; i<l; ++i) {\n\t\t\t// Skip objects already used in the dependency resolution\n\t\t\tif (!used[this._objList[i]])  {\n\t\t\t\tthis.index.push( this.objects[this._objList[i]] );\n\t\t\t}\n\t\t}\n\n\t\t// Then pre-cache property IDs for all the propeties\n\t\t// and check if any of the objects has embeds\n\t\tfor (var i=0, l=this.index.length; i<l; ++i) {\n\t\t\tvar pp = this.index[i].properties;\n\t\t\tfor (var j=0, jl=pp.length; j<jl; ++j) {\n\t\t\t\tthis.propertyVar(pp[j]);\n\t\t\t}\n\t\t\tif (this.index[i].embed.length > 0) {\n\t\t\t\tthis.hasEmbed = true;\n\t\t\t}\n\t\t}\n\n\t\t// Separate to frequent and infrequent objects\n\t\tfor (var i=0, l=this.index.length; i<l; ++i) {\n\t\t\tvar obj = this.index[i], isFreq = obj.frequent;\n\n\t\t\t// Make sure we only register 5-bit objects\n\t\t\tif (isFreq) {\n\t\t\t\tif (this._objFreq.length >= MAX_FREQ_ITEMS) {\n\t\t\t\t\tisFreq = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Put on frequent or infrequent table\n\t\t\tif (isFreq) {\n\t\t\t\tobj.id = this._objFreq.length;\n\t\t\t\tthis._objFreq.push(obj);\n\t\t\t} else {\n\t\t\t\tobj.id = this._objInfeq.length+MAX_FREQ_ITEMS;\n\t\t\t\tthis._objInfeq.push(obj);\n\t\t\t}\n\n\t\t}\n\n\t}\n```"
            ],
            [
                33,
                "javascript",
                "_afterReplacingAllCollections",
                "```javascript\nfunction _afterReplacingAllCollections(err) {\n              if (err) { return done(err); }\n  \n  \n              //  \u2554\u2550\u2557\u2554\u2550\u2557\u2554\u2566\u2557\u2554\u2550\u2557\u2566\u2550\u2557  \u252c \u252c\u250c\u2500\u2510\u250c\u252c\u2510\u250c\u2500\u2510\u250c\u252c\u2510\u250c\u2500\u2510  \u250c\u2500\u2510\u250c\u2500\u2510\u252c  \u252c  \u250c\u2510 \u250c\u2500\u2510\u250c\u2500\u2510\u252c\u250c\u2500\n              //  \u2560\u2550\u2563\u2560\u2563  \u2551 \u2551\u2563 \u2560\u2566\u255d  \u2502 \u2502\u251c\u2500\u2518 \u2502\u2502\u251c\u2500\u2524 \u2502 \u251c\u2524   \u2502  \u251c\u2500\u2524\u2502  \u2502  \u251c\u2534\u2510\u251c\u2500\u2524\u2502  \u251c\u2534\u2510\n              //  \u2569 \u2569\u255a   \u2569 \u255a\u2550\u255d\u2569\u255a\u2550  \u2514\u2500\u2518\u2534  \u2500\u2534\u2518\u2534 \u2534 \u2534 \u2514\u2500\u2518  \u2514\u2500\u2518\u2534 \u2534\u2534\u2500\u2518\u2534\u2500\u2518\u2514\u2500\u2518\u2534 \u2534\u2514\u2500\u2518\u2534 \u2534\n              // Run \"after\" lifecycle callback AGAIN and AGAIN- once for each record.\n              // ============================================================\n              // FUTURE: look into this\n              // (we probably shouldn't call this again and again--\n              // plus what if `fetch` is not in use and you want to use an LC?\n              // Then again- the right answer isn't immediately clear.  And it\n              // probably not worth breaking compatibility until we have a much\n              // better solution)\n              // ============================================================\n              async.each(transformedRecords, function _eachRecord(record, next) {\n  \n                // If the `skipAllLifecycleCallbacks` meta flag was set, don't run any of\n                // the methods.\n                if (_.has(query.meta, 'skipAllLifecycleCallbacks') && query.meta.skipAllLifecycleCallbacks) {\n                  return next();\n                }\n  \n                // Skip \"after\" lifecycle callback, if not defined.\n                if (!_.has(WLModel._callbacks, 'afterUpdate')) {\n                  return next();\n                }\n  \n                // Otherwise run it.\n                WLModel._callbacks.afterUpdate(record, function _afterMaybeRunningAfterUpdateForThisRecord(err) {\n                  if (err) {\n                    return next(err);\n                  }\n  \n                  return next();\n                });\n  \n              },// ~\u221e%\u00b0\n              function _afterIteratingOverRecords(err) {\n                if (err) {\n                  return done(err);\n                }\n  \n                return done(undefined, transformedRecords);\n  \n              });//</ async.each() -- ran \"after\" lifecycle callback on each record >\n  \n            }\n```"
            ],
            [
                293,
                "javascript",
                "",
                "```javascript\nfunction(nodes) {\n    if (!Array.isArray(nodes)) {\n      throw new TypeError('expected an array');\n    }\n    var len = nodes.length;\n    var idx = -1;\n    while (++idx < len) {\n      this.visit(nodes[idx], nodes, idx);\n    }\n    return this;\n  }\n```"
            ],
            [
                61,
                "javascript",
                "",
                "```javascript\nfunction (bundleName, filter) {\n        var bundle = this._bundles[bundleName];\n        if (!bundle) {\n            throw new Error('Unknown bundle \"' + bundleName + '\"');\n        }\n        return this._walkBundleResources(bundle, filter);\n    }\n```"
            ],
            [
                78,
                "javascript",
                "createFile",
                "```javascript\nfunction createFile (filePath, fileContent) {\n\tvar folderPath = filePath.split('/');\n\tfolderPath.pop();\n\tfolderPath = folderPath.join('/');\n\n\tif (!Utils.exist(folderPath))\n\t\tcreateFolder(folderPath);\n\n\tfs.writeFileSync(filePath, fileContent);\n\tUtils.log('Created file: ' + filePath);\n\n\treturn Utils;\n}\n```"
            ],
            [
                960,
                "javascript",
                "insertCss",
                "```javascript\nfunction insertCss(name) {\n  const cssIndexPath = path.resolve(__dirname, '../assets/index.scss');\n  const cssIndexFile = fs.readFileSync(cssIndexPath, { encoding: 'utf-8' });\n  const cssImportStr = `@import './${name}';`;\n\n  const cssIndexFileArr = cssIndexFile.trim().split('\\n');\n  cssIndexFileArr.push(cssImportStr);\n\n  // Make sure base comes first\n  const base = cssIndexFileArr.splice(0, 1);\n  sortByModulePath(cssIndexFileArr);\n  cssIndexFileArr.unshift(base);\n\n  fs.writeFileSync(cssIndexPath, `${cssIndexFileArr.join('\\n')}\\n`);\n}\n```"
            ],
            [
                874,
                "javascript",
                "formatSnapshotList",
                "```javascript\nfunction formatSnapshotList(list, limit) {\n  limit = (typeof limit != 'undefined') ? limit : -1;\n\n  const limitedList = limit > 0 ? list.slice(0, limit) : list;\n  const hasMore = list.length > limitedList.length;\n  const buildList = (snapshots) => snapshots.map((s) => s.join(' > ')).join('\\n');\n\n  if (hasMore) {\n    return buildList(limitedList.slice(0, -1)) + `\\n +${list.length - limitedList.length + 1} more`;\n  }\n\n  return buildList(limitedList);\n}\n```"
            ],
            [
                303,
                "javascript",
                "Strategy",
                "```javascript\nfunction Strategy(options, verify) {\n  options = options || {};\n  options.clientID = options.clientID || {};\n  options.clientSecret = options.clientSecret || {};\n  options.grant_type = \"password\";\n  options.skipUserProfile = true;\n  options.authorizationURL = options.authorizationURL || 'https://winkapi.quirky.com/oauth2/token';\n  options.tokenURL = options.tokenURL || 'https://winkapi.quirky.com/oauth2/token';\n  OAuth2Strategy.call(this, options, verify);\n  this.name = 'wink';\n}\n```"
            ]
        ]
    },
    "Test-javascript MRR (bs=1,000)": 0.01714857661262284,
    "Examples-FuncNameTest-javascript": {
        "_type": "table",
        "columns": [
            "Rank",
            "Language",
            "Query",
            "Code"
        ],
        "data": [
            [
                873,
                "javascript",
                "loader",
                "```javascript\nfunction loader ( module, filePath ) {\n\n    let content = fs.readFileSync(filePath, 'utf8');\n    let moduleId = `data-v-${ hash(filePath) }`;\n\n    let vueTemplate = '';\n    let vueComponent = compiler.parseComponent(stripBom(content));\n\n    let script = vueComponent.script;\n    let styles = vueComponent.styles;\n    let template = vueComponent.template;\n\n    let scoped = styles.some(({ attrs }) => attrs.scoped);\n\n    [].concat(script, template, styles).forEach(( tag, index ) => {\n        if (tag) {\n            let type = tag.type;\n            let content = tag.content;\n            let lang = tag.attrs.lang || store[type].defaults;\n            let handler = store[type].langs[lang];\n            if (handler) {\n                content = handler(content, filePath, index, module);\n            }\n            switch (type) {\n                case 'style':\n                    if (browserEnv) {\n                        /**\n                         * Only in Browser Environment, append style to head\n                         */\n                        if (tag.attrs.scoped) {\n                            let ast = css.parse(content);\n                            ast.stylesheet.rules.forEach(( rule ) => {\n                                rule.selectors = rule.selectors.map(( selector ) => {\n                                    let [ patterns ] = cssWhat(selector);\n                                    let index = patterns.length - 1;\n                                    for (; index >= 0; index--) {\n                                        let { type } = patterns[index];\n                                        if (type !== 'pseudo' && type !== 'pseudo-element') {\n                                            break;\n                                        }\n                                    }\n                                    patterns.splice(index + 1, 0, {\n                                        value : '',\n                                        name : moduleId,\n                                        action : 'exists',\n                                        type : 'attribute',\n                                        ignoreCase : false,\n                                    });\n                                    return cssWhat.stringify([patterns]);\n                                });\n                            });\n                            content = css.stringify(ast);\n                        }\n                        let style = document.createElement('style');\n                        style.innerHTML = content;\n                        store.style.exports.call(module.exports, style, {\n                            index,\n                            styles,\n                            filePath,\n                        });\n                    }\n                    break;\n                case 'script':\n                    module._compile(content, filePath);\n                    break;\n                case 'template':\n                    if (browserEnv) {\n                        /**\n                         * Only in Browser Environment, set Attribute for each element\n                         */\n                        if (scoped) {\n                            let div = document.createElement('div');\n                            div.innerHTML = content;\n                            let root = div.firstElementChild;\n                            let walk = function walk ( element, handler ) {\n                                handler(element);\n                                let children = element.children || [];\n                                [].forEach.call(children, ( child ) => {\n                                    walk(child, handler);\n                                });\n                            };\n                            walk(root, ( element ) => {\n                                element.setAttribute(moduleId, '');\n                            });\n                            content = div.innerHTML;\n                        }\n                    }\n                    vueTemplate = content;\n                    break;\n            }\n        }\n    });\n\n    module.exports.vueComponent = vueComponent;\n    module.exports.template = vueTemplate;\n}\n```"
            ],
            [
                304,
                "javascript",
                "",
                "```javascript\nfunction (options) {\n  if (arguments.length < 1 || !options.appKey || !options.appSecret) {\n    throw paramError;\n  }\n  if (!options.private) {\n    if (!options.callbackUrl) {\n      throw paramError;\n    }\n    options.scope || (options.scope = ['read_basic']);\n  }\n\n  this.app_key = options.appKey || '';\n  this.app_secret = options.appSecret || '';\n  this.private = options.private || false;\n  this.callback_url = options.callbackUrl || '';\n  this.scope = options.scope || '';\n  this.redirect_url = options.redirectUrl || '';\n  this.protocol = options.protocol || config.httpProtocol;\n  this.host = options.host || config.appHost;\n  this._request = new Request({\n    protocol: this.protocol,\n  });\n}\n```"
            ],
            [
                302,
                "javascript",
                "",
                "```javascript\nfunction (format) {\n        var args = Ext.toArray(arguments, 1);\n        return format.replace(Ext.util.Format.formatRe, function(m, i) {\n            return args[i];\n        });\n    }\n```"
            ],
            [
                599,
                "javascript",
                "checkID",
                "```javascript\nfunction checkID (expectedIdAndVersion, pinfo) {\n    if (!expectedIdAndVersion) return;\n\n    var parsedSpec = pluginSpec.parse(expectedIdAndVersion);\n\n    if (parsedSpec.id !== pinfo.id) {\n        throw new Error('Expected plugin to have ID \"' + parsedSpec.id + '\" but got \"' + pinfo.id + '\".');\n    }\n\n    if (parsedSpec.version && !semver.satisfies(pinfo.version, parsedSpec.version)) {\n        throw new Error('Expected plugin ' + pinfo.id + ' to satisfy version \"' + parsedSpec.version + '\" but got \"' + pinfo.version + '\".');\n    }\n}\n```"
            ],
            [
                593,
                "javascript",
                "ServerSideSortingRequestControl",
                "```javascript\nfunction ServerSideSortingRequestControl(options) {\n  assert.optionalObject(options);\n  options = options || {};\n  options.type = ServerSideSortingRequestControl.OID;\n  if (options.value) {\n    if (Buffer.isBuffer(options.value)) {\n      this.parse(options.value);\n    } else if (Array.isArray(options.value)) {\n      assert.arrayOfObject(options.value, 'options.value must be Objects');\n      for (var i = 0; i < options.value.length; i++) {\n        if (!options.value[i].hasOwnProperty('attributeType')) {\n          throw new Error('Missing required key: attributeType');\n        }\n      }\n      this._value = options.value;\n    } else if (typeof (options.value) === 'object') {\n      if (!options.value.hasOwnProperty('attributeType')) {\n        throw new Error('Missing required key: attributeType');\n      }\n      this._value = [options.value];\n    } else {\n      throw new TypeError('options.value must be a Buffer, Array or Object');\n    }\n    options.value = null;\n  }\n  Control.call(this, options);\n}\n```"
            ],
            [
                1,
                "javascript",
                "getJsxAttributePropertySymbol",
                "```javascript\nfunction getJsxAttributePropertySymbol(attrib) {\n            var attributesType = getJsxElementAttributesType(attrib.parent);\n            var prop = getPropertyOfType(attributesType, attrib.name.text);\n            return prop || unknownSymbol;\n        }\n```"
            ],
            [
                858,
                "javascript",
                "stats_calculate_coverage",
                "```javascript\nfunction stats_calculate_coverage(moduleName) {\n    var stats = sb.trigger('*:stats-get', moduleName, null)[1],\n        total,\n        covered,\n        lineId,\n        lineNum,\n        parts;\n\n    var lineReport = {};\n\n    if (!stats.lines) {\n        return;\n    }\n    stats.coverage = {};\n\n    covered = 0;\n    total = stats.lines.length;\n    for (lineId in stats.runLines) {\n        if (stats.runLines[lineId] > 0) {\n            covered++;\n        } else {\n            lineNum = lineId;\n            if (!lineReport[lineNum]) {\n                lineReport[lineNum] = {};\n            }\n            lineReport[lineNum].lines = false;\n        }\n    }\n    stats.coverage.lines = {\n        total: total,\n        covered: covered,\n        percentage: 100.0 * (total ? covered / total : 1)\n    };\n\n    covered = 0;\n    total = stats.functions.length;\n    for (lineId in stats.runFunctions) {\n        if (stats.runFunctions[lineId] > 0) {\n            covered++;\n        } else {\n            parts = lineId.split(':');\n            lineNum = parts[1];\n            if (!lineReport[lineNum]) {\n                lineReport[lineNum] = {};\n            }\n            if (!lineReport[lineNum].functions) {\n                lineReport[lineNum].functions = [];\n            }\n            lineReport[lineNum].functions.push(parts[0]);\n        }\n    }\n    stats.coverage.functions = {\n        total:total,\n        covered:covered,\n        percentage:100.0 * (total ? covered / total : 1)\n    };\n\n    covered = 0;\n    total = stats.conditions.length;\n    for (lineId in stats.runConditions) {\n        if (stats.runConditions[lineId][1] > 0) {\n            covered += 1;\n        }\n\n        if (stats.runConditions[lineId][1] === 0) {\n\n            parts = lineId.split(':');\n            lineNum = parts[1];\n            if (!lineReport[lineNum]) {\n                lineReport[lineNum] = {};\n            }\n            if (!lineReport[lineNum].conditions) {\n                lineReport[lineNum].conditions = [];\n            }\n            lineReport[lineNum].conditions.push(stats.runConditions[lineId]);\n        }\n    }\n    stats.coverage.conditions = {\n        total:total,\n        covered:covered,\n        percentage:100.0 * (total ? covered / total : 1)\n    };\n    stats.coverage.report = lineReport;\n}\n```"
            ],
            [
                303,
                "javascript",
                "",
                "```javascript\nfunction (val, size, ch) {\n        var result = String(val);\n        ch = ch || \" \";\n        while (result.length < size) {\n            result = ch + result;\n        }\n        return result;\n    }\n```"
            ],
            [
                320,
                "javascript",
                "",
                "```javascript\nfunction(name, _skipAssert) {\n    var container = this.container,\n        route = container.lookup('route:'+name),\n        controller;\n\n    if (route && route.controllerName) {\n      name = route.controllerName;\n    }\n\n    controller = container.lookup('controller:' + name);\n\n    // NOTE: We're specifically checking that skipAssert is true, because according\n    //   to the old API the second parameter was model. We do not want people who\n    //   passed a model to skip the assertion.\n    Ember.assert(\"The controller named '\"+name+\"' could not be found. Make sure \" +\n                 \"that this route exists and has already been entered at least \" +\n                 \"once. If you are accessing a controller not associated with a \" +\n                 \"route, make sure the controller class is explicitly defined.\",\n                 controller || _skipAssert === true);\n\n    return controller;\n  }\n```"
            ],
            [
                720,
                "javascript",
                "DockerCmdManager",
                "```javascript\nfunction DockerCmdManager(dockerdescPath) {\n    dockerdescPath = dockerdescPath || './dockerdesc.json';\n\n    if (!fs.existsSync(dockerdescPath)) {\n        throw new Error(util.format('The path \"%s\" does not exists.', dockerdescPath));\n    }\n    /** @type {string} */\n    this.dockerdescDir = path.dirname(dockerdescPath);\n\n    var dockerdescPathStat = fs.statSync(dockerdescPath);\n    if (dockerdescPathStat.isDirectory()) {\n        this.dockerdescDir = dockerdescPath;\n        dockerdescPath = path.join(dockerdescPath, 'dockerdesc.json');\n    }\n    /** @type {Dockerdesc} */\n    var dockerdescContent = fs.readFileSync(dockerdescPath);\n    try {\n        this.dockerdesc = JSON.parse(dockerdescContent);\n    } catch (err) {\n        throw new Error('Problem in the dockerdesc.json file format.\\n' + err.stack);\n    }\n}\n```"
            ],
            [
                526,
                "javascript",
                "getRangeData",
                "```javascript\nfunction getRangeData ( quantifier ) {\n\n\tlet rangeType = dateRange.DAY;\n\tlet startRange = 'day';\n\n\tif ( /seconds?/i.test(quantifier) ) {\n\t\trangeType = dateRange.SEC;\n\t\tstartRange = 'second';\n\t} else if ( /minutes?/i.test(quantifier) ) {\n\t\trangeType = dateRange.MIN;\n\t\tstartRange = 'minute';\n\t} else if ( /hours?/i.test(quantifier) ) {\n\t\trangeType = dateRange.HOUR;\n\t\tstartRange = 'hour';\n\t} else if ( new RegExp(`${days.join('s?|')}s?`, 'i').test(quantifier) ) {\n\t\trangeType = dateRange.DAY * 7;\n\t\tstartRange = quantifier;\n\t}\n\n\treturn {\n\t\trangeType: rangeType,\n\t\tstartRange: startRange\n\t};\n\n}\n```"
            ],
            [
                322,
                "javascript",
                "",
                "```javascript\nfunction( model, coll, options ) {\n\t\t\tif ( ( this.keyId || this.keyId === 0 ) && model.id === this.keyId ) { // since 0 can be a valid `id` as well\n\t\t\t\tthis.addRelated( model, options );\n\t\t\t\tthis.keyId = null;\n\t\t\t}\n\t\t}\n```"
            ],
            [
                585,
                "javascript",
                "SearchEntry",
                "```javascript\nfunction SearchEntry(options) {\n  options = options || {};\n  assert.object(options);\n  lassert.optionalStringDN(options.objectName);\n\n  options.protocolOp = Protocol.LDAP_REP_SEARCH_ENTRY;\n  LDAPMessage.call(this, options);\n\n  this.objectName = options.objectName || null;\n  this.setAttributes(options.attributes || []);\n}\n```"
            ],
            [
                322,
                "javascript",
                "",
                "```javascript\nfunction(item) {\n        var key = this.getKey(item);\n        if (key) {\n            return this.containsKey(key);\n        } else {\n            return Ext.Array.contains(this.items, item);\n        }\n    }\n```"
            ],
            [
                478,
                "javascript",
                "runAsync",
                "```javascript\nfunction runAsync () {\n    if (runIndex++ < sampleSize) {\n      fn.call(child, function () {\n        setTimeout(runAsync, 0)\n      })\n    } else {\n      setTimeout(finishChild, 0)\n    }\n  }\n```"
            ],
            [
                530,
                "javascript",
                "giveNameToAnonymousFunction",
                "```javascript\nfunction giveNameToAnonymousFunction () {\n\t\tvar node = this;\n\n\t\tif (node[0].name == \"var\" || node[0].name == \"object\") {\n\t\t\tnode[1].forEach(function (assignemt) {\n\t\t\t\tif (assignemt[1]) {\n\t\t\t\t\tif (assignemt[1][0].name === \"function\") {\n\t\t\t\t\t\tassignemt[1][0].anonymousName = assignemt[0];\n\t\t\t\t\t} else if (assignemt[1][0].name === \"conditional\") {\n\t\t\t\t\t\tif (assignemt[1][2][0] && assignemt[1][2][0].name === \"function\") {\n\t\t\t\t\t\t\tassignemt[1][2][0].anonymousName = assignemt[0];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (assignemt[1][3][0] && assignemt[1][3][0].name === \"function\") {\n\t\t\t\t\t\t\tassignemt[1][3][0].anonymousName = assignemt[0];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (node[0].name == \"assign\" && node[1] === true) {\n\t\t\tif (node[3][0].name === \"function\") {\n\t\t\t\tnode[3][0].anonymousName = getNameFromAssign(node);\n\t\t\t} else if (node[3][0] === \"conditional\") {\n\t\t\t\tif (node[3][2][0] && node[3][2][0].name === \"function\") {\n\t\t\t\t\tnode[3][2][0].anonymousName = getNameFromAssign(node);\n\t\t\t\t}\n\t\t\t\tif (node[3][3][0] && node[3][3][0].name === \"function\") {\n\t\t\t\t\tnode[3][3][0].anonymousName = getNameFromAssign(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```"
            ],
            [
                321,
                "javascript",
                "",
                "```javascript\nfunction(sorterFn) {\n        var me     = this,\n            items  = me.items,\n            keys   = me.keys,\n            length = items.length,\n            temp   = [],\n            i;\n\n        //first we create a copy of the items array so that we can sort it\n        for (i = 0; i < length; i++) {\n            temp[i] = {\n                key  : keys[i],\n                value: items[i],\n                index: i\n            };\n        }\n\n        Ext.Array.sort(temp, function(a, b) {\n            var v = sorterFn(a.value, b.value);\n            if (v === 0) {\n                v = (a.index < b.index ? -1 : 1);\n            }\n\n            return v;\n        });\n\n        //copy the temporary array back into the main this.items and this.keys objects\n        for (i = 0; i < length; i++) {\n            items[i] = temp[i].value;\n            keys[i]  = temp[i].key;\n        }\n\n        me.fireEvent('sort', me, items, keys);\n    }\n```"
            ],
            [
                318,
                "javascript",
                "",
                "```javascript\nfunction(modules, needs, arr) {\n\t\tarr = arr || [];\n\n\t\t// todo - this assumes the entire set of dependencies exists on the device (i.e. a module with the same n/f values)\n\t\t// but this is not the case, e.g. when upgrading from a 2 module system to 3 module system.\n\t\tfor (var i = 0; i < modules.length; i++) {\n\t\t\tvar m = modules[i];\n\n\t\t\tif (m.n !== needs.n) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (m.f !== needs.f) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//found one!\n\t\t\tif (m.v < needs.v) {\n\t\t\t\t//\n\t\t\t\t// it's...\n\t\t\t\t//\t  .---.       .-''-.     .-'''-.    .-'''-.     ,---------. .---.  .---.    ____    ,---.   .--.\n\t\t\t\t//\t  | ,_|     .'_ _   \\   / _     \\  / _     \\    \\          \\|   |  |_ _|  .'  __ `. |    \\  |  |\n\t\t\t\t//\t,-./  )    / ( ` )   ' (`' )/`--' (`' )/`--'     `--.  ,---'|   |  ( ' ) /   '  \\  \\|  ,  \\ |  |\n\t\t\t\t//\t\\  '_ '`) . (_ o _)  |(_ o _).   (_ o _).           |   \\   |   '-(_{;}_)|___|  /  ||  |\\_ \\|  |\n\t\t\t\t//\t > (_)  ) |  (_,_)___| (_,_). '.  (_,_). '.         :_ _:   |      (_,_)    _.-`   ||  _( )_\\  |\n\t\t\t\t//\t(  .  .-' '  \\   .---..---.  \\  :.---.  \\  :        (_I_)   | _ _--.   | .'   _    || (_ o _)  |\n\t\t\t\t//\t `-'`-'|___\\  `-'    /\\    `-'  |\\    `-'  |       (_(=)_)  |( ' ) |   | |  _( )_  ||  (_,_)\\  |\n\t\t\t\t//\t  |        \\\\       /  \\       /  \\       /         (_I_)   (_{;}_)|   | \\ (_ o _) /|  |    |  |\n\t\t\t\t//\t  `--------` `'-..-'    `-...-'    `-...-'          '---'   '(_,_) '---'  '.(_,_).' '--'    '--'\n\t\t\t\t//\n\n\t\t\t\t//arr.push(m);\n\n\t\t\t\t// instead of returning the module we found, lets return the module with the version we need,\n\t\t\t\t// and any dependencies it requires, I think that's more clear.\n\n\t\t\t\tvar missing = extend(m, { v: needs.v });\n\t\t\t\tarr.push(missing);\n\t\t\t\t// todo mdm - this is wrong. we shouldn't be fabricating dependencies for a new version of a module\n\t\t\t\t// (need) from the installed version (m) - dependencies can and do change between versions.\n\t\t\t\t// The database of known modules should be the definitive source of module dependencies.\n\n\t\t\t\t// if we're updating this, we better check its dependencies too.\n\t\t\t\tif (m.d && (m.d.length > 0)) {\n\t\t\t\t\t//oh no!  this module has dependencies!\n\t\t\t\t\t// do we have to update those too?\n\t\t\t\t\t// (this doesn't fully make sense to me right now, but lets go with it.)\n\t\t\t\t\t// todo mdm - this won't do anything, since `m` is always a satisfied dependency\n\t\t\t\t\t// (it came from the modules array.)\n\t\t\t\t\t// at the very least we should be iterating over m.d[] as the needed modules\n\t\t\t\t\tarr = this._walkChain(modules, m, arr);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn arr;\n\t}\n```"
            ],
            [
                395,
                "javascript",
                "setInMessage",
                "```javascript\nfunction setInMessage(obj, root) {\n    obj.inmessage = true;\n\n    if (obj.type == 'static' || obj.type == 'struct' || obj.type == 'message') {\n        for (var i = 0; i < obj.val.length; ++i) {\n            var cval = obj.val[i];\n            if (cval.hasOwnProperty('type2') && 'expand' == cval.type2) {\n                continue ;\n            }\n\n            var mytype = getRealType(cval.type, root);\n            if (isBaseType(mytype)) {\n                continue ;\n            }\n\n            setInMessage(getGlobalObj(mytype, root), root);\n        }\n    }\n}\n```"
            ],
            [
                585,
                "javascript",
                "position",
                "```javascript\nfunction position(row, u, rect, flush) {\n    var i = -1,\n        n = row.length,\n        x = rect.x,\n        y = rect.y,\n        v = u ? round(row.area / u) : 0,\n        o;\n    if (u == rect.dx) { // horizontal subdivision\n      if (flush || v > rect.dy) v = v ? rect.dy : 0; // over+underflow\n      while (++i < n) {\n        o = row[i];\n        o.x = x;\n        o.y = y;\n        o.dy = v;\n        x += o.dx = v ? round(o.area / v) : 0;\n      }\n      o.z = true;\n      o.dx += rect.x + rect.dx - x; // rounding error\n      rect.y += v;\n      rect.dy -= v;\n    } else { // vertical subdivision\n      if (flush || v > rect.dx) v = v ? rect.dx : 0; // over+underflow\n      while (++i < n) {\n        o = row[i];\n        o.x = x;\n        o.y = y;\n        o.dx = v;\n        y += o.dy = v ? round(o.area / v) : 0;\n      }\n      o.z = false;\n      o.dy += rect.y + rect.dy - y; // rounding error\n      rect.x += v;\n      rect.dx -= v;\n    }\n  }\n```"
            ],
            [
                965,
                "javascript",
                "custom",
                "```javascript\nfunction custom (fn) {\n  return function (req, res, next) {\n    fn(req, function (result) {\n      if (result === true) { return next(); }\n      next(new ErrorUnauthorized('Authentication Failed'));\n    });\n  };\n}\n```"
            ],
            [
                918,
                "javascript",
                "plural$1",
                "```javascript\nfunction plural$1(ms, n, name) {\n  if (ms < n) return;\n  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n```"
            ],
            [
                546,
                "javascript",
                "checkTypeAnnotationAsExpression",
                "```javascript\nfunction checkTypeAnnotationAsExpression(node) {\n            switch (node.kind) {\n                case 141 /* PropertyDeclaration */:\n                    checkTypeNodeAsExpression(node.type);\n                    break;\n                case 138 /* Parameter */:\n                    checkTypeNodeAsExpression(node.type);\n                    break;\n                case 143 /* MethodDeclaration */:\n                    checkTypeNodeAsExpression(node.type);\n                    break;\n                case 145 /* GetAccessor */:\n                    checkTypeNodeAsExpression(node.type);\n                    break;\n                case 146 /* SetAccessor */:\n                    checkTypeNodeAsExpression(ts.getSetAccessorTypeAnnotationNode(node));\n                    break;\n            }\n        }\n```"
            ],
            [
                314,
                "javascript",
                "",
                "```javascript\nfunction () {\r\n                var bytes = this._messageQueue.reduce(function (acc, message) {\r\n                    if (typeof message === 'string') {\r\n                        acc += message.length; // not byte size\r\n                    }\r\n                    else if (message instanceof Blob) {\r\n                        acc += message.size;\r\n                    }\r\n                    else {\r\n                        acc += message.byteLength;\r\n                    }\r\n                    return acc;\r\n                }, 0);\r\n                return bytes + (this._ws ? this._ws.bufferedAmount : 0);\r\n            }\n```"
            ],
            [
                487,
                "javascript",
                "createZoomRangePath",
                "```javascript\nfunction createZoomRangePath(options) {\n      if (!angular.isObject(options.state)) {\n        options.state = {};\n      }\n      if (!angular.isObject(options.state.range)) {\n        options.state.range = [];\n      }\n    }\n```"
            ],
            [
                704,
                "javascript",
                "ElementNode",
                "```javascript\nfunction ElementNode(parent, tagname, attributes) {\n  Node.call(this, 'element', parent);\n\n  // Since this is an element there will minimum one tag\n  this.tags = (tagname === 'br' || tagname === 'wbr') ? 0 : 1;\n\n  // Element nodes also has a tagname and an attribute collection\n  this.tagname = tagname;\n  this.attr = attributes;\n  this.classes = attributes.hasOwnProperty('class') ?\n    attributes['class'].trim().split(WHITE_SPACE) : [];\n\n  // Add node to the classlist\n  this.root.classlist.addNode(this);\n\n  this._blockySelfCache = domHelpers.BLOCK_ELEMENTS.hasOwnProperty(tagname);\n  this._countTagnames = {};\n}\n```"
            ],
            [
                755,
                "javascript",
                "checkSquareInView",
                "```javascript\nfunction checkSquareInView(m, v) {\n        var check1 = checkInView(m, v.slice(0, 3));\n        var check2 = checkInView(m, v.slice(3, 6));\n        var check3 = checkInView(m, v.slice(6, 9));\n        var check4 = checkInView(m, v.slice(9, 12));\n        var testX = check1[0] + check2[0] + check3[0] + check4[0];\n        if ( testX == -4 || testX == 4 )\n            return false;\n        var testY = check1[1] + check2[1] + check3[1] + check4[1];\n        if ( testY == -4 || testY == 4 )\n            return false;\n        var testZ = check1[2] + check2[2] + check3[2] + check4[2];\n        return testZ != 4;\n        \n\n    }\n```"
            ],
            [
                579,
                "javascript",
                "reduceDirectories",
                "```javascript\nfunction reduceDirectories() {\n  return Array.prototype.slice.call(arguments)\n    .map(function (candidate) {\n      return path.normalize(candidate);\n    })\n    .filter(function (candidate) {\n      return fs.existsSync(candidate) && fs.statSync(candidate).isDirectory();\n    })\n    .shift();\n}\n```"
            ],
            [
                593,
                "javascript",
                "bind_d3",
                "```javascript\nfunction bind_d3(f, context) {\n    return function() {\n        var args = [this].concat([].slice.call(arguments)) // convert argument to array\n        f.apply(context, args)\n    }\n}\n```"
            ],
            [
                700,
                "javascript",
                "build",
                "```javascript\nfunction build(mode, system, cdef, out, cb) {\n    _containers.getHandler(system, cdef.type, function(err, container) {\n      if (err) { return cb(err); }\n      if (!container) {\n        err = new Error('no matching container available for type: ' + cdef.type);\n        logger.error(err.message);\n        return cb(err);\n      }\n\n      if (container.build) {\n        out.progress('--> executing container specific build for ' +  cdef.id);\n        logger.info({ containerDefinition: cdef.id }, 'executing container specific build');\n        container.build(mode, system, cdef, out, function(err, specific) {\n          if (err) { logger.error(err); out.stdout(err); return cb(err); }\n\n          out.progress('--> ' + cdef.id + ' built');\n          logger.info({ containerDefinition: cdef.id }, 'built');\n          cb(err);\n        });\n      } else {\n        out.progress('--> no need to build ' + cdef.id);\n        cb(null, {});\n      }\n    });\n  }\n```"
            ],
            [
                828,
                "javascript",
                "prepareJob",
                "```javascript\nfunction prepareJob(emitter, job) {\n  Project.findOne({ name: job.project }).populate('creator').exec(function (err, project) {\n    if (err || !project) return debug('job.prepare - failed to get project', job.project, err);\n    // ok so the project is real, we can go ahead and save this job\n    var provider = common.extensions.provider[project.provider.id];\n\n    if (!provider) {\n      return debug('job.prepare - provider not found for project', job.project, project.provider.id);\n    }\n\n    Job.create(job, function (err, mjob) {\n      if (err) return debug('job.prepare - failed to save job', job, err);\n\n      var jjob = mjob.toJSON();\n\n      jjob.project = project;\n      jjob.providerConfig = project.provider.config;\n      jjob.fromStriderJson = true;\n\n      striderJson(provider, project, job.ref, function (err, config) {\n        if (err) {\n          if (err.status === 403 || err.statusCode === 403) {\n            debug('job.prepare - access to strider.json is forbidden, skipping config merge');\n            config = {};\n            jjob.fromStriderJson = false;\n          } else if (err.status === 404 || err.statusCode === 404) {\n            debug('job.prepare - strider.json not found, skipping config merge');\n            config = {};\n            jjob.fromStriderJson = false;\n          } else {\n            debug('job.prepare - error opening/processing project\\'s `strider.json` file: ', err);\n            config = {};\n            jjob.fromStriderJson = false;\n          }\n        } else {\n          debug('Using configuration from \"strider.json\".');\n        }\n\n        var branch = project.branch(job.ref.branch || 'master');\n\n        if (!branch) {\n          return debug('job.prepare - branch not found', job.ref.branch || 'master', project.name);\n        }\n\n        branch = branch.mirror_master ? project.branch('master') : branch;\n        jjob.providerConfig = _.extend({}, project.provider.config, config.provider || {});\n        config.runner = config.runner || branch.runner;\n\n        if (!common.extensions.runner[config.runner.id]) {\n          debug(`Error: A job was registered for a runner that doesn't exist, i.e. \"${config.runner.id}\". This job will never run!`);\n        }\n\n        if (config) {\n          delete config.provider;\n          config = utils.mergeConfigs(branch, config);\n        }\n\n        emitter.emit('job.new', jjob, config);\n\n        if (!mjob.runner) mjob.runner = {};\n\n        mjob.runner.id = config.runner.id;\n        mjob.save()\n          .then(() => debug('job saved'))\n          .catch(e => debug(e));\n      });\n    });\n  });\n}\n```"
            ],
            [
                5,
                "javascript",
                "parsePostfixExpression",
                "```javascript\nfunction parsePostfixExpression() {\n            var marker = markerCreate(),\n                expr = parseLeftHandSideExpressionAllowCall(),\n                token;\n    \n            if (lookahead.type !== Token.Punctuator) {\n                return expr;\n            }\n    \n            if ((match('++') || match('--')) && !peekLineTerminator()) {\n                // 11.3.1, 11.3.2\n                if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                    throwErrorTolerant({}, Messages.StrictLHSPostfix);\n                }\n    \n                if (!isLeftHandSide(expr)) {\n                    throwError({}, Messages.InvalidLHSInAssignment);\n                }\n    \n                token = lex();\n                expr = markerApply(marker, delegate.createPostfixExpression(token.value, expr));\n            }\n    \n            return expr;\n        }\n```"
            ],
            [
                329,
                "javascript",
                "reportRequiredEndingSpace",
                "```javascript\nfunction reportRequiredEndingSpace( node, token ) {\n    context.report({\n      node: node,\n      loc: token.loc.start,\n      message: 'A space is required before \\'' + token.value + '\\'',\n      fix: function( fixer ) {\n        return fixer.insertTextBefore( token, ' ' );\n      }\n    });\n  }\n```"
            ],
            [
                343,
                "javascript",
                "",
                "```javascript\nfunction(e) {\n        var me = this;\n        if (e.target != me.element.dom) {\n            return;\n        }\n        if (me.getDeselectOnContainerClick() && me.getStore()) {\n            me.deselectAll();\n        }\n    }\n```"
            ],
            [
                794,
                "javascript",
                "create",
                "```javascript\nfunction create(parent, baseUrl, params, callback) {\n  parent.getClient().post(baseUrl, params, function(err, definition, response) {\n    if (err) return callback(err);\n    callback(null, new this(parent, definition));\n  }.bind(this));\n}\n```"
            ],
            [
                539,
                "javascript",
                "normalize",
                "```javascript\nfunction normalize (obj) {\n  var result = obj;\n  if (typeof obj !== \"function\") {\n    if (typeof obj !== \"undefined\") {\n      if (Object.prototype.toString.call(obj) !== \"[object Object]\") {\n        result = (function (value) { return function () { return value; }; }(obj));\n      } else {\n        result = (function (o) { return function (key, passthru) {\n          if (o[key] === void 0) {\n            return o.__default || (passthru ? key : undefined);\n          } else {\n            return o[key];\n          }\n        }; }(obj));\n      }\n    } else {\n      result = function (passthru) { return passthru; };\n    }\n  }\n  return result;\n}\n```"
            ],
            [
                451,
                "javascript",
                "getRequiredAuthorizations",
                "```javascript\nfunction getRequiredAuthorizations(doc, oldDoc, authorizationDefinition) {\n    var authorizationMap = utils.resolveDocumentConstraint(authorizationDefinition);\n\n    if (utils.isValueNullOrUndefined(authorizationMap)) {\n      // This document type does not define any authorizations (channels, roles, users) at all\n      return null;\n    }\n\n    var requiredAuthorizations = [ ];\n    var writeAuthorizationFound = false;\n    if (authorizationMap.write) {\n      writeAuthorizationFound = true;\n      appendToAuthorizationList(requiredAuthorizations, authorizationMap.write);\n    }\n\n    if (doc._deleted) {\n      if (authorizationMap.remove) {\n        writeAuthorizationFound = true;\n        appendToAuthorizationList(requiredAuthorizations, authorizationMap.remove);\n      }\n    } else if (!utils.isDocumentMissingOrDeleted(oldDoc) && authorizationMap.replace) {\n      writeAuthorizationFound = true;\n      appendToAuthorizationList(requiredAuthorizations, authorizationMap.replace);\n    } else if (utils.isDocumentMissingOrDeleted(oldDoc) && authorizationMap.add) {\n      writeAuthorizationFound = true;\n      appendToAuthorizationList(requiredAuthorizations, authorizationMap.add);\n    }\n\n    if (writeAuthorizationFound) {\n      return requiredAuthorizations;\n    } else {\n      // This document type does not define any authorizations (channels, roles, users) that apply to this particular write operation type\n      return null;\n    }\n  }\n```"
            ],
            [
                345,
                "javascript",
                "",
                "```javascript\nfunction(target) {\n\tvar undef;\n\n\teach(arguments, function(arg, i) {\n\t\tif (i > 0) {\n\t\t\teach(arg, function(value, key) {\n\t\t\t\tif (value !== undef) {\n\t\t\t\t\tif (typeof(target[key]) === typeof(value) && (typeof(value) === 'object' || util.isArray(value))) {\n\t\t\t\t\t\textend(target[key], value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[key] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\treturn target;\n}\n```"
            ],
            [
                810,
                "javascript",
                "targetNodeHasChildrenExcludingPlaceholder",
                "```javascript\nfunction targetNodeHasChildrenExcludingPlaceholder(info) {\n    return findChild(info, info.targetNode.children, function (v) {\n      return v !== info.dplh;\n    });\n  }\n```"
            ],
            [
                466,
                "javascript",
                "makeAsyncIterator",
                "```javascript\nfunction makeAsyncIterator(bodyFunc, config, semaphore) {\n    // Return a function that returns an iterator.\n    return function iterable() {\n        // Capture the initial arguments used to start the iterator, as an array.\n        var startupArgs = new Array(arguments.length + 1); // Reserve 0th arg for the yield function. \n        for (var i = 0, len = arguments.length; i < len; ++i)\n            startupArgs[i + 1] = arguments[i];\n        // Create a yield() function tailored for this iterator.\n        var yield_ = function (expr) {\n            // Ensure this function is executing inside a fiber.\n            if (!Fiber.current) {\n                throw new Error('await functions, yield functions, and value-returning suspendable ' +\n                    'functions may only be called from inside a suspendable function. ');\n            }\n            // Notify waiters of the next result, then suspend the iterator.\n            if (runContext.callback)\n                runContext.callback(null, { value: expr, done: false });\n            if (runContext.resolver)\n                runContext.resolver.resolve({ value: expr, done: false });\n            Fiber.yield();\n        };\n        // Insert the yield function as the first argument when starting the iterator.\n        startupArgs[0] = yield_;\n        // Create the iterator.\n        var runContext = new RunContext(bodyFunc, this, startupArgs);\n        var iterator = new AsyncIterator(runContext, semaphore, config.returnValue, config.acceptsCallback);\n        // Wrap the given bodyFunc to properly complete the iteration.\n        runContext.wrapped = function () {\n            var len = arguments.length, args = new Array(len);\n            for (var i = 0; i < len; ++i)\n                args[i] = arguments[i];\n            bodyFunc.apply(this, args);\n            iterator.destroy();\n            return { done: true };\n        };\n        // Return the iterator.\n        return iterator;\n    };\n}\n```"
            ],
            [
                677,
                "javascript",
                "exportSql",
                "```javascript\nfunction exportSql(obj, callback) {\n    var str = '';\n    if (Array.isArray(obj)) {\n        for (var i = 0; i < obj.length; ++i) {\n            if (obj[i].type == 'struct' && base.isExportTypeString(obj[i].name)) {\n                var cs = exportTable(obj[i], callback, obj);\n                if (cs == undefined) {\n                    return ;\n                }\n\n                str += cs + '\\r\\n';\n            }\n        }\n\n        return str;\n    }\n\n    return ;\n}\n```"
            ],
            [
                342,
                "javascript",
                "",
                "```javascript\nfunction(config) {\n        var defaultSetupConfig = Ext.defaultSetupConfig,\n            emptyFn = Ext.emptyFn,\n            onReady = config.onReady || emptyFn,\n            onUpdated = config.onUpdated || emptyFn,\n            scope = config.scope,\n            requires = Ext.Array.from(config.requires),\n            extOnReady = Ext.onReady,\n            head = Ext.getHead(),\n            callback, viewport, precomposed;\n\n        Ext.setup = function() {\n            throw new Error(\"Ext.setup has already been called before\");\n        };\n\n        delete config.requires;\n        delete config.onReady;\n        delete config.onUpdated;\n        delete config.scope;\n\n        Ext.require(['Ext.event.Dispatcher']);\n\n        callback = function() {\n            var listeners = Ext.setupListeners,\n                ln = listeners.length,\n                i, listener;\n\n            delete Ext.setupListeners;\n            Ext.isSetup = true;\n\n            for (i = 0; i < ln; i++) {\n                listener = listeners[i];\n                listener.fn.call(listener.scope);\n            }\n\n            Ext.onReady = extOnReady;\n            Ext.onReady(onReady, scope);\n        };\n\n        Ext.onUpdated = onUpdated;\n        Ext.onReady = function(fn, scope) {\n            var origin = onReady;\n\n            onReady = function() {\n                origin();\n                Ext.onReady(fn, scope);\n            };\n        };\n\n        config = Ext.merge({}, defaultSetupConfig, config);\n\n        Ext.onDocumentReady(function() {\n            Ext.factoryConfig(config, function(data) {\n                Ext.event.Dispatcher.getInstance().setPublishers(data.eventPublishers);\n\n                if (data.logger) {\n                    Ext.Logger = data.logger;\n                }\n\n                if (data.animator) {\n                    Ext.Animator = data.animator;\n                }\n\n                if (data.viewport) {\n                    Ext.Viewport = viewport = data.viewport;\n\n                    if (!scope) {\n                        scope = viewport;\n                    }\n\n                    Ext.require(requires, function() {\n                        Ext.Viewport.on('ready', callback, null, {single: true});\n                    });\n                }\n                else {\n                    Ext.require(requires, callback);\n                }\n            });\n\n            if (!Ext.microloaded && navigator.userAgent.match(/IEMobile\\/10\\.0/)) {\n                var msViewportStyle = document.createElement(\"style\");\n                msViewportStyle.appendChild(\n                    document.createTextNode(\n                        \"@media screen and (orientation: portrait) {\" +\n                            \"@-ms-viewport {width: 320px !important;}\" +\n                        \"}\" +\n                        \"@media screen and (orientation: landscape) {\" +\n                            \"@-ms-viewport {width: 560px !important;}\" +\n                        \"}\"\n                    )\n                );\n                head.appendChild(msViewportStyle);\n            }\n        });\n\n        function addMeta(name, content) {\n            var meta = document.createElement('meta');\n\n            meta.setAttribute('name', name);\n            meta.setAttribute('content', content);\n            head.append(meta);\n        }\n\n        function addIcon(href, sizes, precomposed) {\n            var link = document.createElement('link');\n            link.setAttribute('rel', 'apple-touch-icon' + (precomposed ? '-precomposed' : ''));\n            link.setAttribute('href', href);\n            if (sizes) {\n                link.setAttribute('sizes', sizes);\n            }\n            head.append(link);\n        }\n\n        function addStartupImage(href, media) {\n            var link = document.createElement('link');\n            link.setAttribute('rel', 'apple-touch-startup-image');\n            link.setAttribute('href', href);\n            if (media) {\n                link.setAttribute('media', media);\n            }\n            head.append(link);\n        }\n\n        var icon = config.icon,\n            isIconPrecomposed = Boolean(config.isIconPrecomposed),\n            startupImage = config.startupImage || {},\n            statusBarStyle = config.statusBarStyle || 'black',\n            devicePixelRatio = window.devicePixelRatio || 1;\n\n\n        if (navigator.standalone) {\n            addMeta('viewport', 'width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0');\n        }\n        else {\n            addMeta('viewport', 'initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, minimum-ui');\n        }\n        addMeta('apple-mobile-web-app-capable', 'yes');\n        addMeta('apple-touch-fullscreen', 'yes');\n        if (Ext.browser.is.ie) {\n            addMeta('msapplication-tap-highlight', 'no');\n        }\n\n        // status bar style\n        if (statusBarStyle) {\n            addMeta('apple-mobile-web-app-status-bar-style', statusBarStyle);\n        }\n\n        if (Ext.isString(icon)) {\n            icon = {\n                57: icon,\n                72: icon,\n                114: icon,\n                144: icon\n            };\n        }\n        else if (!icon) {\n            icon = {};\n        }\n\n        //<deprecated product=touch since=2.0.1>\n        if ('phoneStartupScreen' in config) {\n            //<debug warn>\n            Ext.Logger.deprecate(\"[Ext.setup()] 'phoneStartupScreen' config is deprecated, please use 'startupImage' \" +\n                \"config instead. Refer to the latest API docs for more details\");\n            //</debug>\n            config['320x460'] = config.phoneStartupScreen;\n        }\n\n        if ('tabletStartupScreen' in config) {\n            //<debug warn>\n            Ext.Logger.deprecate(\"[Ext.setup()] 'tabletStartupScreen' config is deprecated, please use 'startupImage' \" +\n                \"config instead. Refer to the latest API docs for more details\");\n            //</debug>\n            config['768x1004'] = config.tabletStartupScreen;\n        }\n\n        if ('glossOnIcon' in config) {\n            //<debug warn>\n            Ext.Logger.deprecate(\"[Ext.setup()] 'glossOnIcon' config is deprecated, please use 'isIconPrecomposed' \" +\n                \"config instead. Refer to the latest API docs for more details\");\n            //</debug>\n            isIconPrecomposed = Boolean(config.glossOnIcon);\n        }\n        //</deprecated>\n\n        if (Ext.os.is.iPad) {\n            if (devicePixelRatio >= 2) {\n                // Retina iPad - Landscape\n                if ('1496x2048' in startupImage) {\n                    addStartupImage(startupImage['1496x2048'], '(orientation: landscape)');\n                }\n                // Retina iPad - Portrait\n                if ('1536x2008' in startupImage) {\n                    addStartupImage(startupImage['1536x2008'], '(orientation: portrait)');\n                }\n\n                // Retina iPad\n                if ('144' in icon) {\n                    addIcon(icon['144'], '144x144', isIconPrecomposed);\n                }\n            }\n            else {\n                // Non-Retina iPad - Landscape\n                if ('748x1024' in startupImage) {\n                    addStartupImage(startupImage['748x1024'], '(orientation: landscape)');\n                }\n                // Non-Retina iPad - Portrait\n                if ('768x1004' in startupImage) {\n                    addStartupImage(startupImage['768x1004'], '(orientation: portrait)');\n                }\n\n                // Non-Retina iPad\n                if ('72' in icon) {\n                    addIcon(icon['72'], '72x72', isIconPrecomposed);\n                }\n            }\n        }\n        else {\n            // Retina iPhone, iPod touch with iOS version >= 4.3\n            if (devicePixelRatio >= 2 && Ext.os.version.gtEq('4.3')) {\n                if (Ext.os.is.iPhone5) {\n                    addStartupImage(startupImage['640x1096']);\n                } else {\n                    addStartupImage(startupImage['640x920']);\n                }\n\n                // Retina iPhone and iPod touch\n                if ('114' in icon) {\n                    addIcon(icon['114'], '114x114', isIconPrecomposed);\n                }\n            }\n            else {\n                addStartupImage(startupImage['320x460']);\n\n                // Non-Retina iPhone, iPod touch, and Android devices\n                if ('57' in icon) {\n                    addIcon(icon['57'], null, isIconPrecomposed);\n                }\n            }\n        }\n    }\n```"
            ],
            [
                344,
                "javascript",
                "",
                "```javascript\nfunction() {\n\n\t\t// Reset index\n\t\tthis.index = [];\n\n\t\t// Apply extends to the objects\n\t\tfor (var i=0, l=this._objTree.length; i<l; ++i) {\n\t\t\tif (this.objects[this._objTree[i][0]] === undefined) {\n\t\t\t\tthrow \"Extending unknown object \"+this._objTree[i][0];\n\t\t\t}\n\n\t\t\t// Apply\n\t\t\tthis.objects[this._objTree[i][1]].applyExtend(\n\t\t\t\tthis.objects[this._objTree[i][0]]\n\t\t\t);\n\t\t}\n\n\t\t// Resolve dependencies\n\t\tvar deps = toposort( this._objTree ).reverse(), used = {};\n\t\tfor (var i=0, l=deps.length; i<l; ++i) {\n\t\t\tused[deps[i]] = 1;\n\t\t\tthis.objects[deps[i]].id = this.index.length;\n\t\t\tthis.index.push( this.objects[deps[i]] );\n\t\t}\n\n\t\t// Then include objects not part of dependency tree\n\t\tfor (var i=0, l=this._objList.length; i<l; ++i) {\n\t\t\t// Skip objects already used in the dependency resolution\n\t\t\tif (!used[this._objList[i]])  {\n\t\t\t\tthis.index.push( this.objects[this._objList[i]] );\n\t\t\t}\n\t\t}\n\n\t\t// Then pre-cache property IDs for all the propeties\n\t\t// and check if any of the objects has embeds\n\t\tfor (var i=0, l=this.index.length; i<l; ++i) {\n\t\t\tvar pp = this.index[i].properties;\n\t\t\tfor (var j=0, jl=pp.length; j<jl; ++j) {\n\t\t\t\tthis.propertyVar(pp[j]);\n\t\t\t}\n\t\t\tif (this.index[i].embed.length > 0) {\n\t\t\t\tthis.hasEmbed = true;\n\t\t\t}\n\t\t}\n\n\t\t// Separate to frequent and infrequent objects\n\t\tfor (var i=0, l=this.index.length; i<l; ++i) {\n\t\t\tvar obj = this.index[i], isFreq = obj.frequent;\n\n\t\t\t// Make sure we only register 5-bit objects\n\t\t\tif (isFreq) {\n\t\t\t\tif (this._objFreq.length >= MAX_FREQ_ITEMS) {\n\t\t\t\t\tisFreq = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Put on frequent or infrequent table\n\t\t\tif (isFreq) {\n\t\t\t\tobj.id = this._objFreq.length;\n\t\t\t\tthis._objFreq.push(obj);\n\t\t\t} else {\n\t\t\t\tobj.id = this._objInfeq.length+MAX_FREQ_ITEMS;\n\t\t\t\tthis._objInfeq.push(obj);\n\t\t\t}\n\n\t\t}\n\n\t}\n```"
            ],
            [
                535,
                "javascript",
                "_afterReplacingAllCollections",
                "```javascript\nfunction _afterReplacingAllCollections(err) {\n              if (err) { return done(err); }\n  \n  \n              //  \u2554\u2550\u2557\u2554\u2550\u2557\u2554\u2566\u2557\u2554\u2550\u2557\u2566\u2550\u2557  \u252c \u252c\u250c\u2500\u2510\u250c\u252c\u2510\u250c\u2500\u2510\u250c\u252c\u2510\u250c\u2500\u2510  \u250c\u2500\u2510\u250c\u2500\u2510\u252c  \u252c  \u250c\u2510 \u250c\u2500\u2510\u250c\u2500\u2510\u252c\u250c\u2500\n              //  \u2560\u2550\u2563\u2560\u2563  \u2551 \u2551\u2563 \u2560\u2566\u255d  \u2502 \u2502\u251c\u2500\u2518 \u2502\u2502\u251c\u2500\u2524 \u2502 \u251c\u2524   \u2502  \u251c\u2500\u2524\u2502  \u2502  \u251c\u2534\u2510\u251c\u2500\u2524\u2502  \u251c\u2534\u2510\n              //  \u2569 \u2569\u255a   \u2569 \u255a\u2550\u255d\u2569\u255a\u2550  \u2514\u2500\u2518\u2534  \u2500\u2534\u2518\u2534 \u2534 \u2534 \u2514\u2500\u2518  \u2514\u2500\u2518\u2534 \u2534\u2534\u2500\u2518\u2534\u2500\u2518\u2514\u2500\u2518\u2534 \u2534\u2514\u2500\u2518\u2534 \u2534\n              // Run \"after\" lifecycle callback AGAIN and AGAIN- once for each record.\n              // ============================================================\n              // FUTURE: look into this\n              // (we probably shouldn't call this again and again--\n              // plus what if `fetch` is not in use and you want to use an LC?\n              // Then again- the right answer isn't immediately clear.  And it\n              // probably not worth breaking compatibility until we have a much\n              // better solution)\n              // ============================================================\n              async.each(transformedRecords, function _eachRecord(record, next) {\n  \n                // If the `skipAllLifecycleCallbacks` meta flag was set, don't run any of\n                // the methods.\n                if (_.has(query.meta, 'skipAllLifecycleCallbacks') && query.meta.skipAllLifecycleCallbacks) {\n                  return next();\n                }\n  \n                // Skip \"after\" lifecycle callback, if not defined.\n                if (!_.has(WLModel._callbacks, 'afterUpdate')) {\n                  return next();\n                }\n  \n                // Otherwise run it.\n                WLModel._callbacks.afterUpdate(record, function _afterMaybeRunningAfterUpdateForThisRecord(err) {\n                  if (err) {\n                    return next(err);\n                  }\n  \n                  return next();\n                });\n  \n              },// ~\u221e%\u00b0\n              function _afterIteratingOverRecords(err) {\n                if (err) {\n                  return done(err);\n                }\n  \n                return done(undefined, transformedRecords);\n  \n              });//</ async.each() -- ran \"after\" lifecycle callback on each record >\n  \n            }\n```"
            ],
            [
                320,
                "javascript",
                "",
                "```javascript\nfunction(nodes) {\n    if (!Array.isArray(nodes)) {\n      throw new TypeError('expected an array');\n    }\n    var len = nodes.length;\n    var idx = -1;\n    while (++idx < len) {\n      this.visit(nodes[idx], nodes, idx);\n    }\n    return this;\n  }\n```"
            ],
            [
                317,
                "javascript",
                "",
                "```javascript\nfunction (bundleName, filter) {\n        var bundle = this._bundles[bundleName];\n        if (!bundle) {\n            throw new Error('Unknown bundle \"' + bundleName + '\"');\n        }\n        return this._walkBundleResources(bundle, filter);\n    }\n```"
            ],
            [
                352,
                "javascript",
                "createFile",
                "```javascript\nfunction createFile (filePath, fileContent) {\n\tvar folderPath = filePath.split('/');\n\tfolderPath.pop();\n\tfolderPath = folderPath.join('/');\n\n\tif (!Utils.exist(folderPath))\n\t\tcreateFolder(folderPath);\n\n\tfs.writeFileSync(filePath, fileContent);\n\tUtils.log('Created file: ' + filePath);\n\n\treturn Utils;\n}\n```"
            ],
            [
                551,
                "javascript",
                "insertCss",
                "```javascript\nfunction insertCss(name) {\n  const cssIndexPath = path.resolve(__dirname, '../assets/index.scss');\n  const cssIndexFile = fs.readFileSync(cssIndexPath, { encoding: 'utf-8' });\n  const cssImportStr = `@import './${name}';`;\n\n  const cssIndexFileArr = cssIndexFile.trim().split('\\n');\n  cssIndexFileArr.push(cssImportStr);\n\n  // Make sure base comes first\n  const base = cssIndexFileArr.splice(0, 1);\n  sortByModulePath(cssIndexFileArr);\n  cssIndexFileArr.unshift(base);\n\n  fs.writeFileSync(cssIndexPath, `${cssIndexFileArr.join('\\n')}\\n`);\n}\n```"
            ],
            [
                911,
                "javascript",
                "formatSnapshotList",
                "```javascript\nfunction formatSnapshotList(list, limit) {\n  limit = (typeof limit != 'undefined') ? limit : -1;\n\n  const limitedList = limit > 0 ? list.slice(0, limit) : list;\n  const hasMore = list.length > limitedList.length;\n  const buildList = (snapshots) => snapshots.map((s) => s.join(' > ')).join('\\n');\n\n  if (hasMore) {\n    return buildList(limitedList.slice(0, -1)) + `\\n +${list.length - limitedList.length + 1} more`;\n  }\n\n  return buildList(limitedList);\n}\n```"
            ],
            [
                909,
                "javascript",
                "Strategy",
                "```javascript\nfunction Strategy(options, verify) {\n  options = options || {};\n  options.clientID = options.clientID || {};\n  options.clientSecret = options.clientSecret || {};\n  options.grant_type = \"password\";\n  options.skipUserProfile = true;\n  options.authorizationURL = options.authorizationURL || 'https://winkapi.quirky.com/oauth2/token';\n  options.tokenURL = options.tokenURL || 'https://winkapi.quirky.com/oauth2/token';\n  OAuth2Strategy.call(this, options, verify);\n  this.name = 'wink';\n}\n```"
            ]
        ]
    },
    "FuncNameTest-javascript MRR (bs=1,000)": 0.007906599357801214,
    "Examples-Validation-javascript": {
        "_type": "table",
        "columns": [
            "Rank",
            "Language",
            "Query",
            "Code"
        ],
        "data": [
            [
                945,
                "javascript",
                "",
                "```javascript\nfunction (endpointname, endpointid, queuebehaviour, socketep) {\n    var self = this;\n    socketep.on('connection', function (socket) {\n      logger.info(util.format('Connection received on /%s/%s', endpointname, endpointid));\n      socket.emit('whoareyou', {});\n      socket.on('iam', function (actorid) {\n        var endpointQueue = endpointname + '/' + endpointid;\n        if (!queuebehaviour || ((queuebehaviour & QUEUEFLAG.actor) > 0)) {\n          self.queueSubscribe(actorid, actorid, socket);\n        }\n        if ((queuebehaviour & QUEUEFLAG.endpoint) > 0) {\n          self.queueSubscribe(actorid, endpointQueue, socket);\n        }\n      });\n      socket.on('disconnect', function () {\n        self.queuesUnsubscribe(socket);\n      });\n      self.config.routes.forEach( function (route) {\n        if (route.endpoint === '*' || route.endpoint === endpointname) {\n          logger.debug(util.format('Registering route [%s] for endpoint [%s]. Socket= %s', route.messagetype, route.endpoint, socket.id));\n          socket.on(route.messagetype, function (message) {\n            self.check(socket, route.messagetype, message, function (err, checked) {\n              if (err) {\n                logger.error(err);\n              }\n              if (checked) {\n                logger.debug(util.format(\"Routing '%s' from [%s]. Message=%s\", route.messagetype, endpointname, JSON.stringify(message)));\n                route.action(message, socket, self);\n              }\n            });\n          });\n        }\n      });\n    });\n  }\n```"
            ],
            [
                38,
                "javascript",
                "",
                "```javascript\nfunction(options){\n      var ELEM = 'layui-fixbar', TOP_BAR = 'layui-fixbar-top'\n      ,dom = $(document), body = $('body')\n      ,is, timer;\n\n      options = $.extend({\n        showHeight: 200 //\u51fa\u73b0TOP\u7684\u6eda\u52a8\u6761\u9ad8\u5ea6\u4e34\u754c\u503c\n      }, options);\n      \n      options.bar1 = options.bar1 === true ? '&#xe606;' : options.bar1;\n      options.bar2 = options.bar2 === true ? '&#xe607;' : options.bar2;\n      options.bgcolor = options.bgcolor ? ('background-color:' + options.bgcolor) : '';\n      \n      var icon = [options.bar1, options.bar2, '&#xe604;'] //\u56fe\u6807\uff1a\u4fe1\u606f\u3001\u95ee\u53f7\u3001TOP\n      ,elem = $(['<ul class=\"'+ ELEM +'\">'\n        ,options.bar1 ? '<li class=\"layui-icon\" lay-type=\"bar1\" style=\"'+ options.bgcolor +'\">'+ icon[0] +'</li>' : ''\n        ,options.bar2 ? '<li class=\"layui-icon\" lay-type=\"bar2\" style=\"'+ options.bgcolor +'\">'+ icon[1] +'</li>' : ''\n        ,'<li class=\"layui-icon '+ TOP_BAR +'\" lay-type=\"top\" style=\"'+ options.bgcolor +'\">'+ icon[2] +'</li>'\n      ,'</ul>'].join(''))\n      ,topBar = elem.find('.'+TOP_BAR)\n      ,scroll = function(){\n        var stop = dom.scrollTop();\n        if(stop >= (options.showHeight)){\n          is || (topBar.show(), is = 1);\n        } else {\n          is && (topBar.hide(), is = 0);\n        }\n      };\n      if($('.'+ ELEM)[0]) return;\n      \n      typeof options.css === 'object' && elem.css(options.css);\n      body.append(elem), scroll();\n      \n      //bar\u70b9\u51fb\u4e8b\u4ef6\n      elem.find('li').on('click', function(){\n        var othis = $(this), type = othis.attr('lay-type');\n        if(type === 'top'){\n          $('html,body').animate({\n            scrollTop : 0\n          }, 200);\n        }\n        options.click && options.click.call(this, type);\n      });\n      \n      //Top\u663e\u793a\u63a7\u5236\n      dom.on('scroll', function(){\n        clearTimeout(timer);\n        timer = setTimeout(function(){\n          scroll();\n        }, 100);\n      }); \n    }\n```"
            ],
            [
                130,
                "javascript",
                "pkcs1pad2",
                "```javascript\nfunction pkcs1pad2(s,n) {\n  if(n < s.length + 11) {\n    alert(\"Message too long for RSA\");\n    return null;\n  }\n  var ba = new Array();\n  var i = s.length - 1;\n  while(i >= 0 && n > 0) ba[--n] = s.charCodeAt(i--);\n  ba[--n] = 0;\n  var rng = new SecureRandom();\n  var x = new Array();\n  while(n > 2) { // random non-zero pad\n    x[0] = 0;\n    while(x[0] == 0) rng.nextBytes(x);\n    ba[--n] = x[0];\n  }\n  ba[--n] = 2;\n  ba[--n] = 0;\n  return new BigInteger(ba);\n}\n```"
            ],
            [
                96,
                "javascript",
                "",
                "```javascript\nfunction(url,/*#if NODE*/entry,/*#/if*/options){\n\t\tif(!S.isObj(options)) options={full:options};\n\t\t/*#if NODE*/\n\t\t/*#if DEV*/ if(entry===false || entry===true) throw new Error('Entry param cannot be false or true'); /*#/if*/\n\t\tif(entry==null){\n\t\t\tentry=this.req.entry;\n\t\t\toptions.full=/*#ifelse DEV */('/~'+entry||options.full===true ? Config.siteUrl[entry] : '')/*#/if*/;\n\t\t}else if((entry !== this.req.entry && options.full!==false) || options.full===true) options.full=/*#ifelse DEV */('/~'+entry||Config.siteUrl[entry])/*#/if*/;\n\t\telse options.full=/*#ifelse DEV */('/~'+entry||'')/*#/if*/;\n\t\t/*#else*/\n\t\toptions.full='';\n\t\t/*#/if*/\n\t\t\n\t\tif(S.isString(url) || !url){\n\t\t\tif(url) url=url.trim();\n\t\t\tif(!url || url==='/') return options.full+ '/';\n\t\t\telse{\n\t\t\t\tif(url.contains('://')) return url;\n\t\t\t\tif(url.startsWith('\\\\/')) return url.substr(1);\n\t\t\t\tif(url.charAt(0)==='/') return options.full + this.router.getStringLink(this.req.lang,/*#if NODE*/entry,/*#/if*/url.substr(1));\n\t\t\t}\n\t\t}else{\n\t\t\treturn (options.full || '') + this.router.getArrayLink(this.req.lang,/*#if NODE*/entry,/*#/if*/url);\n\t\t}\n\t}\n```"
            ],
            [
                56,
                "javascript",
                "submitRequest",
                "```javascript\nfunction submitRequest( params ) {\n\tdebug( 'sending API request to proxy <iframe> %o', params );\n\n\t// `formData` needs to be patched if it contains `File` objects to work around\n\t// a Chrome bug. See `patchFileObjects` description for more details.\n\tif ( params.formData ) {\n\t\tpatchFileObjects( params.formData );\n\t}\n\n\tiframe.contentWindow.postMessage( postStrings ? JSON.stringify( params ) : params, proxyOrigin );\n}\n```"
            ],
            [
                122,
                "javascript",
                "transitionTo",
                "```javascript\nfunction transitionTo(pathQueryOrName) {\n    const name = leafStates[pathQueryOrName]\n    const params = (name ? arguments[1] : null) || {}\n    const acc = name ? arguments[2] : arguments[1]\n\n    logger.log('Changing state to {0}', pathQueryOrName || '\"\"')\n\n    urlChanged = false\n\n    if (name)\n      setStateByName(name, params, acc)\n    else\n      setStateForPathQuery(pathQueryOrName, acc)\n  }\n```"
            ],
            [
                350,
                "javascript",
                "_safelyCall",
                "```javascript\nfunction _safelyCall(isCatch, fn, ctx) {\n    if (!fn) return\n\n    if (isCatch) {\n        try {\n            fn.call(ctx)\n        } catch(e) {\n            consoler.errorTrace(e)\n        }\n    } else {\n        fn.call(ctx)\n    }\n}\n```"
            ],
            [
                71,
                "javascript",
                "",
                "```javascript\nfunction() {\n        var me = this;\n        me.tbar = ['Search',{\n                 xtype: 'textfield',\n                 name: 'searchField',\n                 hideLabel: true,\n                 width: 200,\n                 listeners: {\n                     change: {\n                         fn: me.onTextFieldChange,\n                         scope: this,\n                         buffer: 100\n                     }\n                 }\n            }, {\n                xtype: 'button',\n                text: '&lt;',\n                tooltip: 'Find Previous Row',\n                handler: me.onPreviousClick,\n                scope: me\n            },{\n                xtype: 'button',\n                text: '&gt;',\n                tooltip: 'Find Next Row',\n                handler: me.onNextClick,\n                scope: me\n            }, '-', {\n                xtype: 'checkbox',\n                hideLabel: true,\n                margin: '0 0 0 4px',\n                handler: me.regExpToggle,\n                scope: me                \n            }, 'Regular expression', {\n                xtype: 'checkbox',\n                hideLabel: true,\n                margin: '0 0 0 4px',\n                handler: me.caseSensitiveToggle,\n                scope: me\n            }, 'Case sensitive'];\n\n        me.bbar = Ext.create('Ext.ux.StatusBar', {\n            defaultText: me.defaultStatusText,\n            name: 'searchStatusBar'\n        });\n        \n        me.callParent(arguments);\n    }\n```"
            ],
            [
                887,
                "javascript",
                "normalizeTransformers",
                "```javascript\nfunction normalizeTransformers(transformerMap) {\n    let result = [];\n    transformerMap && Object.keys(transformerMap).forEach(k => {\n        let item = transformerMap[k];\n        if (item) {\n            item.transform.type = k;\n            result.push(\n                Object.assign({}, item, {name: k})\n            );\n        }\n    });\n    return result;\n}\n```"
            ],
            [
                828,
                "javascript",
                "stripeMethod",
                "```javascript\nfunction stripeMethod(spec) {\n  return function() {\n    var self = this;\n    var args = [].slice.call(arguments);\n\n    var callback = typeof args[args.length - 1] == 'function' && args.pop();\n\n    var requestPromise = utils.callbackifyPromiseWithTimeout(makeRequest(self, args, spec, {}), callback)\n\n    if (spec.methodType === 'list') {\n      var autoPaginationMethods = makeAutoPaginationMethods(self, args, spec, requestPromise);\n      Object.assign(requestPromise, autoPaginationMethods);\n    }\n\n    return requestPromise;\n  };\n}\n```"
            ],
            [
                823,
                "javascript",
                "hasClass",
                "```javascript\nfunction hasClass(element, className) {\n\t  return is$1.element(element) && element.classList.contains(className);\n\t}\n```"
            ],
            [
                523,
                "javascript",
                "",
                "```javascript\nfunction() {\n        var tests = this.tests,\n            vector = [],\n            i = 0,\n            ln = tests.length,\n            test;\n\n        for (; i < ln; i++) {\n            test = tests[i];\n            vector.push(this[test.identity] ? 1 : 0);\n        }\n        return vector;\n    }\n```"
            ],
            [
                160,
                "javascript",
                "getProductCategoryLabel",
                "```javascript\nfunction getProductCategoryLabel( state, categoryId, siteId = getSelectedSiteId( state ) ) {\n\tconst categoryState = getRawCategoryState( state, siteId );\n\tconst categories = categoryState.items || {};\n\tconst category = categories[ categoryId ];\n\tif ( ! category ) {\n\t\treturn '';\n\t}\n\tif ( ! Number( category.parent ) ) {\n\t\treturn category.name;\n\t}\n\treturn getProductCategoryLabel( state, category.parent, siteId ) + ` - ${ category.name }`;\n}\n```"
            ],
            [
                668,
                "javascript",
                "",
                "```javascript\nfunction (...rest) {\n      const _key = _hash(rest, opt.id);\n      return cacheObj.get(opt, _key)\n              .then(res => {\n                if (typeof res == 'undefined' || res === null) {  \n                  res = _update.bind(this)(opt, func, rest);\n                }\n                return res;\n              });\n    }\n```"
            ],
            [
                306,
                "javascript",
                "",
                "```javascript\nfunction (keyOrNsString) {\n                return sjl.jsonClone(\n                    sjl.notEmptyAndOfType(keyOrNsString, String) ?\n                       sjl.searchObj(keyOrNsString, this) : this\n                );\n            }\n```"
            ],
            [
                362,
                "javascript",
                "",
                "```javascript\nfunction (s, doc, microblogPane) {\n      var TabManager = function (doc) {\n        this.tablist = {}\n        this.doc = doc\n        this.tabView = doc.createElement('ul')\n        this.tabView.className = 'tabslist'\n      }\n      TabManager.prototype.create = function (id, caption, view, isDefault) {\n        var tab = this.doc.createElement('li')\n        tab.innerHTML = caption\n        if (isDefault) { tab.className = 'active' }\n        tab.id = id\n        let change = this.change\n        let tablist = this.tablist\n        tab.addEventListener('click', function (evt) { change(evt.target.id, tablist, doc) }, false)\n\n        this.tablist[id] = {'view': view.id, 'tab': tab}\n        this.tabView.appendChild(tab)\n      }\n      TabManager.prototype.getTabView = function () {\n        return this.tabView\n      }\n      TabManager.prototype.change = function (id, tablist, doc) {\n        for (var tab in tablist) {\n          if (tab === id) {\n            tablist[id]['tab'].className = 'active'\n            doc.getElementById(tablist[id]['view']).className += ' active'\n          } else {\n            var view = doc.getElementById(tablist[tab].view)\n            view.className = view.className.replace(/\\w*active\\w*/, '')\n            tablist[tab].tab.className = tablist[id].tab.className.replace(/\\w*active\\w*/, '')\n          }\n        }\n      }\n      this.microblogPane = microblogPane\n      var accounts = kb.each(s, FOAF('holdsAccount'))\n      for (var a in accounts) {\n        if (kb.whether(accounts[a], RDF('type'), SIOC('User')) &&\n          kb.whether(kb.any(accounts[a], SIOC('creator_of')), RDF('type'), SIOCt('Microblog'))) {\n          var account = accounts[a]\n          break\n        }\n      }\n      this.Ifollow = kb.whether(kb.sym(mb.getMyURI()), SIOC('follows'), account)\n      var resourceType = kb.any(s, RDF('type'))\n      if (resourceType.uri === SIOCt('Microblog').uri || resourceType.uri === SIOCt('MicroblogPost').uri) {\n        this.thisIsMe = (kb.any(s, SIOC('has_creator')).uri === mb.getMyURI())\n      } else if (resourceType.uri === SIOC('User').uri) {\n        this.thisIsMe = (s.uri === mb.getMyURI())\n      } else if (resourceType.uri === FOAF('Person').uri) {\n        let me = UI.authn.currentUser()\n        let meUri = me && me.uri\n        this.thisIsMe = (s.uri === meUri)\n      } else {\n        this.thisIsMe = false\n      }\n\n      this.Tab = new TabManager(doc)\n    }\n```"
            ],
            [
                198,
                "javascript",
                "GroupRefOrDecChar",
                "```javascript\nfunction GroupRefOrDecChar(text, textLoc) {\n  const reference = Number(text.slice(1));\n\n  if (reference > 0 && reference <= capturingGroupsCount) {\n    return Node({\n      type: 'Backreference',\n      kind: 'number',\n      number: reference,\n      reference,\n    }, textLoc);\n  }\n\n  return Char(text, 'decimal', textLoc);\n}\n```"
            ],
            [
                826,
                "javascript",
                "convertMediaQueryToJSExpression",
                "```javascript\nfunction convertMediaQueryToJSExpression(tokens, allAppTypes, appType) {\n    let result = [];\n    tokens.forEach(item => {\n        item = item.trim();\n        if (allAppTypes.includes(item)) {\n            result.push(`('${item}' === '${appType}')`);\n        }\n        else if (item === 'and') {\n            result.push('&&');\n        }\n        else if (item === ',' || item === 'or') {\n            result.push('||');\n        }\n        else if (item === 'not') {\n            result.push('!');\n        }\n        else if (item === '(' || item === ')') {\n            result.push(item);\n        }\n    });\n\n\n    let lastItem = result[result.length - 1];\n    if (lastItem === '&&' || lastItem === '||') {\n        result.pop();\n    }\n\n    // remove no use leading brace if has\n    let braceStack = [];\n    result.forEach((item, index) => {\n        if (item === '(') {\n            braceStack.push(index);\n        }\n        else if (item === ')') {\n            braceStack.pop();\n        }\n    });\n    for (let i = braceStack.length - 1; i >= 0; i--) {\n        result.splice(braceStack[i], 1);\n    }\n\n    return result.join('');\n}\n```"
            ],
            [
                531,
                "javascript",
                "ArrayFill",
                "```javascript\nfunction ArrayFill(value, start, end) {\n  CHECK_OBJECT_COERCIBLE(this, \"Array.prototype.fill\");\n\n  var array = TO_OBJECT(this);\n  var length = TO_LENGTH(array.length);\n\n  return InnerArrayFill(value, start, end, array, length);\n}\n```"
            ],
            [
                226,
                "javascript",
                "addPlugin",
                "```javascript\nfunction addPlugin(useLevel, fn) {\n  let pluginFn = fn;\n  if (typeof fn === 'undefined' && typeof useLevel === 'function') {\n    pluginFn = useLevel;\n  }\n\n  if (typeof pluginFn !== 'function') {\n    throw new Error('Plugin must be a function!');\n  }\n\n  if (typeof useLevel === 'string') {\n    pluginFn = (id, level, stats, ...rest) => {\n      if (level === useLevel.toUpperCase()) {\n        return fn(id, level, stats, ...rest);\n      }\n      return [id, level, stats, ...rest];\n    };\n  }\n\n  pluginsRegistry.push(pluginFn);\n}\n```"
            ],
            [
                142,
                "javascript",
                "_writeback",
                "```javascript\nfunction _writeback(immediate_file, cb) {\n    assert.optionalString(immediate_file, 'immediate_file');\n    assert.optionalFunc(cb, 'callback');\n\n    var log = this.log;\n    var self = this;\n\n    function _doUpload(_arg, _cb) {\n        var cachefile = path.join(self.location, 'fscache', _arg.cachefile);\n        log.debug('writeback %s => %s', _arg.cachefile, _arg.fname);\n\n        fs.stat(cachefile, function onStatDone(s_err, stats) {\n            if (s_err) {\n                // This should never happen\n                log.error(s_err, '_doUpload(%s): error stat-ing local ' +\n                    'file (%s)', _arg.fname, cachefile);\n                _cb(s_err, _arg);\n                return;\n            }\n\n            // Only read the current size in case the file gets extended\n            // while we're uploading. In that case it will be dirty again\n            // and be re-uploaded.\n            var rd_size = stats.size;\n            if (rd_size > 0)\n                rd_size -= 1;\n            var r_opts = {\n                start: 0,\n                end: rd_size\n            };\n            var m_opts = {\n                size: stats.size\n            };\n            var rstream = fs.createReadStream(cachefile, r_opts);\n            rstream.once('error', function onFileError(err) {\n                log.error(err, '_doUpload(%s): error reading from local ' +\n                    'file (%s)', _arg.fname, cachefile);\n                _cb(err, _arg);\n            });\n\n            rstream.once('open', function onOpen() {\n                self.manta.put(manta.path(_arg.fname, true), rstream, m_opts,\n                  function (err) {\n                    if (err) {\n                        log.error(err, '_doUpload(%s): error pushing (%s) ' +\n                            'to manta:', _arg.fname, cachefile);\n                        _cb(err, _arg);\n                    } else {\n                        log.debug('_doUpload(%s) pushed to (%s):',\n                            cachefile, _arg.fname);\n                        _cb(null, _arg);\n                    }\n                });\n            });\n        });\n    }\n\n    function _fileUploaded(_arg, _cb) {\n        if (!wb_pending[_arg.fname]) {\n            // if no more writes while we were uploading, we remove it from\n            // the DB since its no longer dirty\n            var key = sprintf(DIRTY_KEY_FMT, _arg.fname);\n            self.db.batch()\n                .del(key)\n                .write(function onBatchDel(err) {\n                    if (err) {\n                        log.warn(err, 'dirty del(%s): failed', _arg.fname);\n                        _cb(errno(err, _arg));\n                    } else {\n                        log.trace('dirty del(%s): done', _arg.fname);\n                        _cb(null, _arg);\n                    }\n                });\n        }\n    }\n\n    function _updateLastMod(_arg, _cb) {\n        // Update the last modified time for this file into the cache.\n        // Ignore errors here since this can only impact our view of when the\n        // file is stale.\n        self.get(_arg.fname, function (err, info) {\n            if (err) {\n                _cb(null, _arg);\n                return;\n            }\n\n            var upd = new Date();\n            info.headers['last-modified'] = upd.toUTCString();\n            info.last_stat = upd.getTime();\n\n            self.put(_arg.fname, info, function (err2) {\n                _cb(null, _arg);\n            });\n        });\n    }\n\n    function _wb_done(err, res) {\n        // just use the return from the first operation to get the args\n        var args = res.operations[0].result;\n        if (err) {\n            log.error(err, 'writeback: error %s', args.fname);\n            // XXX JJ generalize error handling\n            // e.g. if (err.code === 'UploadTimeout') ...\n            // other manta errors, etc.\n            // On upload timeout we won't have called the _fileUploaded\n            // function in the pipeline, so we still have the file in the DB,\n            // but not the wb_pending list. We'll add this entry back into the\n            // in-memory wb_pending list (or overwrite the existing entry if\n            // the file was updated while we tried to upload), but with a\n            // timestamp one minute in the future, so that we'll retry the\n            // upload of this file a little later. We still keep trying to\n            // upload any other files in the list. This handles the case in\n            // which the failure was somehow relevant only to this file. If all\n            // uploads fail, we'll have just added them back to the writeback\n            // list for future retries.\n            var plusminute = new Date().getTime();\n            plusminute += 60000;\n            wb_pending[args.fname] = {\n                cachefile: args.cachefile,\n                timestamp: plusminute\n            };\n        } else {\n            log.debug('writeback %s done', args.fname);\n        }\n\n        var pending_op = wb_inprogress[args.fname].op;\n        var pending_cb = wb_inprogress[args.fname].cb;\n        var pending_info = wb_inprogress[args.fname].info;\n        // remove it from the in-memory inprogress list\n        delete wb_inprogress[args.fname];\n        wb_num--;\n\n        if (pending_op) {\n            log.debug('writeback %s, pending %s', args.fname, pending_op);\n\n            // We had to block an operation while the upload was in progress.\n            // Perform that operation now and schedule _writeback to continue.\n            setTimeout(_writeback.bind(self), 1);\n            if (pending_op === 'del') {\n                self.del(args.fname, pending_cb);\n            } else if (pending_op === 'trunc') {\n                self.truncate(args.fname, pending_info, pending_cb);\n            } else if (pending_op === 'cb') {\n                pending_cb();\n            } else {\n                log.error('writeback %s, pending %s unknown',\n                    args.fname, pending_op);\n            }\n        } else {\n            // this is the normal path, just take another lap\n            var wb = _writeback.bind(self);\n            wb();\n        }\n    }\n\n    if (immediate_file) {\n        if (wb_pending[immediate_file]) {\n            // the file is dirty, upload it now\n            log.debug('_writeback immd. %s: pending', immediate_file);\n\n            file_data = {\n                fname: immediate_file,\n                cachefile: wb_pending[immediate_file].cachefile\n            };\n\n            // remove it from the in-memory list\n            delete wb_pending[immediate_file];\n\n            // add it to the in-memory in progress list with cb pending\n            wb_inprogress[immediate_file] = {\n                op: 'cb',\n                cb: cb\n            };\n            wb_num++;\n\n            // here is where we setup the writeback pipeline\n            vasync.pipeline({\n                funcs: [\n                    _doUpload,\n                    _fileUploaded,\n                    _updateLastMod\n                ],\n                arg: file_data\n            }, _wb_done);\n\n        } else if (wb_inprogress[immediate_file]) {\n            // the file is already being uploaded now, setup cb\n            if (wb_inprogress[immediate_file].op) {\n                // there shouldn't be any pending op in this case\n                log.error('writeback immd. %s: already pending %s',\n                    immediate_file, wb_inprogress[immediate_file].op);\n            }\n            log.debug('_writeback immd. %s: in progress', immediate_file);\n            wb_inprogress[immediate_file] = {\n                op: 'cb',\n                cb: cb\n            };\n        } else {\n            // the file is not dirty and not being uploaded, just run cb\n            log.debug('_writeback immd. %s: do nothing', immediate_file);\n            cb(null);\n        }\n\n        return;\n    }\n\n    var now = new Date().getTime();\n    var threshold = now - self.wbtime;\n\n    // When we iterate using 'in', the elements in wb_pending are probably\n    // ordered by the order in which they were defined. On startup, when\n    // pulling out of the DB, we define them in the order we get them from the\n    // DB which, since its a btree, will be alphabetical. Thus, we have to look\n    // at each entry to see if its time to write it back. That is, the entries\n    // might not be in timestamp order so we can't stop when we see an entry\n    // that's not ready to be written back.\n    //\n    // Once we start processing the list, we'll get called back and keep making\n    // a pass over the list until we have made a full pass with no writeback.\n    // At that time, if there are still elements in the list, we schedule\n    // ourselves to wakeup later and process the list again.\n\n    var wb_running = false;\n    var more_files = false;\n    var fname;\n    var file_data = {};\n    for (fname in wb_pending) {\n        if (threshold > wb_pending[fname].timestamp) {\n            if (wb_inprogress[fname]) {\n                // This file is still in the middle of an upload and its dirty\n                // again and time to writeback again. We skip this file until\n                // the current upload finishes and we come back around.\n                continue;\n            }\n\n            file_data = {\n                fname: fname,\n                cachefile: wb_pending[fname].cachefile\n            };\n\n            // remove it from the in-memory list\n            delete wb_pending[fname];\n\n            // add it to the in-memory in progress list with nothing pending\n            wb_inprogress[fname] = {};\n            wb_num++;\n            wb_running = true;\n\n            // here is where we setup the writeback pipeline\n            vasync.pipeline({\n                funcs: [\n                    _doUpload,\n                    _fileUploaded,\n                    _updateLastMod\n                ],\n                arg: file_data\n            }, _wb_done);\n\n            if (wb_num >= self.num_par) {\n                // we've hit our limit for parallel writebacks, break out of\n                // the loop since we'll callback to _writeback when one of the\n                // uploads has finished\n                break;\n            }\n        } else {\n            more_files = true;\n        }\n    }\n\n    if (!wb_running) {\n        if (more_files) {\n            setTimeout(_writeback.bind(self), self.wbtime);\n        } else {\n            writeback_enabled = false;\n        }\n    }\n}\n```"
            ],
            [
                954,
                "javascript",
                "smsAddCampaign",
                "```javascript\nfunction smsAddCampaign(callback, sender_name, addressbook_id, body, date, transliterate){\n    if (sender_name === undefined) {\n        return callback(returnError(\"Empty sender name\"));\n    }\n    if (addressbook_id === undefined) {\n        return callback(returnError(\"Empty book id\"));\n    }\n    if (body === undefined) {\n        return callback(returnError(\"Empty sms text\"));\n    }\n    var data = {\n        'sender': sender_name,\n        'addressBookId': addressbook_id,\n        'body': body,\n        'date': date,\n        'transliterate': transliterate\n    }\n\n    sendRequest('sms/campaigns', 'POST', data, true, callback);\n}\n```"
            ],
            [
                485,
                "javascript",
                "",
                "```javascript\nfunction (keyOrNsString/*, type{String|Function}...*/) {\n                sjl.throwTypeErrorIfNotOfType(contextName + '.has', 'keyOrNsString', keyOrNsString, String);\n                var searchResult = sjl.searchObj(keyOrNsString, this);\n                return arguments.length === 1 ?\n                    sjl.isset(searchResult) :\n                    sjl.issetAndOfType.apply(sjl, [searchResult].concat(sjl.restArgs(1)));\n            }\n```"
            ],
            [
                725,
                "javascript",
                "fromMs",
                "```javascript\nfunction fromMs (ms, format = 'mm:ss') {\n  if (typeof ms !== 'number' || Number.isNaN(ms)) {\n    throw new Error('NaN error')\n  }\n\n  let absMs = Math.abs(ms)\n\n  let negative = (ms < 0)\n  let hours = Math.floor(absMs / HOUR)\n  let minutes = Math.floor(absMs % HOUR / MINUTE)\n  let seconds = Math.floor(absMs % MINUTE / SECOND)\n  let miliseconds = Math.floor(absMs % SECOND)\n\n  return formatTime({\n    negative, hours, minutes, seconds, miliseconds\n  }, format)\n}\n```"
            ],
            [
                1,
                "javascript",
                "proposeFloat",
                "```javascript\nfunction proposeFloat(value, defaultValue) {\n  const proposed = parseFloat(value);\n  if (typeof proposed === 'number' && isFinite(proposed)) {\n    return proposed;\n  }\n  return defaultValue;\n}\n```"
            ],
            [
                587,
                "javascript",
                "diffIt",
                "```javascript\nfunction diffIt(increment, date1, date2) {\n  var _incrementHandlers;\n\n  var incrementHandlers = (_incrementHandlers = {}, defineProperty(_incrementHandlers, MILLISECOND, function (date1, date2) {\n    return diff(date1, date2);\n  }), defineProperty(_incrementHandlers, SECOND, function (date1, date2) {\n    return diff(date1, date2) / 1000;\n  }), defineProperty(_incrementHandlers, MINUTE, function (date1, date2) {\n    return this[SECOND](date1, date2) / 60;\n  }), defineProperty(_incrementHandlers, HOUR, function (date1, date2) {\n    return this[MINUTE](date1, date2) / 60;\n  }), defineProperty(_incrementHandlers, DATE, function (date1, date2) {\n    return this[HOUR](date1, date2) / 24;\n  }), defineProperty(_incrementHandlers, WEEK, function (date1, date2) {\n    return this[DATE](date1, date2) / 7;\n  }), defineProperty(_incrementHandlers, MONTH, function (date1, date2) {\n    return this[DATE](date1, date2) / 30.44; // 365.25 / 12\n  }), defineProperty(_incrementHandlers, YEAR, function (date1, date2) {\n    return this[DATE](date1, date2) / 365.25; // Leap-year friendly\n  }), _incrementHandlers);\n\n  return incrementHandlers[increment](date1, date2);\n}\n```"
            ],
            [
                39,
                "javascript",
                "mkcert",
                "```javascript\nfunction mkcert(appDataPath, exe) {\n  const logPath = path.join(appDataPath, \"mkcert.log\")\n  const errPath = path.join(appDataPath, \"mkcert.err\")\n  // escape spaces in appDataPath (Mac OS)\n  appDataPath = appDataPath.replace(\" \", \"\\\\ \")\n  const exePath = path.join(appDataPath, exe)\n  const crtPath = path.join(appDataPath, \"localhost.crt\")\n  const keyPath = path.join(appDataPath, \"localhost.key\")\n  const cmd = exePath + \" -install -cert-file \" + crtPath +\n    \" -key-file \" + keyPath + \" localhost\"\n  return new Promise((resolve, reject) => {\n    console.log(\"Running mkcert to generate certificates...\")\n    exec(cmd, (err, stdout, stderr) => {\n      // log\n      const errFun = err => {\n        /* istanbul ignore if: cannot be tested */\n        if (err) console.error(err)\n      }\n      fs.writeFile(logPath, stdout, errFun)\n      fs.writeFile(errPath, stderr, errFun)\n      /* istanbul ignore if: cannot be tested */\n      if (err) reject(err)\n      resolve()\n    })\n  })\n}\n```"
            ],
            [
                459,
                "javascript",
                "getFormData",
                "```javascript\nfunction getFormData(){\n    var form = this.form;\n    var selector = ['input', 'select', 'textarea'].join(',');\n\n    return [].slice.call(form.querySelectorAll(selector))\n      .filter(Mailto.formDataFilter)\n      .map(Mailto.formDataMapper(form));\n  }\n```"
            ],
            [
                858,
                "javascript",
                "renderContent",
                "```javascript\nfunction renderContent(tpl, data, isFinal) {\n    var temp = juicer(tpl, data, {errorhandling : false})\n    if(temp == null)\n    {\n        console.log(\"gg-template-engine: render Error  tpl: ===========================\")\n        console.log(tpl)\n        console.log(\"data: ===========================================================\")\n        console.log(data)\n        throw new Error(\"gg-template-engine: render Error \");\n    }\n    if (isFinal) {\n        //\u652f\u6301final replace\u529f\u80fd\n        return temp.replace(/<gg\\[((?!<gg\\[).)*\\]>/igm, innerRp)\n    }\n    return temp;\n}\n```"
            ],
            [
                119,
                "javascript",
                "getEventTargetByOldLogic",
                "```javascript\nfunction getEventTargetByOldLogic(oldName) {\n  var targetKeyReg = new RegExp('^(c|w)_');\n  var matches = oldName.match(targetKeyReg);\n  if (matches) {\n    var _name = oldName.replace(targetKeyReg, '');\n    var _target = oldName.indexOf('c') === 0 ? 'container' : 'wrapper';\n    /* istanbul ignore else  */\n    if (process.env.NODE_ENV !== 'production') {\n      chimeeHelper.Log.warn('We no longer support event names like ' + oldName + '. Please use ' + _name + ' and options like { target: \\'' + _target + '\\' } instead');\n    }\n    return { name: _name, target: _target };\n  } else if (oldName === 'error') {\n    return { name: 'error', target: 'kernel' };\n  }\n  return false;\n}\n```"
            ],
            [
                851,
                "javascript",
                "deployRules",
                "```javascript\nfunction deployRules({client, rules, secret}) {\n  const lastRequest = rulesRequests.get(client.projectId);\n\n  return Promise.resolve(lastRequest).then(oldRulesHash => {\n    const newRuleHash = hash(rules);\n\n    if (oldRulesHash === newRuleHash) {\n      return oldRulesHash;\n    }\n\n    const request = client.rules({rules, secret});\n\n    rulesRequests.set(client.projectId, request.then(\n      () => newRuleHash,\n      () => oldRulesHash\n    ));\n\n    return request;\n  });\n}\n```"
            ],
            [
                343,
                "javascript",
                "_buildKey",
                "```javascript\nfunction _buildKey(context, key) {\n  let appConfig = getOwner(context).resolveRegistration('config:environment');\n  let addonConfig = appConfig && appConfig['ember-local-storage'] || {};\n  let namespace = _getNamespace(appConfig, addonConfig);\n  let delimiter = addonConfig.keyDelimiter || ':';\n\n  return namespace ? `${namespace}${delimiter}${key}` : key;\n}\n```"
            ],
            [
                10,
                "javascript",
                "canonicalMd5",
                "```javascript\nfunction canonicalMd5(md5) {\n  if (md5) {\n    if (Buffer.isBuffer(md5))\n      md5 = md5.toString('base64')\n    else if (md5 && md5.match(/^md5-/))\n      md5 = md5.replace(/^md5-/, '')\n\n    if (md5.length === 32)\n      md5 = new Buffer(md5, 'hex').toString('base64')\n  }\n  return md5\n}\n```"
            ],
            [
                173,
                "javascript",
                "YearMonthForm",
                "```javascript\nfunction YearMonthForm({ date, localeUtils, onChange, fromMonth, toMonth }) {\n    const months = localeUtils.getMonths();\n\n    const years = [];\n    for (let i = fromMonth.getFullYear(); i <= toMonth.getFullYear(); i += 1) {\n        years.push(i);\n    }\n\n    const handleChange = function handleChange(e) {\n        const { year, month } = e.target.form;\n        onChange(new Date(year.value, month.value));\n    };\n\n    return (\n        <form className=\"DayPicker-Caption\">\n            <select name=\"month\" onChange={handleChange} value={date.getMonth()}>\n                {months.map((month, i) => <option key={i} value={i}>{month}</option>)}\n            </select>\n            <select name=\"year\" onChange={handleChange} value={date.getFullYear()}>\n                {years.map((year, i) =>\n                    <option key={i} value={year}>\n                        {year}\n                    </option>\n                )}\n            </select>\n        </form>\n    );\n}\n```"
            ],
            [
                630,
                "javascript",
                "toggleControls",
                "```javascript\nfunction toggleControls(force) {\n\t    var controls = this.elements.controls;\n\n\t    if (controls && this.config.hideControls) {\n\t      // Don't hide controls if a touch-device user recently seeked. (Must be limited to touch devices, or it occasionally prevents desktop controls from hiding.)\n\t      var recentTouchSeek = this.touch && this.lastSeekTime + 2000 > Date.now(); // Show controls if force, loading, paused, button interaction, or recent seek, otherwise hide\n\n\t      this.toggleControls(Boolean(force || this.loading || this.paused || controls.pressed || controls.hover || recentTouchSeek));\n\t    }\n\t  }\n```"
            ],
            [
                418,
                "javascript",
                "getProperty",
                "```javascript\nfunction getProperty(objNode, name) {\n    for (var i=0; i<objNode.properties.length; i++) {\n        if (getKey(objNode.properties[i]) === name) {\n            return getValue(objNode.properties[i]);\n        }\n    }\n}\n```"
            ],
            [
                627,
                "javascript",
                "convert",
                "```javascript\nfunction convert(value, mapping) {\n    const val = mapping.converter(value);\n    const validationResult = isValid(val, mapping.validator);\n    if (validationResult === true) {\n        return val;\n    }\n\n    // Make sure that we got something from the conversion.\n    const message = val !== undefined && val !== null && val.toString().length > 0 ?\n        `Received ${underline(JSON.stringify(value))} and it was converted to ` +\n            `${underline(JSON.stringify(val))}. ` :\n        '';\n\n    log.warn(\n        `There was a problem when trying to automatically convert ${bold(mapping.name)}. This ` +\n            `value will be ignored.\\n\\n` +\n            message + validationResult,\n        'Conversion Problem'\n    );\n\n    return undefined;\n}\n```"
            ],
            [
                584,
                "javascript",
                "randomBetween",
                "```javascript\nfunction randomBetween() {\n    var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n\n    if (!isNumber(min) || isNumericalNaN(min)) {\n        throw new TypeError('Min should be numeric');\n    }\n\n    if (!isNumber(max) || isNumericalNaN(max)) {\n        throw new TypeError('Max should be numeric');\n    }\n\n    return Math.random() * max + min;\n}\n```"
            ],
            [
                213,
                "javascript",
                "",
                "```javascript\nfunction(){  \n            var thisDd = dl.children('dd.'+ THIS);\n            \n            if(!thisDd[0]) return;\n            \n            var posTop = thisDd.position().top\n            ,dlHeight = dl.height()\n            ,ddHeight = thisDd.height();\n            \n            //\u82e5\u9009\u4e2d\u5143\u7d20\u5728\u6eda\u52a8\u6761\u4e0d\u53ef\u89c1\u5e95\u90e8\n            if(posTop > dlHeight){\n              dl.scrollTop(posTop + dl.scrollTop() - dlHeight + ddHeight - 5);\n            }\n            \n            //\u82e5\u9009\u62e9\u7384\u7d20\u5728\u6eda\u52a8\u6761\u4e0d\u53ef\u89c1\u9876\u90e8\n            if(posTop < 0){\n              dl.scrollTop(posTop + dl.scrollTop() - 5);\n            }\n          }\n```"
            ],
            [
                43,
                "javascript",
                "",
                "```javascript\nfunction (from, to) {\n    this.lerpingRotation = true;\n    this.startLerpTimeRotation = this.now();\n    this.startRotation = new THREE.Quaternion();\n    this.startRotation.setFromEuler(\n        new THREE.Euler(degToRad(from.x), degToRad(from.y), degToRad(from.z), 'YXZ'));\n    this.targetRotation = new THREE.Quaternion();\n    this.targetRotation.setFromEuler(\n        new THREE.Euler(degToRad(to.x), degToRad(to.y), degToRad(to.z), 'YXZ'));\n  }\n```"
            ],
            [
                409,
                "javascript",
                "sc_hashtableContains",
                "```javascript\nfunction sc_hashtableContains(ht, key) {\n    var hash = sc_hash(key);\n    if (hash in ht)\n\treturn true;\n    else\n\treturn false;\n}\n```"
            ],
            [
                455,
                "javascript",
                "addDisplayPageConfig",
                "```javascript\nfunction addDisplayPageConfig(pages, sourceDir, configFile) {\n    let path = relative(configFile.fullPath, sourceDir);\n    let {pageName} = getPageInfo(path);\n    let currPageDisplayInfo = pages[pageName];\n    let pageConfig = JSON.parse(configFile.content);\n\n    let result = {};\n    // filter the illegal not supported config item\n    // and map the weixin config name to quick app\n    Object.keys(pageConfig).forEach(k => {\n        let newKey = DISPLAY_PAGE_CONFIG_MAP[k];\n        if (newKey) {\n            result[newKey] = pageConfig[k];\n        }\n    });\n\n    // merge the page config, the config defined in page has higher priority\n    // than the app config\n    pages[pageName] = Object.assign({}, currPageDisplayInfo, result);\n}\n```"
            ],
            [
                232,
                "javascript",
                "addClass",
                "```javascript\nfunction addClass(node, className) {\n            if (node && node.el) {\n                node.el.classList.add(className);\n            }\n        }\n```"
            ],
            [
                455,
                "javascript",
                "",
                "```javascript\nfunction (catTail) {\n        var cats = kb.findSubClassesNT(ns.qu('Transaction'))\n        for (var cat in cats) {\n          if (cats.hasOwnProperty(cat)) {\n            if (cat.slice(1, -1).split('#')[1] === catTail) {\n              return kb.sym(cat.slice(1, -1))\n            }\n          };\n        };\n        return null\n      }\n```"
            ],
            [
                52,
                "javascript",
                "formatNumber",
                "```javascript\nfunction formatNumber(formatter, value) {\n  // Spec treats -0 and +0 as 0.\n  var number = TO_NUMBER(value) + 0;\n\n  return %InternalNumberFormat(%GetImplFromInitializedIntlObject(formatter),\n                               number);\n}\n```"
            ],
            [
                16,
                "javascript",
                "",
                "```javascript\nfunction (opts, file, encoding, callback) {\n  var filePath = new FilePath(file.path);\n  results[filePath.value] = results[filePath.value] || [];\n\n  _.each(rules, function(rule, name) {\n    var response;\n\n    if (!opts[name]) {\n      return;\n    }\n\n    response = rule(filePath, opts[name]);\n\n    if (check(response).is('string')) {\n      results[filePath.value].push(response);\n    }\n  });\n\n  callback(null, file);\n}\n```"
            ],
            [
                368,
                "javascript",
                "_calcScrollOffset",
                "```javascript\nfunction _calcScrollOffset(normalize, refreshParticle) {\n\n        // When moving using touch-gestures, make the offset stick to the\n        // finger. When the bounds is exceeded, decrease the scroll distance\n        // by two.\n        if (refreshParticle || (this._scroll.particleValue === undefined)) {\n            this._scroll.particleValue = this._scroll.particle.getPosition1D();\n            this._scroll.particleValue = Math.round(this._scroll.particleValue * 1000) / 1000;\n        }\n\n        // do stuff\n        var scrollOffset = this._scroll.particleValue;\n        if (this._scroll.scrollDelta || this._scroll.normalizedScrollDelta) {\n            scrollOffset += this._scroll.scrollDelta + this._scroll.normalizedScrollDelta;\n            if (((this._scroll.boundsReached & Bounds.PREV) && (scrollOffset > this._scroll.springPosition)) ||\n               ((this._scroll.boundsReached & Bounds.NEXT) && (scrollOffset < this._scroll.springPosition)) ||\n               (this._scroll.boundsReached === Bounds.BOTH)) {\n                scrollOffset = this._scroll.springPosition;\n            }\n            if (normalize) {\n                if (!this._scroll.scrollDelta) {\n                    this._scroll.normalizedScrollDelta = 0;\n                    _setParticle.call(this, scrollOffset, undefined, '_calcScrollOffset');\n                }\n                this._scroll.normalizedScrollDelta += this._scroll.scrollDelta;\n                this._scroll.scrollDelta = 0;\n            }\n        }\n\n        if (this._scroll.scrollForceCount && this._scroll.scrollForce) {\n            if (this._scroll.springPosition !== undefined) {\n                scrollOffset = (scrollOffset + this._scroll.scrollForce + this._scroll.springPosition) / 2.0;\n            }\n            else {\n                scrollOffset += this._scroll.scrollForce;\n            }\n        }\n\n        // Prevent the scroll position from exceeding the bounds when overscroll is disabled\n        if (!this.options.overscroll) {\n            if ((this._scroll.boundsReached === Bounds.BOTH) ||\n                ((this._scroll.boundsReached === Bounds.PREV) && (scrollOffset > this._scroll.springPosition)) ||\n                ((this._scroll.boundsReached === Bounds.NEXT) && (scrollOffset < this._scroll.springPosition))) {\n                scrollOffset = this._scroll.springPosition;\n            }\n        }\n\n        //_log.call(this, 'scrollOffset: ', scrollOffset, ', particle:', this._scroll.particle.getPosition1D(), ', moveToPosition: ', this._scroll.moveToPosition, ', springPosition: ', this._scroll.springPosition);\n        return scrollOffset;\n    }\n```"
            ],
            [
                854,
                "javascript",
                "dispatch",
                "```javascript\nfunction dispatch(ctx) {\n\n        if (_curCtx) {\n            var ret = _curCtx.route.exit({\n                path: _curCtx.path,\n                params: _curCtx.params\n            }, true);\n            if (!ret) {\n                return;\n            }\n        }\n\n        _prevCtx = _curCtx;\n        _curCtx = ctx;\n        if (!_curCtx.route) {\n            var m = map(_curCtx.path);\n            _curCtx.route = m.route;\n            _curCtx.params = m.params;\n        }\n\n        var r = _curCtx.route.enter({\n            force: _curCtx.force,\n            path: _curCtx.path,\n            params: _curCtx.params\n        },true);\n\n        langx.Deferred.when(r).then(function() {\n            _hub.trigger(createEvent(\"routing\", {\n                current: _curCtx,\n                previous: _prevCtx\n            }));\n\n            _curCtx.route.enter({\n                path: _curCtx.path,\n                params: _curCtx.params\n            },false);\n\n            if (_prevCtx) {\n                _prevCtx.route.exit({\n                    path: _prevCtx.path,\n                    params: _prevCtx.params\n                }, false);\n            }\n\n            _hub.trigger(createEvent(\"routed\", {\n                current: _curCtx,\n                previous: _prevCtx\n            }));\n        });\n    }\n```"
            ],
            [
                44,
                "javascript",
                "updateCues",
                "```javascript\nfunction updateCues(input) {\n\t    // Requires UI\n\t    if (!this.supported.ui) {\n\t      return;\n\t    }\n\n\t    if (!is$1.element(this.elements.captions)) {\n\t      this.debug.warn('No captions element to render to');\n\t      return;\n\t    } // Only accept array or empty input\n\n\n\t    if (!is$1.nullOrUndefined(input) && !Array.isArray(input)) {\n\t      this.debug.warn('updateCues: Invalid input', input);\n\t      return;\n\t    }\n\n\t    var cues = input; // Get cues from track\n\n\t    if (!cues) {\n\t      var track = captions.getCurrentTrack.call(this);\n\t      cues = Array.from((track || {}).activeCues || []).map(function (cue) {\n\t        return cue.getCueAsHTML();\n\t      }).map(getHTML);\n\t    } // Set new caption text\n\n\n\t    var content = cues.map(function (cueText) {\n\t      return cueText.trim();\n\t    }).join('\\n');\n\t    var changed = content !== this.elements.captions.innerHTML;\n\n\t    if (changed) {\n\t      // Empty the container and create a new child element\n\t      emptyElement(this.elements.captions);\n\t      var caption = createElement('span', getAttributesFromSelector(this.config.selectors.caption));\n\t      caption.innerHTML = content;\n\t      this.elements.captions.appendChild(caption); // Trigger event\n\n\t      triggerEvent.call(this, this.media, 'cuechange');\n\t    }\n\t  }\n```"
            ],
            [
                691,
                "javascript",
                "promisifyAll",
                "```javascript\nfunction promisifyAll(obj, options) {\n  if (!obj) {\n    // This object could be anything, including a function, a real object, or an array.\n    throw new TypeError('promisify.all requires a truthy value');\n  }\n\n  const out = {};\n\n  for (var name in obj) {\n    if (typeof obj[name] === 'function') {\n      out[name] = promisify(obj[name].bind(obj), options);\n    }\n  }\n\n  return out;\n}\n```"
            ]
        ]
    },
    "Validation-javascript MRR (bs=1,000)": 0.01759316577836756,
    "Examples-Test-java": {
        "_type": "table",
        "columns": [
            "Rank",
            "Language",
            "Query",
            "Code"
        ],
        "data": [
            [
                67,
                "java",
                "Is24XmlUtils.getContext",
                "```java\npublic synchronized static JAXBContext getContext() throws JAXBException {\n        if (JAXB == null) initContext(Thread.currentThread().getContextClassLoader());\n        return JAXB;\n    }\n```"
            ],
            [
                711,
                "java",
                "LogServiceImpl.setLoggerLevel",
                "```java\npublic void setLoggerLevel(String loggerName, String level) throws ManagementConsoleException {\r\n\r\n    sleeConnection.getSleeManagementMBeanUtils().getLogManagementMBeanUtils().setLoggerLevel(loggerName, level);\r\n\r\n  }\n```"
            ],
            [
                268,
                "java",
                "Observable.hide",
                "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Observable<T> hide() {\n        return RxJavaPlugins.onAssembly(new ObservableHide<T>(this));\n    }\n```"
            ],
            [
                63,
                "java",
                "FileAppender.setFile",
                "```java\npublic void setFile(String file) {\n    if (file == null) {\n      fileName = null;\n    } else {\n      // Trim spaces from both ends. The users probably does not want\n      // trailing spaces in file names.\n      fileName = file.trim();\n    }\n  }\n```"
            ],
            [
                798,
                "java",
                "Properties.inspectProperties",
                "```java\nprotected HashMap<String, PropertyDescriptor> inspectProperties() {\n\t\tboolean scanAccessible = classDescriptor.isScanAccessible();\n\t\tClass type = classDescriptor.getType();\n\n\t\tHashMap<String, PropertyDescriptor> map = new HashMap<>();\n\n\t\tMethod[] methods = scanAccessible ? ClassUtil.getAccessibleMethods(type) : ClassUtil.getSupportedMethods(type);\n\n\t\tfor (int iteration = 0; iteration < 2; iteration++) {\n\t\t\t// first find the getters, and then the setters!\n\t\t\tfor (Method method : methods) {\n\t\t\t\tif (Modifier.isStatic(method.getModifiers())) {\n\t\t\t\t\tcontinue;            // ignore static methods\n\t\t\t\t}\n\n\t\t\t\tboolean add = false;\n\t\t\t\tboolean issetter = false;\n\n\t\t\t\tString propertyName;\n\n\t\t\t\tif (iteration == 0) {\n\t\t\t\t\tpropertyName = ClassUtil.getBeanPropertyGetterName(method);\n\t\t\t\t\tif (propertyName != null) {\n\t\t\t\t\t\tadd = true;\n\t\t\t\t\t\tissetter = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tpropertyName = ClassUtil.getBeanPropertySetterName(method);\n\t\t\t\t\tif (propertyName != null) {\n\t\t\t\t\t\tadd = true;\n\t\t\t\t\t\tissetter = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (add) {\n\t\t\t\t\tMethodDescriptor methodDescriptor = classDescriptor.getMethodDescriptor(method.getName(), method.getParameterTypes(), true);\n\t\t\t\t\taddProperty(map, propertyName, methodDescriptor, issetter);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (classDescriptor.isIncludeFieldsAsProperties()) {\n\t\t\tFieldDescriptor[] fieldDescriptors = classDescriptor.getAllFieldDescriptors();\n\t\t\tString[] prefix = classDescriptor.getPropertyFieldPrefix();\n\n\t\t\tfor (FieldDescriptor fieldDescriptor : fieldDescriptors) {\n\t\t\t\tField field = fieldDescriptor.getField();\n\n\t\t\t\tif (Modifier.isStatic(field.getModifiers())) {\n\t\t\t\t\tcontinue;            // ignore static fields\n\t\t\t\t}\n\n\t\t\t\tString name = field.getName();\n\n\t\t\t\tif (prefix != null) {\n\t\t\t\t\tfor (String p : prefix) {\n\t\t\t\t\t\tif (!name.startsWith(p)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tname = name.substring(p.length());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!map.containsKey(name)) {\n\t\t\t\t\t// add missing field as a potential property\n\t\t\t\t\tmap.put(name, createPropertyDescriptor(name, fieldDescriptor));\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\treturn map;\n\t}\n```"
            ],
            [
                227,
                "java",
                "ExceptionHelper.wrapOrThrow",
                "```java\npublic static RuntimeException wrapOrThrow(Throwable error) {\n        if (error instanceof Error) {\n            throw (Error)error;\n        }\n        if (error instanceof RuntimeException) {\n            return (RuntimeException)error;\n        }\n        return new RuntimeException(error);\n    }\n```"
            ],
            [
                711,
                "java",
                "SegmentedByteArray.rangeEquals",
                "```java\npublic boolean rangeEquals(long rangeStart, SegmentedByteArray compareTo, long cmpStart, int length) {\n    \tfor(int i=0;i<length;i++)\n    \t\tif(get(rangeStart + i) != compareTo.get(cmpStart + i))\n    \t\t\treturn false;\n    \treturn true;\n    }\n```"
            ],
            [
                508,
                "java",
                "Update.getVersion",
                "```java\npublic String getVersion() throws MalformedElementException {\n        Element version = getFirstChild(root, \"version\"); //$NON-NLS-1$\n        ensureNotNull(Policy.bind(\"ensure.missingVersionElmt\"), version); //$NON-NLS-1$\n        String href = getChildText(version, \"href\", true); //$NON-NLS-1$\n        ensureNotNull(Policy.bind(\"ensure.missingHrefElmt\"), href); //$NON-NLS-1$\n        return decodeHref(href);\n    }\n```"
            ],
            [
                195,
                "java",
                "AbstractRequestMatcherRegistry.antMatchers",
                "```java\npublic C antMatchers(String... antPatterns) {\n\t\tAssert.state(!this.anyRequestConfigured, \"Can't configure antMatchers after anyRequest\");\n\t\treturn chainRequestMatchers(RequestMatchers.antMatchers(antPatterns));\n\t}\n```"
            ],
            [
                398,
                "java",
                "AbstractRefreshMetricsListener.noFailRefreshEndMetricsReporting",
                "```java\nprivate final void noFailRefreshEndMetricsReporting(ConsumerRefreshMetrics refreshMetrics) {\n        try {\n            refreshEndMetricsReporting(refreshMetrics);\n        } catch (Exception e) {\n            // Metric reporting is not considered critical to consumer refresh. Log exceptions and continue.\n            log.log(Level.SEVERE, \"Encountered an exception in reporting consumer refresh metrics, ignoring exception and continuing with consumer refresh\", e);\n        }\n    }\n```"
            ],
            [
                546,
                "java",
                "JtxTransaction.commitOrRollback",
                "```java\nprotected void commitOrRollback(boolean doCommit) {\n\t\tif (log.isDebugEnabled()) {\n\t\t\tif (doCommit) {\n\t\t\t\tlog.debug(\"Commit JTX\");\n\t\t\t} else {\n\t\t\t\tlog.debug(\"Rollback JTX\");\n\t\t\t}\n\t\t}\n\t\tboolean forcedRollback = false;\n\t\tif (!isNoTransaction()) {\n\t\t\tif (isRollbackOnly()) {\n\t\t\t\tif (doCommit) {\n\t\t\t\t\tdoCommit = false;\n\t\t\t\t\tforcedRollback = true;\n\t\t\t\t}\n\t\t\t} else if (!isActive()) {\n\t\t\t\tif (isCompleted()) {\n\t\t\t\t\tthrow new JtxException(\"TX is already completed, commit or rollback should be called once per TX\");\n\t\t\t\t}\n\t\t\t\tthrow new JtxException(\"No active TX to \" + (doCommit ? \"commit\" : \"rollback\"));\n\t\t\t}\n\t\t}\n\t\tif (doCommit) {\n\t\t\tcommitAllResources();\n\t\t} else {\n\t\t\trollbackAllResources(forcedRollback);\n\t\t}\n\t}\n```"
            ],
            [
                51,
                "java",
                "PrologParser.main",
                "```java\npublic static void main(String[] args)\n    {\n        try\n        {\n            SimpleCharStream inputStream = new SimpleCharStream(System.in, null, 1, 1);\n            PrologParserTokenManager tokenManager = new PrologParserTokenManager(inputStream);\n            Source<Token> tokenSource = new TokenSource(tokenManager);\n\n            PrologParser parser =\n                new PrologParser(tokenSource,\n                    new VariableAndFunctorInternerImpl(\"Prolog_Variable_Namespace\", \"Prolog_Functor_Namespace\"));\n\n            while (true)\n            {\n                // Parse the next sentence or directive.\n                Object nextParsing = parser.clause();\n\n                console.info(nextParsing.toString());\n            }\n        }\n        catch (Exception e)\n        {\n            console.log(Level.SEVERE, e.getMessage(), e);\n            System.exit(1);\n        }\n    }\n```"
            ],
            [
                42,
                "java",
                "FileNameUtil.concat",
                "```java\npublic static String concat(final String basePath, final String fullFilenameToAdd) {\n\t\treturn doConcat(basePath, fullFilenameToAdd, SYSTEM_SEPARATOR);\n\t}\n```"
            ],
            [
                90,
                "java",
                "UserClient.updateUser",
                "```java\npublic User updateUser(User userParam)\n    {\n        if(userParam != null && this.serviceTicket != null)\n        {\n            userParam.setServiceTicket(this.serviceTicket);\n        }\n\n        return new User(this.postJson(\n                userParam, WS.Path.User.Version1.userUpdate()));\n    }\n```"
            ],
            [
                313,
                "java",
                "RollupService.setServerTime",
                "```java\npublic synchronized void setServerTime(long millis) {\n        log.info(\"Manually setting server time to {}  {}\", millis, new java.util.Date(millis));\n        context.setCurrentTimeMillis(millis);\n    }\n```"
            ],
            [
                74,
                "java",
                "EmailFilter.or",
                "```java\nprotected void or(final SearchTerm searchTerm) {\n\t\tif (this.searchTerm == null) {\n\t\t\tthis.searchTerm = searchTerm;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.searchTerm = new OrTerm(this.searchTerm, searchTerm);\n\t}\n```"
            ],
            [
                683,
                "java",
                "ReteGraph.addChild",
                "```java\npublic boolean addChild(BaseVertex vertex) {\n        if ( vertex != null && vertices.add( vertex ) ) {\n            firePropertyChange( PROP_CHILD_ADDED,\n                                null,\n                                vertex );\n            return true;\n        }\n        return false;\n    }\n```"
            ],
            [
                641,
                "java",
                "JPANotificationRESTController.getNotifications",
                "```java\n@RequestMapping(method = RequestMethod.GET)\n    @ResponseBody\n    public List<EntryDTO> getNotifications(\n            @RequestParam(value = \"page\", required = false) Integer page,\n            @RequestParam(value = \"pageSize\", required = false) Integer pageSize) {\n\n        return restService.getNotifications(page, pageSize);\n    }\n```"
            ],
            [
                103,
                "java",
                "Iterators.limit",
                "```java\npublic static <E> Iterator<E> limit(Iterator<? extends E> iterator,\n\t\tint limit)\n\t{\n\t\treturn new LimitIterator<E>(iterator, limit);\n\t}\n```"
            ],
            [
                507,
                "java",
                "Base64.encodeToString",
                "```java\npublic static String encodeToString(String s) {\n        try {\n            return new String(encodeToChar(s.getBytes(ENCODING), false));\n        } catch (UnsupportedEncodingException ignore) {\n            return null;\n        }\n    }\n```"
            ],
            [
                877,
                "java",
                "AreaGrid.calculateColumns",
                "```java\nprivate void calculateColumns()\n    {\n        //create the sorted list of points\n        GridPoint points[] = new GridPoint[areas.size() * 2];\n        int pi = 0;\n        for (Area area : areas)\n        {\n            points[pi] = new GridPoint(area.getX1(), area, true);\n            points[pi+1] = new GridPoint(area.getX2() + 1, area, false);\n            pi += 2;\n            //X2+1 ensures that the end of one box will be on the same point\n            //as the start of the following box\n        }\n        Arrays.sort(points);\n        \n        //calculate the number of columns\n        int cnt = 0;\n        int last = abspos.getX1();\n        for (int i = 0; i < points.length; i++)\n            if (!theSame(points[i].value, last))\n            { \n                last = points[i].value;\n                cnt++;\n            }\n        if (!theSame(last, abspos.getX2()))\n        \tcnt++; //last column finishes the whole area\n        width = cnt;\n        \n        //calculate the column widths and the layout\n        maxindent = 0;\n        minindent = -1;\n        cols = new int[width];\n        cnt = 0;\n        last = abspos.getX1();\n        for (int i = 0; i < points.length; i++)\n        {\n            if (!theSame(points[i].value, last)) \n            {\n                cols[cnt] = points[i].value - last;\n                last = points[i].value;\n                cnt++;\n            }\n            if (points[i].begin)\n            {\n                target.getPosition(points[i].area).setX1(cnt);\n                maxindent = cnt;\n                if (minindent == -1) minindent = maxindent;\n                //points[i].node.getArea().setX1(parent.getArea().getX1() + getColOfs(cnt));\n            }\n            else\n            {\n                Rectangular pos = target.getPosition(points[i].area); \n                pos.setX2(cnt-1);\n                if (pos.getX2() < pos.getX1())\n                    pos.setX2(pos.getX1());\n                //points[i].node.getArea().setX2(parent.getArea().getX1() + getColOfs(pos.getX2()+1));\n            }\n        }\n        if (!theSame(last, abspos.getX2()))\n        \tcols[cnt] = abspos.getX2() - last;\n        if (minindent == -1)\n            minindent = 0;\n    }\n```"
            ],
            [
                258,
                "java",
                "JdbcHelper.initialize",
                "```java\nprivate static void initialize() {\n\t\tString driver = ConfigHelper.getProperty(\"jdbc.driver\");\n\t\tString url = ConfigHelper.getProperty(\"jdbc.url\");\n\t\tString username = ConfigHelper.getProperty(\"jdbc.username\");\n\t\tString password = ConfigHelper.getProperty(\"jdbc.password\");\n\t\tint maxActive = ConfigHelper.getNumerProperty(\"jdbc.max.active\");\n\t\tint maxIdle = ConfigHelper.getNumerProperty(\"jdbc.max.idle\");\n\t\tAssertHelper.notNull(driver);\n\t\tAssertHelper.notNull(url);\n\t\tAssertHelper.notNull(username);\n\t\tAssertHelper.notNull(password);\n\t\t//\u521d\u59cb\u5316DBCP\u6570\u636e\u6e90\n\t\tBasicDataSource ds = new BasicDataSource();\n\t\tds.setDriverClassName(driver);\n\t\tds.setUrl(url);\n\t\tds.setUsername(username);\n\t\tds.setPassword(password);\n        if(maxActive != 0) {\n\t\t    ds.setMaxActive(maxActive);\n        }\n        if(maxIdle != 0) {\n\t\t    ds.setMaxIdle(maxIdle);\n        }\n\t\tdataSource = ds;\n\t}\n```"
            ],
            [
                39,
                "java",
                "PasswordLoginModule.abort",
                "```java\n@Override\n    // Check is broken [LOG.info()]: PMD reports issues although log stmt is guarded. @todo revisit when upgrading PMD.\n    @SuppressWarnings(\"PMD.GuardLogStatementJavaUtil\")\n    public final boolean abort()\n            throws LoginException {\n\n        if (pendingSubject == null) {\n            // the login method of this module has failed earlier, hence we do not need to clean up anything\n            // return 'false' to indicate that this module's login and/or commit method failed\n            // As the login method failed, the state of the module has already been cleared and we do not know\n            // the username / domain anymore. Hence no auditing / message queue notification, and not verbose logging.\n\n            LOG.debug(\"Aborting authentication, as the authentication has failed earlier (login method)\");\n\n            return false;\n        } else if (committedSubject == null) {\n            // the login method of this module succeeded, but the overall authentication failed\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Aborting authentication: '\" + username + \"@\" + domain + \"'\");\n            }\n\n            // cache the username and domain, for they will be purged by \"cleanState()\"\n            final String tempUsername = username;\n            final String tempDomain = domain;\n\n            cleanState();\n\n            final String baseError = new StringBuilder().\n                    append(\"Login post-processing failed after abort for '\").\n                    append(tempUsername).\n                    append(\"@\").\n                    append(tempDomain).\n                    toString();\n            AuditHelper.auditEvent(audit, tempDomain, tempUsername, Events.AUTHN_ABORT_COMMIT,\n                    baseError + \"', but cannot audit login attempt\");\n            MessageHelper.postMessage(messageQ, tempDomain, tempUsername, Events.AUTHN_ABORT_COMMIT,\n                    baseError + \"', but cannot post MQ login attempt event\");\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isInfoEnabled()) {\n                LOG.info(\"Authentication aborted for '\" + tempUsername + \"@\" + tempDomain + \"'\");\n            }\n            return true;\n        } else {\n            // overall authentication succeeded and commit succeeded, but someone else's commit failed\n\n            final String baseError = new StringBuilder().\n                    append(\"Login post-processing failed after abort for '\").\n                    append(username).\n                    append(\"@\").\n                    append(domain).\n                    toString();\n            AuditHelper.auditEvent(audit, domain, username, Events.AUTHN_ABORT_CHAIN,\n                    baseError + \"', but cannot audit login attempt\");\n            MessageHelper.postMessage(messageQ, domain, username, Events.AUTHN_ABORT_CHAIN,\n                    baseError + \"', but cannot post MQ login attempt event\");\n\n            // cache the username and domain, for they will be purged by \"logout()\"\n            final String tempUsername = username;\n            final String tempDomain = domain;\n\n            logout();\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isInfoEnabled()) {\n                LOG.info(\"Authentication aborted for '\" + tempUsername + \"@\" + tempDomain + \"'\");\n            }\n            return true;\n        }\n    }\n```"
            ],
            [
                165,
                "java",
                "Parser.parseOptionalBody",
                "```java\nprivate void parseOptionalBody( Node parent, String tag, String bodyType ) \n        throws JasperException \n    {\n\tif (reader.matches(\"/>\")) {\n\t    // EmptyBody\n\t    return;\n\t}\n\n\tif (!reader.matches(\">\")) {\n\t    err.jspError(reader.mark(), \"jsp.error.unterminated\",\n\t\t\t \"&lt;\" + tag );\n\t}\n        \n        if( reader.matchesETag( tag ) ) {\n            // EmptyBody\n            return;\n        }\n        \n        if( !parseJspAttributeAndBody( parent, tag, bodyType ) ) {\n            // Must be ( '>' # Body ETag )\n            parseBody(parent, tag, bodyType );\n        }\n    }\n```"
            ],
            [
                328,
                "java",
                "Completable.doOnComplete",
                "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Completable doOnComplete(Action onComplete) {\n        return doOnLifecycle(Functions.emptyConsumer(), Functions.emptyConsumer(),\n                onComplete, Functions.EMPTY_ACTION,\n                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION);\n    }\n```"
            ],
            [
                41,
                "java",
                "Strings.trimLeadingCharacter",
                "```java\npublic static String trimLeadingCharacter(String str, final char leadingCharacter)\n   {\n      return trimLeadingCharacter(str, new CharacterChecker()\n      {\n         public boolean isCharacterLegal(char character)\n         {\n            return character == leadingCharacter;\n         }\n      });\n   }\n```"
            ],
            [
                222,
                "java",
                "ProxettaAsmUtil.resolveJavaVersion",
                "```java\npublic static int resolveJavaVersion(final int version) {\n\t\tfinal int javaVersionNumber = SystemUtil.info().getJavaVersionNumber();\n\t\tfinal int platformVersion = javaVersionNumber - 8 + 52;\n\n\t\treturn version > platformVersion ? version : platformVersion;\n\t}\n```"
            ],
            [
                143,
                "java",
                "OpenRtbJsonUtils.startArray",
                "```java\npublic static void startArray(JsonParser par) throws IOException {\n    JsonToken token = par.getCurrentToken();\n    if (token == null || token == JsonToken.FIELD_NAME) {\n      token = par.nextToken();\n    }\n    if (token == JsonToken.START_ARRAY) {\n      par.nextToken();\n    } else {\n      throw new JsonParseException(par, \"Expected start of array\");\n    }\n  }\n```"
            ],
            [
                549,
                "java",
                "Observable.take",
                "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.CUSTOM)\n    public final Observable<T> take(long time, TimeUnit unit, Scheduler scheduler) {\n        return takeUntil(timer(time, unit, scheduler));\n    }\n```"
            ],
            [
                52,
                "java",
                "AbstractEndpoint.executeAndHandle",
                "```java\nprotected HttpResponse executeAndHandle(Request request)\n            throws IOException, IllegalArgumentException, IllegalAccessException, FileNotFoundException, IllegalStateException {\n        HttpResponse response = execute(request);\n        handleResponse(response, request);\n        return response;\n    }\n```"
            ],
            [
                211,
                "java",
                "PipelineConfigurationUpgrader.upgradeIfNecessary",
                "```java\npublic PipelineConfiguration upgradeIfNecessary(\n      StageLibraryTask library,\n      PipelineConfiguration pipelineConf,\n      List<Issue> issues\n  ) {\n    Preconditions.checkArgument(issues.isEmpty(), \"Given list of issues must be empty.\");\n    boolean upgrade;\n\n    // Firstly upgrading schema if needed, then data\n    upgrade = needsSchemaUpgrade(pipelineConf, issues);\n    if(upgrade && issues.isEmpty()) {\n      pipelineConf = upgradeSchema(library, pipelineConf, issues);\n    }\n\n    // Something went wrong with the schema upgrade\n    if(!issues.isEmpty()) {\n      return null;\n    }\n\n    // Upgrading data if needed\n    upgrade = needsUpgrade(library, pipelineConf, issues);\n    if (upgrade && issues.isEmpty()) {\n      //we try to upgrade only if we have all defs for the pipelineConf\n      pipelineConf = upgrade(library, pipelineConf, issues);\n    }\n    return (issues.isEmpty()) ? pipelineConf : null;\n  }\n```"
            ],
            [
                405,
                "java",
                "TimerServiceImpl.getWaitingOnTxCompletionTimers",
                "```java\nprivate Map<String, TimerImpl> getWaitingOnTxCompletionTimers() {\n        Map<String, TimerImpl> timers = null;\n        if (getTransaction() != null) {\n            timers = (Map<String, TimerImpl>) tsr.getResource(waitingOnTxCompletionKey);\n        }\n        return timers == null ? Collections.<String, TimerImpl>emptyMap() : timers;\n    }\n```"
            ],
            [
                332,
                "java",
                "RequestHandler.mainRequestHandler",
                "```java\n@ServiceMethod\n    public void mainRequestHandler(DataStoreRequest dataStoreRequest) {\n\n\n        if (verbose || debug) {\n            logger.info(\"RequestHandler::mainRequestHandler\", dataStoreRequest);\n        }\n        switch (dataStoreRequest.action()) {\n            case GET:\n                masterDataStore.get((GetRequest) dataStoreRequest);\n                break;\n            case GET_LOCAL_DB:\n                handleGetLocalDbVerb(dataStoreRequest);\n                break;\n            case GET_MEM:\n                handleGetMemVerb(dataStoreRequest);\n                break;\n            case SET:\n                masterDataStore.set((SetRequest) dataStoreRequest);\n                break;\n            case SET_BROADCAST:\n                handleSetAndBroadCastVerb(dataStoreRequest);\n                break;\n            case SET_IF_NOT_EXIST:\n                handleSetIfNotExistsVerb(dataStoreRequest);\n                break;\n            case SET_BATCH:\n                handleSetBatch(dataStoreRequest);\n                break;\n            case SET_BATCH_IF_NOT_EXISTS:\n                handleSetBatchIfNotExists(dataStoreRequest);\n                break;\n            case SET_SOURCE:\n                handleSetSource(dataStoreRequest);\n                break;\n            case GET_SOURCE:\n                handleGetSource(dataStoreRequest);\n                break;\n\n            case BATCH_READ:\n                handleBatchRead(dataStoreRequest);\n                break;\n\n            case CLEAR_STATS:\n                handleClearStats(dataStoreRequest);\n                break;\n\n\n            case GET_STATS:\n                handleGetStats(dataStoreRequest);\n                break;\n\n\n            case REMOVE:\n                handleRemove(dataStoreRequest);\n                break;\n\n\n            case REMOVE_SOURCE:\n                handleRemoveSource(dataStoreRequest);\n                break;\n\n            case METHOD_CALL:\n                handleMethodCall((MethodCall) dataStoreRequest);\n                break;\n\n            case SEARCH:\n                handleSearchVerb(dataStoreRequest);\n                break;\n\n            default:\n                puts(dataStoreRequest);\n\n\n        }\n        trackCall(dataStoreRequest.action());\n    }\n```"
            ],
            [
                219,
                "java",
                "AvroTypeUtil.getAvroSchemaFromHeader",
                "```java\npublic static String getAvroSchemaFromHeader(Record record, String headerName) throws DataGeneratorException {\n    String jsonSchema = record.getHeader().getAttribute(headerName);\n    if(jsonSchema == null || jsonSchema.isEmpty()) {\n      throw new DataGeneratorException(Errors.AVRO_GENERATOR_03, record.getHeader().getSourceId());\n    }\n    return jsonSchema;\n  }\n```"
            ],
            [
                944,
                "java",
                "InterfaceRepository.addInterface",
                "```java\nprivate InterfaceDefImpl addInterface(InterfaceAnalysis ia)\n            throws RMIIIOPViolationException, IRConstructionException {\n        InterfaceDefImpl iDef;\n        Class cls = ia.getCls();\n\n        // Lookup: Has it already been added?\n        iDef = (InterfaceDefImpl) interfaceMap.get(cls);\n        if (iDef != null)\n            return iDef; // Yes, just return it.\n\n        // Get module to add interface to.\n        ModuleDefImpl m = ensurePackageExists(cls.getPackage().getName());\n\n        // Add superinterfaces\n        String[] base_interfaces = addInterfaces(ia);\n\n        // Create the interface\n        String base = cls.getName();\n        base = base.substring(base.lastIndexOf('.') + 1);\n        base = Util.javaToIDLName(base);\n\n        iDef = new InterfaceDefImpl(ia.getRepositoryId(),\n                base, \"1.0\", m,\n                base_interfaces, impl);\n        addTypeCode(cls, iDef.type());\n        m.add(base, iDef);\n        interfaceMap.put(cls, iDef); // Remember we mapped this.\n\n        // Fill in constants\n        addConstants(iDef, ia);\n\n        // Add attributes\n        addAttributes(iDef, ia);\n\n        // Fill in operations\n        addOperations(iDef, ia);\n\n        return iDef;\n    }\n```"
            ],
            [
                342,
                "java",
                "StdRandom.uniform",
                "```java\npublic static int uniform(int a, int b)\n  {\n    if (b <= a)\n      throw new IllegalArgumentException(\"Invalid range\");\n    if ((long) b - a >= Integer.MAX_VALUE)\n      throw new IllegalArgumentException(\"Invalid range\");\n    return a + uniform(b - a);\n  }\n```"
            ],
            [
                832,
                "java",
                "DapController.init",
                "```java\npublic void init()\n            throws ServletException\n    {\n        org.slf4j.Logger logServerStartup = org.slf4j.LoggerFactory.getLogger(\"serverStartup\");\n        logServerStartup.info(getClass().getName() + \" initialization start\");\n        try {\n            System.setProperty(\"file.encoding\", \"UTF-8\");\n            Field charset = Charset.class.getDeclaredField(\"defaultCharset\");\n            charset.setAccessible(true);\n            charset.set(null, null);\n            initialize();\n        } catch (Exception e) {\n            throw new ServletException(e);\n        }\n    }\n```"
            ],
            [
                623,
                "java",
                "OfflineClient.getIndex",
                "```java\n@Override\n    public @NonNull MirroredIndex getIndex(@NonNull String indexName) {\n        MirroredIndex index = null;\n        WeakReference<Object> existingIndex = indices.get(indexName);\n        if (existingIndex != null) {\n            index = (MirroredIndex)existingIndex.get();\n        }\n        if (index == null) {\n            index = new MirroredIndex(this, indexName);\n            indices.put(indexName, new WeakReference<Object>(index));\n        }\n        return index;\n    }\n```"
            ],
            [
                360,
                "java",
                "TdsRequestedDataset.getGridDataset",
                "```java\npublic static GridDataset getGridDataset(HttpServletRequest request, HttpServletResponse response, String path) throws IOException {\n    TdsRequestedDataset trd = new TdsRequestedDataset(request, null);\n    if (path != null) trd.path = path;\n    return trd.openAsGridDataset(request, response);\n  }\n```"
            ],
            [
                299,
                "java",
                "Types.isBuiltinType",
                "```java\npublic static boolean isBuiltinType(Type type) {\n\t\tClass<?> rawType = getRawType(type);\n\t\treturn (rawType == null) ? false : builtins.contains(rawType);\n\t}\n```"
            ],
            [
                334,
                "java",
                "SimpleRuleStore.addRule",
                "```java\npublic void addRule(ElementSelector elementSelector, Action action) {\n    action.setContext(context);\n\n    List<Action> a4p = rules.get(elementSelector);\n\n    if (a4p == null) {\n      a4p = new ArrayList<Action>();\n      rules.put(elementSelector, a4p);\n    }\n\n    a4p.add(action);\n  }\n```"
            ],
            [
                37,
                "java",
                "RpcResponseResolver.toResponseObject",
                "```java\nprivate static Object toResponseObject(ResponseCommand responseCommand) throws CodecException {\n        RpcResponseCommand response = (RpcResponseCommand) responseCommand;\n        response.deserialize();\n        return response.getResponseObject();\n    }\n```"
            ],
            [
                378,
                "java",
                "OClosableLinkedContainer.checkOpenFilesLimit",
                "```java\nprivate void checkOpenFilesLimit() throws InterruptedException {\n    CountDownLatch ol = openLatch.get();\n    if (ol != null)\n      ol.await();\n\n    while (openFiles.get() > openLimit) {\n      final CountDownLatch latch = new CountDownLatch(1);\n\n      //make other threads to wait till we evict entries and close evicted open files\n      if (openLatch.compareAndSet(null, latch)) {\n        while (openFiles.get() > openLimit) {\n          emptyBuffers();\n        }\n\n        latch.countDown();\n        openLatch.set(null);\n      } else {\n        ol = openLatch.get();\n\n        if (ol != null)\n          ol.await();\n      }\n    }\n  }\n```"
            ],
            [
                501,
                "java",
                "GuiceApplicationBuilder.load",
                "```java\npublic GuiceApplicationBuilder load(GuiceableModule... modules) {\n    return newBuilder(delegate.load(Scala.varargs(modules)));\n  }\n```"
            ],
            [
                843,
                "java",
                "ProfileEntityArrayAttributeValue.setByte",
                "```java\npublic void setByte(Byte attrValue) {\n\t\tif (attrValue != null) {\n\t\t\tsetString(attrValue.toString());\n\t\t}\n\t\telse {\n\t\t\tsetString(null);\n\t\t}\n\t}\n```"
            ],
            [
                228,
                "java",
                "StreamUtil.outputStreamWriterOf",
                "```java\npublic static OutputStreamWriter outputStreamWriterOf(final OutputStream output, final String encoding) throws UnsupportedEncodingException {\n\t\treturn new OutputStreamWriter(output, encoding);\n\t}\n```"
            ],
            [
                674,
                "java",
                "BufrTableBViewer.writeDiff",
                "```java\nprivate void writeDiff(TableB wmo, TableB t, Formatter out) {\r\n    out.format(\"#%n# BUFR diff written from %s against %s %n#%n\", t.getName(), wmo.getName());\r\n    out.format(\"Class,FXY,enElementName,BUFR_Unit,BUFR_Scale,BUFR_ReferenceValue,BUFR_DataWidth_Bits%n\");\r\n    List<TableB.Descriptor> listDesc = new ArrayList<>(t.getDescriptors());\r\n    Collections.sort(listDesc);\r\n    for (TableB.Descriptor d1 : listDesc) {\r\n      TableB.Descriptor d2 = wmo.getDescriptor(d1.getId());\r\n      if ((d2 == null) || (d1.getScale() != d2.getScale()) || (d1.getRefVal() != d2.getRefVal()) || (d1.getDataWidth() != d2.getDataWidth())) {\r\n        short fxy = d1.getId();\r\n//        int f = (fxy & 0xC000) >> 14;\r\n        int x  = (fxy & 0x3F00) >> 8;\r\n        int y  = fxy & 0xFF;\r\n        out.format(\"%d,%2d%03d,\\\"%s\\\",%s,%d,%d,%d%n\",x,x,y, d1.getName(), d1.getUnits(), d1.getScale(), d1.getRefVal(), d1.getDataWidth());\r\n      }\r\n    }\r\n    out.flush();\r\n  }\n```"
            ],
            [
                996,
                "java",
                "OpenRtbUtils.bids",
                "```java\npublic static Iterable<Bid.Builder> bids(BidResponse.Builder response) {\n    return new ResponseBidsIterator(response, SEAT_ANY, null);\n  }\n```"
            ],
            [
                371,
                "java",
                "Flowable.blockingSubscribe",
                "```java\n@BackpressureSupport(BackpressureKind.UNBOUNDED_IN)\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final void blockingSubscribe(Consumer<? super T> onNext) {\n        FlowableBlockingSubscribe.subscribe(this, onNext, Functions.ON_ERROR_MISSING, Functions.EMPTY_ACTION);\n    }\n```"
            ],
            [
                720,
                "java",
                "Completable.repeatUntil",
                "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Completable repeatUntil(BooleanSupplier stop) {\n        return fromPublisher(toFlowable().repeatUntil(stop));\n    }\n```"
            ]
        ]
    },
    "Test-java MRR (bs=1,000)": 0.012602778446104872,
    "Examples-FuncNameTest-java": {
        "_type": "table",
        "columns": [
            "Rank",
            "Language",
            "Query",
            "Code"
        ],
        "data": [
            [
                504,
                "java",
                "Is24XmlUtils.getContext",
                "```java\npublic synchronized static JAXBContext getContext() throws JAXBException {\n        if (JAXB == null) initContext(Thread.currentThread().getContextClassLoader());\n        return JAXB;\n    }\n```"
            ],
            [
                647,
                "java",
                "LogServiceImpl.setLoggerLevel",
                "```java\npublic void setLoggerLevel(String loggerName, String level) throws ManagementConsoleException {\r\n\r\n    sleeConnection.getSleeManagementMBeanUtils().getLogManagementMBeanUtils().setLoggerLevel(loggerName, level);\r\n\r\n  }\n```"
            ],
            [
                232,
                "java",
                "Observable.hide",
                "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Observable<T> hide() {\n        return RxJavaPlugins.onAssembly(new ObservableHide<T>(this));\n    }\n```"
            ],
            [
                368,
                "java",
                "FileAppender.setFile",
                "```java\npublic void setFile(String file) {\n    if (file == null) {\n      fileName = null;\n    } else {\n      // Trim spaces from both ends. The users probably does not want\n      // trailing spaces in file names.\n      fileName = file.trim();\n    }\n  }\n```"
            ],
            [
                822,
                "java",
                "Properties.inspectProperties",
                "```java\nprotected HashMap<String, PropertyDescriptor> inspectProperties() {\n\t\tboolean scanAccessible = classDescriptor.isScanAccessible();\n\t\tClass type = classDescriptor.getType();\n\n\t\tHashMap<String, PropertyDescriptor> map = new HashMap<>();\n\n\t\tMethod[] methods = scanAccessible ? ClassUtil.getAccessibleMethods(type) : ClassUtil.getSupportedMethods(type);\n\n\t\tfor (int iteration = 0; iteration < 2; iteration++) {\n\t\t\t// first find the getters, and then the setters!\n\t\t\tfor (Method method : methods) {\n\t\t\t\tif (Modifier.isStatic(method.getModifiers())) {\n\t\t\t\t\tcontinue;            // ignore static methods\n\t\t\t\t}\n\n\t\t\t\tboolean add = false;\n\t\t\t\tboolean issetter = false;\n\n\t\t\t\tString propertyName;\n\n\t\t\t\tif (iteration == 0) {\n\t\t\t\t\tpropertyName = ClassUtil.getBeanPropertyGetterName(method);\n\t\t\t\t\tif (propertyName != null) {\n\t\t\t\t\t\tadd = true;\n\t\t\t\t\t\tissetter = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tpropertyName = ClassUtil.getBeanPropertySetterName(method);\n\t\t\t\t\tif (propertyName != null) {\n\t\t\t\t\t\tadd = true;\n\t\t\t\t\t\tissetter = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (add) {\n\t\t\t\t\tMethodDescriptor methodDescriptor = classDescriptor.getMethodDescriptor(method.getName(), method.getParameterTypes(), true);\n\t\t\t\t\taddProperty(map, propertyName, methodDescriptor, issetter);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (classDescriptor.isIncludeFieldsAsProperties()) {\n\t\t\tFieldDescriptor[] fieldDescriptors = classDescriptor.getAllFieldDescriptors();\n\t\t\tString[] prefix = classDescriptor.getPropertyFieldPrefix();\n\n\t\t\tfor (FieldDescriptor fieldDescriptor : fieldDescriptors) {\n\t\t\t\tField field = fieldDescriptor.getField();\n\n\t\t\t\tif (Modifier.isStatic(field.getModifiers())) {\n\t\t\t\t\tcontinue;            // ignore static fields\n\t\t\t\t}\n\n\t\t\t\tString name = field.getName();\n\n\t\t\t\tif (prefix != null) {\n\t\t\t\t\tfor (String p : prefix) {\n\t\t\t\t\t\tif (!name.startsWith(p)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tname = name.substring(p.length());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!map.containsKey(name)) {\n\t\t\t\t\t// add missing field as a potential property\n\t\t\t\t\tmap.put(name, createPropertyDescriptor(name, fieldDescriptor));\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\treturn map;\n\t}\n```"
            ],
            [
                28,
                "java",
                "ExceptionHelper.wrapOrThrow",
                "```java\npublic static RuntimeException wrapOrThrow(Throwable error) {\n        if (error instanceof Error) {\n            throw (Error)error;\n        }\n        if (error instanceof RuntimeException) {\n            return (RuntimeException)error;\n        }\n        return new RuntimeException(error);\n    }\n```"
            ],
            [
                140,
                "java",
                "SegmentedByteArray.rangeEquals",
                "```java\npublic boolean rangeEquals(long rangeStart, SegmentedByteArray compareTo, long cmpStart, int length) {\n    \tfor(int i=0;i<length;i++)\n    \t\tif(get(rangeStart + i) != compareTo.get(cmpStart + i))\n    \t\t\treturn false;\n    \treturn true;\n    }\n```"
            ],
            [
                803,
                "java",
                "Update.getVersion",
                "```java\npublic String getVersion() throws MalformedElementException {\n        Element version = getFirstChild(root, \"version\"); //$NON-NLS-1$\n        ensureNotNull(Policy.bind(\"ensure.missingVersionElmt\"), version); //$NON-NLS-1$\n        String href = getChildText(version, \"href\", true); //$NON-NLS-1$\n        ensureNotNull(Policy.bind(\"ensure.missingHrefElmt\"), href); //$NON-NLS-1$\n        return decodeHref(href);\n    }\n```"
            ],
            [
                103,
                "java",
                "AbstractRequestMatcherRegistry.antMatchers",
                "```java\npublic C antMatchers(String... antPatterns) {\n\t\tAssert.state(!this.anyRequestConfigured, \"Can't configure antMatchers after anyRequest\");\n\t\treturn chainRequestMatchers(RequestMatchers.antMatchers(antPatterns));\n\t}\n```"
            ],
            [
                256,
                "java",
                "AbstractRefreshMetricsListener.noFailRefreshEndMetricsReporting",
                "```java\nprivate final void noFailRefreshEndMetricsReporting(ConsumerRefreshMetrics refreshMetrics) {\n        try {\n            refreshEndMetricsReporting(refreshMetrics);\n        } catch (Exception e) {\n            // Metric reporting is not considered critical to consumer refresh. Log exceptions and continue.\n            log.log(Level.SEVERE, \"Encountered an exception in reporting consumer refresh metrics, ignoring exception and continuing with consumer refresh\", e);\n        }\n    }\n```"
            ],
            [
                736,
                "java",
                "JtxTransaction.commitOrRollback",
                "```java\nprotected void commitOrRollback(boolean doCommit) {\n\t\tif (log.isDebugEnabled()) {\n\t\t\tif (doCommit) {\n\t\t\t\tlog.debug(\"Commit JTX\");\n\t\t\t} else {\n\t\t\t\tlog.debug(\"Rollback JTX\");\n\t\t\t}\n\t\t}\n\t\tboolean forcedRollback = false;\n\t\tif (!isNoTransaction()) {\n\t\t\tif (isRollbackOnly()) {\n\t\t\t\tif (doCommit) {\n\t\t\t\t\tdoCommit = false;\n\t\t\t\t\tforcedRollback = true;\n\t\t\t\t}\n\t\t\t} else if (!isActive()) {\n\t\t\t\tif (isCompleted()) {\n\t\t\t\t\tthrow new JtxException(\"TX is already completed, commit or rollback should be called once per TX\");\n\t\t\t\t}\n\t\t\t\tthrow new JtxException(\"No active TX to \" + (doCommit ? \"commit\" : \"rollback\"));\n\t\t\t}\n\t\t}\n\t\tif (doCommit) {\n\t\t\tcommitAllResources();\n\t\t} else {\n\t\t\trollbackAllResources(forcedRollback);\n\t\t}\n\t}\n```"
            ],
            [
                22,
                "java",
                "PrologParser.main",
                "```java\npublic static void main(String[] args)\n    {\n        try\n        {\n            SimpleCharStream inputStream = new SimpleCharStream(System.in, null, 1, 1);\n            PrologParserTokenManager tokenManager = new PrologParserTokenManager(inputStream);\n            Source<Token> tokenSource = new TokenSource(tokenManager);\n\n            PrologParser parser =\n                new PrologParser(tokenSource,\n                    new VariableAndFunctorInternerImpl(\"Prolog_Variable_Namespace\", \"Prolog_Functor_Namespace\"));\n\n            while (true)\n            {\n                // Parse the next sentence or directive.\n                Object nextParsing = parser.clause();\n\n                console.info(nextParsing.toString());\n            }\n        }\n        catch (Exception e)\n        {\n            console.log(Level.SEVERE, e.getMessage(), e);\n            System.exit(1);\n        }\n    }\n```"
            ],
            [
                53,
                "java",
                "FileNameUtil.concat",
                "```java\npublic static String concat(final String basePath, final String fullFilenameToAdd) {\n\t\treturn doConcat(basePath, fullFilenameToAdd, SYSTEM_SEPARATOR);\n\t}\n```"
            ],
            [
                249,
                "java",
                "UserClient.updateUser",
                "```java\npublic User updateUser(User userParam)\n    {\n        if(userParam != null && this.serviceTicket != null)\n        {\n            userParam.setServiceTicket(this.serviceTicket);\n        }\n\n        return new User(this.postJson(\n                userParam, WS.Path.User.Version1.userUpdate()));\n    }\n```"
            ],
            [
                818,
                "java",
                "RollupService.setServerTime",
                "```java\npublic synchronized void setServerTime(long millis) {\n        log.info(\"Manually setting server time to {}  {}\", millis, new java.util.Date(millis));\n        context.setCurrentTimeMillis(millis);\n    }\n```"
            ],
            [
                835,
                "java",
                "EmailFilter.or",
                "```java\nprotected void or(final SearchTerm searchTerm) {\n\t\tif (this.searchTerm == null) {\n\t\t\tthis.searchTerm = searchTerm;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.searchTerm = new OrTerm(this.searchTerm, searchTerm);\n\t}\n```"
            ],
            [
                134,
                "java",
                "ReteGraph.addChild",
                "```java\npublic boolean addChild(BaseVertex vertex) {\n        if ( vertex != null && vertices.add( vertex ) ) {\n            firePropertyChange( PROP_CHILD_ADDED,\n                                null,\n                                vertex );\n            return true;\n        }\n        return false;\n    }\n```"
            ],
            [
                723,
                "java",
                "JPANotificationRESTController.getNotifications",
                "```java\n@RequestMapping(method = RequestMethod.GET)\n    @ResponseBody\n    public List<EntryDTO> getNotifications(\n            @RequestParam(value = \"page\", required = false) Integer page,\n            @RequestParam(value = \"pageSize\", required = false) Integer pageSize) {\n\n        return restService.getNotifications(page, pageSize);\n    }\n```"
            ],
            [
                825,
                "java",
                "Iterators.limit",
                "```java\npublic static <E> Iterator<E> limit(Iterator<? extends E> iterator,\n\t\tint limit)\n\t{\n\t\treturn new LimitIterator<E>(iterator, limit);\n\t}\n```"
            ],
            [
                372,
                "java",
                "Base64.encodeToString",
                "```java\npublic static String encodeToString(String s) {\n        try {\n            return new String(encodeToChar(s.getBytes(ENCODING), false));\n        } catch (UnsupportedEncodingException ignore) {\n            return null;\n        }\n    }\n```"
            ],
            [
                248,
                "java",
                "AreaGrid.calculateColumns",
                "```java\nprivate void calculateColumns()\n    {\n        //create the sorted list of points\n        GridPoint points[] = new GridPoint[areas.size() * 2];\n        int pi = 0;\n        for (Area area : areas)\n        {\n            points[pi] = new GridPoint(area.getX1(), area, true);\n            points[pi+1] = new GridPoint(area.getX2() + 1, area, false);\n            pi += 2;\n            //X2+1 ensures that the end of one box will be on the same point\n            //as the start of the following box\n        }\n        Arrays.sort(points);\n        \n        //calculate the number of columns\n        int cnt = 0;\n        int last = abspos.getX1();\n        for (int i = 0; i < points.length; i++)\n            if (!theSame(points[i].value, last))\n            { \n                last = points[i].value;\n                cnt++;\n            }\n        if (!theSame(last, abspos.getX2()))\n        \tcnt++; //last column finishes the whole area\n        width = cnt;\n        \n        //calculate the column widths and the layout\n        maxindent = 0;\n        minindent = -1;\n        cols = new int[width];\n        cnt = 0;\n        last = abspos.getX1();\n        for (int i = 0; i < points.length; i++)\n        {\n            if (!theSame(points[i].value, last)) \n            {\n                cols[cnt] = points[i].value - last;\n                last = points[i].value;\n                cnt++;\n            }\n            if (points[i].begin)\n            {\n                target.getPosition(points[i].area).setX1(cnt);\n                maxindent = cnt;\n                if (minindent == -1) minindent = maxindent;\n                //points[i].node.getArea().setX1(parent.getArea().getX1() + getColOfs(cnt));\n            }\n            else\n            {\n                Rectangular pos = target.getPosition(points[i].area); \n                pos.setX2(cnt-1);\n                if (pos.getX2() < pos.getX1())\n                    pos.setX2(pos.getX1());\n                //points[i].node.getArea().setX2(parent.getArea().getX1() + getColOfs(pos.getX2()+1));\n            }\n        }\n        if (!theSame(last, abspos.getX2()))\n        \tcols[cnt] = abspos.getX2() - last;\n        if (minindent == -1)\n            minindent = 0;\n    }\n```"
            ],
            [
                7,
                "java",
                "JdbcHelper.initialize",
                "```java\nprivate static void initialize() {\n\t\tString driver = ConfigHelper.getProperty(\"jdbc.driver\");\n\t\tString url = ConfigHelper.getProperty(\"jdbc.url\");\n\t\tString username = ConfigHelper.getProperty(\"jdbc.username\");\n\t\tString password = ConfigHelper.getProperty(\"jdbc.password\");\n\t\tint maxActive = ConfigHelper.getNumerProperty(\"jdbc.max.active\");\n\t\tint maxIdle = ConfigHelper.getNumerProperty(\"jdbc.max.idle\");\n\t\tAssertHelper.notNull(driver);\n\t\tAssertHelper.notNull(url);\n\t\tAssertHelper.notNull(username);\n\t\tAssertHelper.notNull(password);\n\t\t//\u521d\u59cb\u5316DBCP\u6570\u636e\u6e90\n\t\tBasicDataSource ds = new BasicDataSource();\n\t\tds.setDriverClassName(driver);\n\t\tds.setUrl(url);\n\t\tds.setUsername(username);\n\t\tds.setPassword(password);\n        if(maxActive != 0) {\n\t\t    ds.setMaxActive(maxActive);\n        }\n        if(maxIdle != 0) {\n\t\t    ds.setMaxIdle(maxIdle);\n        }\n\t\tdataSource = ds;\n\t}\n```"
            ],
            [
                645,
                "java",
                "PasswordLoginModule.abort",
                "```java\n@Override\n    // Check is broken [LOG.info()]: PMD reports issues although log stmt is guarded. @todo revisit when upgrading PMD.\n    @SuppressWarnings(\"PMD.GuardLogStatementJavaUtil\")\n    public final boolean abort()\n            throws LoginException {\n\n        if (pendingSubject == null) {\n            // the login method of this module has failed earlier, hence we do not need to clean up anything\n            // return 'false' to indicate that this module's login and/or commit method failed\n            // As the login method failed, the state of the module has already been cleared and we do not know\n            // the username / domain anymore. Hence no auditing / message queue notification, and not verbose logging.\n\n            LOG.debug(\"Aborting authentication, as the authentication has failed earlier (login method)\");\n\n            return false;\n        } else if (committedSubject == null) {\n            // the login method of this module succeeded, but the overall authentication failed\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Aborting authentication: '\" + username + \"@\" + domain + \"'\");\n            }\n\n            // cache the username and domain, for they will be purged by \"cleanState()\"\n            final String tempUsername = username;\n            final String tempDomain = domain;\n\n            cleanState();\n\n            final String baseError = new StringBuilder().\n                    append(\"Login post-processing failed after abort for '\").\n                    append(tempUsername).\n                    append(\"@\").\n                    append(tempDomain).\n                    toString();\n            AuditHelper.auditEvent(audit, tempDomain, tempUsername, Events.AUTHN_ABORT_COMMIT,\n                    baseError + \"', but cannot audit login attempt\");\n            MessageHelper.postMessage(messageQ, tempDomain, tempUsername, Events.AUTHN_ABORT_COMMIT,\n                    baseError + \"', but cannot post MQ login attempt event\");\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isInfoEnabled()) {\n                LOG.info(\"Authentication aborted for '\" + tempUsername + \"@\" + tempDomain + \"'\");\n            }\n            return true;\n        } else {\n            // overall authentication succeeded and commit succeeded, but someone else's commit failed\n\n            final String baseError = new StringBuilder().\n                    append(\"Login post-processing failed after abort for '\").\n                    append(username).\n                    append(\"@\").\n                    append(domain).\n                    toString();\n            AuditHelper.auditEvent(audit, domain, username, Events.AUTHN_ABORT_CHAIN,\n                    baseError + \"', but cannot audit login attempt\");\n            MessageHelper.postMessage(messageQ, domain, username, Events.AUTHN_ABORT_CHAIN,\n                    baseError + \"', but cannot post MQ login attempt event\");\n\n            // cache the username and domain, for they will be purged by \"logout()\"\n            final String tempUsername = username;\n            final String tempDomain = domain;\n\n            logout();\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isInfoEnabled()) {\n                LOG.info(\"Authentication aborted for '\" + tempUsername + \"@\" + tempDomain + \"'\");\n            }\n            return true;\n        }\n    }\n```"
            ],
            [
                32,
                "java",
                "Parser.parseOptionalBody",
                "```java\nprivate void parseOptionalBody( Node parent, String tag, String bodyType ) \n        throws JasperException \n    {\n\tif (reader.matches(\"/>\")) {\n\t    // EmptyBody\n\t    return;\n\t}\n\n\tif (!reader.matches(\">\")) {\n\t    err.jspError(reader.mark(), \"jsp.error.unterminated\",\n\t\t\t \"&lt;\" + tag );\n\t}\n        \n        if( reader.matchesETag( tag ) ) {\n            // EmptyBody\n            return;\n        }\n        \n        if( !parseJspAttributeAndBody( parent, tag, bodyType ) ) {\n            // Must be ( '>' # Body ETag )\n            parseBody(parent, tag, bodyType );\n        }\n    }\n```"
            ],
            [
                128,
                "java",
                "Completable.doOnComplete",
                "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Completable doOnComplete(Action onComplete) {\n        return doOnLifecycle(Functions.emptyConsumer(), Functions.emptyConsumer(),\n                onComplete, Functions.EMPTY_ACTION,\n                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION);\n    }\n```"
            ],
            [
                299,
                "java",
                "Strings.trimLeadingCharacter",
                "```java\npublic static String trimLeadingCharacter(String str, final char leadingCharacter)\n   {\n      return trimLeadingCharacter(str, new CharacterChecker()\n      {\n         public boolean isCharacterLegal(char character)\n         {\n            return character == leadingCharacter;\n         }\n      });\n   }\n```"
            ],
            [
                361,
                "java",
                "ProxettaAsmUtil.resolveJavaVersion",
                "```java\npublic static int resolveJavaVersion(final int version) {\n\t\tfinal int javaVersionNumber = SystemUtil.info().getJavaVersionNumber();\n\t\tfinal int platformVersion = javaVersionNumber - 8 + 52;\n\n\t\treturn version > platformVersion ? version : platformVersion;\n\t}\n```"
            ],
            [
                14,
                "java",
                "OpenRtbJsonUtils.startArray",
                "```java\npublic static void startArray(JsonParser par) throws IOException {\n    JsonToken token = par.getCurrentToken();\n    if (token == null || token == JsonToken.FIELD_NAME) {\n      token = par.nextToken();\n    }\n    if (token == JsonToken.START_ARRAY) {\n      par.nextToken();\n    } else {\n      throw new JsonParseException(par, \"Expected start of array\");\n    }\n  }\n```"
            ],
            [
                567,
                "java",
                "Observable.take",
                "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.CUSTOM)\n    public final Observable<T> take(long time, TimeUnit unit, Scheduler scheduler) {\n        return takeUntil(timer(time, unit, scheduler));\n    }\n```"
            ],
            [
                400,
                "java",
                "AbstractEndpoint.executeAndHandle",
                "```java\nprotected HttpResponse executeAndHandle(Request request)\n            throws IOException, IllegalArgumentException, IllegalAccessException, FileNotFoundException, IllegalStateException {\n        HttpResponse response = execute(request);\n        handleResponse(response, request);\n        return response;\n    }\n```"
            ],
            [
                457,
                "java",
                "PipelineConfigurationUpgrader.upgradeIfNecessary",
                "```java\npublic PipelineConfiguration upgradeIfNecessary(\n      StageLibraryTask library,\n      PipelineConfiguration pipelineConf,\n      List<Issue> issues\n  ) {\n    Preconditions.checkArgument(issues.isEmpty(), \"Given list of issues must be empty.\");\n    boolean upgrade;\n\n    // Firstly upgrading schema if needed, then data\n    upgrade = needsSchemaUpgrade(pipelineConf, issues);\n    if(upgrade && issues.isEmpty()) {\n      pipelineConf = upgradeSchema(library, pipelineConf, issues);\n    }\n\n    // Something went wrong with the schema upgrade\n    if(!issues.isEmpty()) {\n      return null;\n    }\n\n    // Upgrading data if needed\n    upgrade = needsUpgrade(library, pipelineConf, issues);\n    if (upgrade && issues.isEmpty()) {\n      //we try to upgrade only if we have all defs for the pipelineConf\n      pipelineConf = upgrade(library, pipelineConf, issues);\n    }\n    return (issues.isEmpty()) ? pipelineConf : null;\n  }\n```"
            ],
            [
                246,
                "java",
                "TimerServiceImpl.getWaitingOnTxCompletionTimers",
                "```java\nprivate Map<String, TimerImpl> getWaitingOnTxCompletionTimers() {\n        Map<String, TimerImpl> timers = null;\n        if (getTransaction() != null) {\n            timers = (Map<String, TimerImpl>) tsr.getResource(waitingOnTxCompletionKey);\n        }\n        return timers == null ? Collections.<String, TimerImpl>emptyMap() : timers;\n    }\n```"
            ],
            [
                104,
                "java",
                "RequestHandler.mainRequestHandler",
                "```java\n@ServiceMethod\n    public void mainRequestHandler(DataStoreRequest dataStoreRequest) {\n\n\n        if (verbose || debug) {\n            logger.info(\"RequestHandler::mainRequestHandler\", dataStoreRequest);\n        }\n        switch (dataStoreRequest.action()) {\n            case GET:\n                masterDataStore.get((GetRequest) dataStoreRequest);\n                break;\n            case GET_LOCAL_DB:\n                handleGetLocalDbVerb(dataStoreRequest);\n                break;\n            case GET_MEM:\n                handleGetMemVerb(dataStoreRequest);\n                break;\n            case SET:\n                masterDataStore.set((SetRequest) dataStoreRequest);\n                break;\n            case SET_BROADCAST:\n                handleSetAndBroadCastVerb(dataStoreRequest);\n                break;\n            case SET_IF_NOT_EXIST:\n                handleSetIfNotExistsVerb(dataStoreRequest);\n                break;\n            case SET_BATCH:\n                handleSetBatch(dataStoreRequest);\n                break;\n            case SET_BATCH_IF_NOT_EXISTS:\n                handleSetBatchIfNotExists(dataStoreRequest);\n                break;\n            case SET_SOURCE:\n                handleSetSource(dataStoreRequest);\n                break;\n            case GET_SOURCE:\n                handleGetSource(dataStoreRequest);\n                break;\n\n            case BATCH_READ:\n                handleBatchRead(dataStoreRequest);\n                break;\n\n            case CLEAR_STATS:\n                handleClearStats(dataStoreRequest);\n                break;\n\n\n            case GET_STATS:\n                handleGetStats(dataStoreRequest);\n                break;\n\n\n            case REMOVE:\n                handleRemove(dataStoreRequest);\n                break;\n\n\n            case REMOVE_SOURCE:\n                handleRemoveSource(dataStoreRequest);\n                break;\n\n            case METHOD_CALL:\n                handleMethodCall((MethodCall) dataStoreRequest);\n                break;\n\n            case SEARCH:\n                handleSearchVerb(dataStoreRequest);\n                break;\n\n            default:\n                puts(dataStoreRequest);\n\n\n        }\n        trackCall(dataStoreRequest.action());\n    }\n```"
            ],
            [
                120,
                "java",
                "AvroTypeUtil.getAvroSchemaFromHeader",
                "```java\npublic static String getAvroSchemaFromHeader(Record record, String headerName) throws DataGeneratorException {\n    String jsonSchema = record.getHeader().getAttribute(headerName);\n    if(jsonSchema == null || jsonSchema.isEmpty()) {\n      throw new DataGeneratorException(Errors.AVRO_GENERATOR_03, record.getHeader().getSourceId());\n    }\n    return jsonSchema;\n  }\n```"
            ],
            [
                877,
                "java",
                "InterfaceRepository.addInterface",
                "```java\nprivate InterfaceDefImpl addInterface(InterfaceAnalysis ia)\n            throws RMIIIOPViolationException, IRConstructionException {\n        InterfaceDefImpl iDef;\n        Class cls = ia.getCls();\n\n        // Lookup: Has it already been added?\n        iDef = (InterfaceDefImpl) interfaceMap.get(cls);\n        if (iDef != null)\n            return iDef; // Yes, just return it.\n\n        // Get module to add interface to.\n        ModuleDefImpl m = ensurePackageExists(cls.getPackage().getName());\n\n        // Add superinterfaces\n        String[] base_interfaces = addInterfaces(ia);\n\n        // Create the interface\n        String base = cls.getName();\n        base = base.substring(base.lastIndexOf('.') + 1);\n        base = Util.javaToIDLName(base);\n\n        iDef = new InterfaceDefImpl(ia.getRepositoryId(),\n                base, \"1.0\", m,\n                base_interfaces, impl);\n        addTypeCode(cls, iDef.type());\n        m.add(base, iDef);\n        interfaceMap.put(cls, iDef); // Remember we mapped this.\n\n        // Fill in constants\n        addConstants(iDef, ia);\n\n        // Add attributes\n        addAttributes(iDef, ia);\n\n        // Fill in operations\n        addOperations(iDef, ia);\n\n        return iDef;\n    }\n```"
            ],
            [
                651,
                "java",
                "StdRandom.uniform",
                "```java\npublic static int uniform(int a, int b)\n  {\n    if (b <= a)\n      throw new IllegalArgumentException(\"Invalid range\");\n    if ((long) b - a >= Integer.MAX_VALUE)\n      throw new IllegalArgumentException(\"Invalid range\");\n    return a + uniform(b - a);\n  }\n```"
            ],
            [
                580,
                "java",
                "DapController.init",
                "```java\npublic void init()\n            throws ServletException\n    {\n        org.slf4j.Logger logServerStartup = org.slf4j.LoggerFactory.getLogger(\"serverStartup\");\n        logServerStartup.info(getClass().getName() + \" initialization start\");\n        try {\n            System.setProperty(\"file.encoding\", \"UTF-8\");\n            Field charset = Charset.class.getDeclaredField(\"defaultCharset\");\n            charset.setAccessible(true);\n            charset.set(null, null);\n            initialize();\n        } catch (Exception e) {\n            throw new ServletException(e);\n        }\n    }\n```"
            ],
            [
                525,
                "java",
                "OfflineClient.getIndex",
                "```java\n@Override\n    public @NonNull MirroredIndex getIndex(@NonNull String indexName) {\n        MirroredIndex index = null;\n        WeakReference<Object> existingIndex = indices.get(indexName);\n        if (existingIndex != null) {\n            index = (MirroredIndex)existingIndex.get();\n        }\n        if (index == null) {\n            index = new MirroredIndex(this, indexName);\n            indices.put(indexName, new WeakReference<Object>(index));\n        }\n        return index;\n    }\n```"
            ],
            [
                341,
                "java",
                "TdsRequestedDataset.getGridDataset",
                "```java\npublic static GridDataset getGridDataset(HttpServletRequest request, HttpServletResponse response, String path) throws IOException {\n    TdsRequestedDataset trd = new TdsRequestedDataset(request, null);\n    if (path != null) trd.path = path;\n    return trd.openAsGridDataset(request, response);\n  }\n```"
            ],
            [
                888,
                "java",
                "Types.isBuiltinType",
                "```java\npublic static boolean isBuiltinType(Type type) {\n\t\tClass<?> rawType = getRawType(type);\n\t\treturn (rawType == null) ? false : builtins.contains(rawType);\n\t}\n```"
            ],
            [
                914,
                "java",
                "SimpleRuleStore.addRule",
                "```java\npublic void addRule(ElementSelector elementSelector, Action action) {\n    action.setContext(context);\n\n    List<Action> a4p = rules.get(elementSelector);\n\n    if (a4p == null) {\n      a4p = new ArrayList<Action>();\n      rules.put(elementSelector, a4p);\n    }\n\n    a4p.add(action);\n  }\n```"
            ],
            [
                25,
                "java",
                "RpcResponseResolver.toResponseObject",
                "```java\nprivate static Object toResponseObject(ResponseCommand responseCommand) throws CodecException {\n        RpcResponseCommand response = (RpcResponseCommand) responseCommand;\n        response.deserialize();\n        return response.getResponseObject();\n    }\n```"
            ],
            [
                280,
                "java",
                "OClosableLinkedContainer.checkOpenFilesLimit",
                "```java\nprivate void checkOpenFilesLimit() throws InterruptedException {\n    CountDownLatch ol = openLatch.get();\n    if (ol != null)\n      ol.await();\n\n    while (openFiles.get() > openLimit) {\n      final CountDownLatch latch = new CountDownLatch(1);\n\n      //make other threads to wait till we evict entries and close evicted open files\n      if (openLatch.compareAndSet(null, latch)) {\n        while (openFiles.get() > openLimit) {\n          emptyBuffers();\n        }\n\n        latch.countDown();\n        openLatch.set(null);\n      } else {\n        ol = openLatch.get();\n\n        if (ol != null)\n          ol.await();\n      }\n    }\n  }\n```"
            ],
            [
                212,
                "java",
                "GuiceApplicationBuilder.load",
                "```java\npublic GuiceApplicationBuilder load(GuiceableModule... modules) {\n    return newBuilder(delegate.load(Scala.varargs(modules)));\n  }\n```"
            ],
            [
                376,
                "java",
                "ProfileEntityArrayAttributeValue.setByte",
                "```java\npublic void setByte(Byte attrValue) {\n\t\tif (attrValue != null) {\n\t\t\tsetString(attrValue.toString());\n\t\t}\n\t\telse {\n\t\t\tsetString(null);\n\t\t}\n\t}\n```"
            ],
            [
                375,
                "java",
                "StreamUtil.outputStreamWriterOf",
                "```java\npublic static OutputStreamWriter outputStreamWriterOf(final OutputStream output, final String encoding) throws UnsupportedEncodingException {\n\t\treturn new OutputStreamWriter(output, encoding);\n\t}\n```"
            ],
            [
                209,
                "java",
                "BufrTableBViewer.writeDiff",
                "```java\nprivate void writeDiff(TableB wmo, TableB t, Formatter out) {\r\n    out.format(\"#%n# BUFR diff written from %s against %s %n#%n\", t.getName(), wmo.getName());\r\n    out.format(\"Class,FXY,enElementName,BUFR_Unit,BUFR_Scale,BUFR_ReferenceValue,BUFR_DataWidth_Bits%n\");\r\n    List<TableB.Descriptor> listDesc = new ArrayList<>(t.getDescriptors());\r\n    Collections.sort(listDesc);\r\n    for (TableB.Descriptor d1 : listDesc) {\r\n      TableB.Descriptor d2 = wmo.getDescriptor(d1.getId());\r\n      if ((d2 == null) || (d1.getScale() != d2.getScale()) || (d1.getRefVal() != d2.getRefVal()) || (d1.getDataWidth() != d2.getDataWidth())) {\r\n        short fxy = d1.getId();\r\n//        int f = (fxy & 0xC000) >> 14;\r\n        int x  = (fxy & 0x3F00) >> 8;\r\n        int y  = fxy & 0xFF;\r\n        out.format(\"%d,%2d%03d,\\\"%s\\\",%s,%d,%d,%d%n\",x,x,y, d1.getName(), d1.getUnits(), d1.getScale(), d1.getRefVal(), d1.getDataWidth());\r\n      }\r\n    }\r\n    out.flush();\r\n  }\n```"
            ],
            [
                979,
                "java",
                "OpenRtbUtils.bids",
                "```java\npublic static Iterable<Bid.Builder> bids(BidResponse.Builder response) {\n    return new ResponseBidsIterator(response, SEAT_ANY, null);\n  }\n```"
            ],
            [
                649,
                "java",
                "Flowable.blockingSubscribe",
                "```java\n@BackpressureSupport(BackpressureKind.UNBOUNDED_IN)\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final void blockingSubscribe(Consumer<? super T> onNext) {\n        FlowableBlockingSubscribe.subscribe(this, onNext, Functions.ON_ERROR_MISSING, Functions.EMPTY_ACTION);\n    }\n```"
            ],
            [
                73,
                "java",
                "Completable.repeatUntil",
                "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Completable repeatUntil(BooleanSupplier stop) {\n        return fromPublisher(toFlowable().repeatUntil(stop));\n    }\n```"
            ]
        ]
    },
    "FuncNameTest-java MRR (bs=1,000)": 0.03172678163367573,
    "Examples-Validation-java": {
        "_type": "table",
        "columns": [
            "Rank",
            "Language",
            "Query",
            "Code"
        ],
        "data": [
            [
                273,
                "java",
                "FareAttribute.setStatementParameters",
                "```java\n@Override\n    public void setStatementParameters(PreparedStatement statement, boolean setDefaultId) throws SQLException {\n        int oneBasedIndex = 1;\n        if (!setDefaultId) statement.setInt(oneBasedIndex++, id);\n        statement.setString(oneBasedIndex++, fare_id);\n        statement.setDouble(oneBasedIndex++, price);\n        statement.setString(oneBasedIndex++, currency_type);\n        setIntParameter(statement, oneBasedIndex++, payment_method);\n        // FIXME Entity.INT_MISSING causing out of range error on small int\n        setIntParameter(statement, oneBasedIndex++, transfers);\n        statement.setString(oneBasedIndex++, agency_id);\n        setIntParameter(statement, oneBasedIndex++, transfer_duration);\n    }\n```"
            ],
            [
                252,
                "java",
                "Xmls.children",
                "```java\npublic static List<Element> children(Element ele, String regex) {\n        final List<Element> list = new ArrayList<Element>(ele.getChildNodes().getLength());\n        eachChildren(ele, regex, new Each<Element>() {\n            public void invoke(int index, Element cld, int length) {\n                list.add(cld);\n            }\n        });\n        return list;\n    }\n```"
            ],
            [
                625,
                "java",
                "SelectSelectivePlugin.initialized",
                "```java\n@Override\n    public void initialized(IntrospectedTable introspectedTable) {\n        super.initialized(introspectedTable);\n\n        // bug:26,27\n        this.selectByExampleSelectiveEle = null;\n        this.selectByPrimaryKeySelectiveEle = null;\n    }\n```"
            ],
            [
                27,
                "java",
                "AbstractSpeedModelManager.consumeKeyMessage",
                "```java\npublic void consumeKeyMessage(String key, U message, Configuration hadoopConf) throws IOException {\n    log.info(\"{} : {}\", key, message);\n  }\n```"
            ],
            [
                621,
                "java",
                "SocializeShareUtils.shareViaSocialNetworks",
                "```java\n@Override\n\tpublic void shareViaSocialNetworks(Activity context, final Entity entity, final ShareOptions shareOptions, final SocialNetworkShareListener listener, final SocialNetwork...networks) {\n\t\t\n\t\tfinal SocializeSession session = getSocialize().getSession();\n\t\t\n\t\tif(isDisplayAuthDialog(context, session, shareOptions, networks)) {\n\t\t\t\n\t\t\tauthDialogFactory.show(context, new AuthDialogListener() {\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onShow(Dialog dialog, AuthPanelView dialogView) {}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onCancel(Dialog dialog) {\n\t\t\t\t\tif(listener != null) {\n\t\t\t\t\t\tlistener.onCancel();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onSkipAuth(Activity context, Dialog dialog) {\n\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\tdoShare(context, entity, listener, shareOptions, networks);\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onError(Activity context, Dialog dialog, Exception error) {\n\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\tif(listener != null) {\n\t\t\t\t\t\tlistener.onError(SocializeException.wrap(error));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onAuthenticate(Activity context, Dialog dialog, SocialNetwork network) {\n\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\tdoShare(context, entity, listener, shareOptions, network);\n\t\t\t\t}\n\t\t\t}, !config.isAllowSkipAuthOnAllActions());\n\t\t}\n\t\telse {\n\t\t\tdoShare(context, entity, listener, shareOptions, networks);\n\t\t}\t\t\t\n\t}\n```"
            ],
            [
                721,
                "java",
                "AbstractAuthenticationFilter.doFilter",
                "```java\n@Override\n    protected void doFilter(final HttpServletRequest _request,\n                            final HttpServletResponse _response,\n                            final FilterChain _chain)\n        throws IOException, ServletException\n    {\n        if (isLoggedIn(_request)) {\n            _chain.doFilter(_request, _response);\n        } else {\n            doAuthenticate(_request, _response, _chain);\n        }\n    }\n```"
            ],
            [
                551,
                "java",
                "PrettyConfig.getMappingById",
                "```java\npublic UrlMapping getMappingById(String id)\n   {\n      if (id != null)\n      {\n         if (id.startsWith(PrettyContext.PRETTY_PREFIX))\n         {\n            id = id.substring(PrettyContext.PRETTY_PREFIX.length());\n         }\n         for (UrlMapping mapping : getMappings())\n         {\n            if (mapping.getId().equals(id))\n            {\n               return mapping;\n            }\n         }\n      }\n      return null;\n   }\n```"
            ],
            [
                383,
                "java",
                "ExecutionEngine.fireErrorReceivingResponseEvent",
                "```java\nprivate static void fireErrorReceivingResponseEvent(OperationContext opContext, HttpURLConnection request,\n            RequestResult result) {\n        if (opContext.getErrorReceivingResponseEventHandler().hasListeners()\n                || OperationContext.getGlobalErrorReceivingResponseEventHandler().hasListeners()) {\n            ErrorReceivingResponseEvent event = new ErrorReceivingResponseEvent(opContext, request, result);\n            opContext.getErrorReceivingResponseEventHandler().fireEvent(event);\n            OperationContext.getGlobalErrorReceivingResponseEventHandler().fireEvent(event);\n        }\n    }\n```"
            ],
            [
                28,
                "java",
                "ThrowableAssert.overridingErrorMessage",
                "```java\n@Override\n  public @NotNull ThrowableAssert overridingErrorMessage(@Nullable String message) {\n    objectAssert.overridingErrorMessage(message);\n    return super.overridingErrorMessage(message);\n  }\n```"
            ],
            [
                85,
                "java",
                "ShadowLauncherApps.addDynamicShortcut",
                "```java\npublic void addDynamicShortcut(ShortcutInfo shortcutInfo) {\n    shortcuts.add(shortcutInfo);\n    shortcutsChanged(shortcutInfo.getPackage(), Lists.newArrayList(shortcutInfo));\n  }\n```"
            ],
            [
                35,
                "java",
                "AbstractFuture.get",
                "```java\n@CanIgnoreReturnValue\n  @Override\n  public V get(long timeout, TimeUnit unit)\n      throws InterruptedException, TimeoutException, ExecutionException {\n    // NOTE: if timeout < 0, remainingNanos will be < 0 and we will fall into the while(true) loop\n    // at the bottom and throw a timeoutexception.\n    final long timeoutNanos = unit.toNanos(timeout); // we rely on the implicit null check on unit.\n    long remainingNanos = timeoutNanos;\n    if (Thread.interrupted()) {\n      throw new InterruptedException();\n    }\n    Object localValue = value;\n    if (localValue != null & !(localValue instanceof SetFuture)) {\n      return getDoneValue(localValue);\n    }\n    // we delay calling nanoTime until we know we will need to either park or spin\n    final long endNanos = remainingNanos > 0 ? System.nanoTime() + remainingNanos : 0;\n    long_wait_loop:\n    if (remainingNanos >= SPIN_THRESHOLD_NANOS) {\n      Waiter oldHead = waiters;\n      if (oldHead != Waiter.TOMBSTONE) {\n        Waiter node = new Waiter();\n        do {\n          node.setNext(oldHead);\n          if (ATOMIC_HELPER.casWaiters(this, oldHead, node)) {\n            while (true) {\n              LockSupport.parkNanos(this, remainingNanos);\n              // Check interruption first, if we woke up due to interruption we need to honor that.\n              if (Thread.interrupted()) {\n                removeWaiter(node);\n                throw new InterruptedException();\n              }\n\n              // Otherwise re-read and check doneness. If we loop then it must have been a spurious\n              // wakeup\n              localValue = value;\n              if (localValue != null & !(localValue instanceof SetFuture)) {\n                return getDoneValue(localValue);\n              }\n\n              // timed out?\n              remainingNanos = endNanos - System.nanoTime();\n              if (remainingNanos < SPIN_THRESHOLD_NANOS) {\n                // Remove the waiter, one way or another we are done parking this thread.\n                removeWaiter(node);\n                break long_wait_loop; // jump down to the busy wait loop\n              }\n            }\n          }\n          oldHead = waiters; // re-read and loop.\n        } while (oldHead != Waiter.TOMBSTONE);\n      }\n      // re-read value, if we get here then we must have observed a TOMBSTONE while trying to add a\n      // waiter.\n      return getDoneValue(value);\n    }\n    // If we get here then we have remainingNanos < SPIN_THRESHOLD_NANOS and there is no node on the\n    // waiters list\n    while (remainingNanos > 0) {\n      localValue = value;\n      if (localValue != null & !(localValue instanceof SetFuture)) {\n        return getDoneValue(localValue);\n      }\n      if (Thread.interrupted()) {\n        throw new InterruptedException();\n      }\n      remainingNanos = endNanos - System.nanoTime();\n    }\n\n    String futureToString = toString();\n    final String unitString = unit.toString().toLowerCase(Locale.ROOT);\n    String message = \"Waited \" + timeout + \" \" + unit.toString().toLowerCase(Locale.ROOT);\n    // Only report scheduling delay if larger than our spin threshold - otherwise it's just noise\n    if (remainingNanos + SPIN_THRESHOLD_NANOS < 0) {\n      // We over-waited for our timeout.\n      message += \" (plus \";\n      long overWaitNanos = -remainingNanos;\n      long overWaitUnits = unit.convert(overWaitNanos, TimeUnit.NANOSECONDS);\n      long overWaitLeftoverNanos = overWaitNanos - unit.toNanos(overWaitUnits);\n      boolean shouldShowExtraNanos =\n          overWaitUnits == 0 || overWaitLeftoverNanos > SPIN_THRESHOLD_NANOS;\n      if (overWaitUnits > 0) {\n        message += overWaitUnits + \" \" + unitString;\n        if (shouldShowExtraNanos) {\n          message += \",\";\n        }\n        message += \" \";\n      }\n      if (shouldShowExtraNanos) {\n        message += overWaitLeftoverNanos + \" nanoseconds \";\n      }\n\n      message += \"delay)\";\n    }\n    // It's confusing to see a completed future in a timeout message; if isDone() returns false,\n    // then we know it must have given a pending toString value earlier. If not, then the future\n    // completed after the timeout expired, and the message might be success.\n    if (isDone()) {\n      throw new TimeoutException(message + \" but future completed as timeout expired\");\n    }\n    throw new TimeoutException(message + \" for \" + futureToString);\n  }\n```"
            ],
            [
                690,
                "java",
                "Duration.minus",
                "```java\npublic Duration minus(long amount) {\n        return new Minus().apply(this, unit == null ? FOREVER : new Duration(amount, unit));\n    }\n```"
            ],
            [
                103,
                "java",
                "PropertyWrapper.removeAllCallbacks",
                "```java\n@Override\n    public void removeAllCallbacks() {\n        final Set<Runnable> callbacksToRemove = new HashSet<Runnable>(callbacks);\n        for (Runnable callback : callbacksToRemove) {\n            prop.removeCallback(callback);\n        }\n        callbacks.removeAll(callbacksToRemove);\n    }\n```"
            ],
            [
                607,
                "java",
                "NowAndTodayUtil.parseNow",
                "```java\nprivate static void parseNow(String value, String lowerValue, Calendar c) throws DateParseException {\n        if (lowerValue.length() > NOW_LENGTH) {\n            Matcher matcher = NOW_OFFSET_PATTERN.matcher(lowerValue);\n            if (!matcher.find()) {\n                throw new DateParseException(\"Improper value in 'NOW' value: \" + value\n                        + \". 'NOW' must be followed by + or -, then numeric offset, then units (h{our{s}}, \"\n                        + \"m{inute{s}}, d{ay{s}}, or y{ears}\");\n            }\n            if (matcher.groupCount() != 4) {\n                throw new DateParseException(\"Improper value in 'NOW' value: \" + value + \". Pattern match returned \"\n                        + matcher.groupCount() + \" instead of 4\");\n            }\n            char sign = matcher.group(2).charAt(0);\n            if (sign != '+' && sign != '-') {\n                throw new DateParseException(\"Improper sign in 'NOW' value '\" + lowerValue + \"'\");\n            }\n            String offsetStr = matcher.group(3);\n            int offset;\n            try {\n                offset = Integer.parseInt(offsetStr);\n            } catch (NumberFormatException e) {\n                throw new DateParseException(\"Improper offset in 'NOW' value '\" + value + \"'\");\n            }\n            if (sign == '-') {\n                offset = -offset;\n            }\n            int calendarField;\n            String units = matcher.group(4);\n            if (\"years\".startsWith(units)) {\n                calendarField = Calendar.YEAR;\n            } else if (\"days\".startsWith(units)) {\n                calendarField = Calendar.DATE;\n            } else if (\"hours\".startsWith(units)) {\n                calendarField = Calendar.HOUR;\n            } else if (\"minutes\".startsWith(units)) {\n                calendarField = Calendar.MINUTE;\n            } else {\n                throw new DateParseException(\"Improper units in 'NOW' value: '\" + units + \"', must be y{ear{s}}, \"\n                        + \"d{ay{s}}, h{our{s}}, or m{inute{s}}\");\n            }\n            c.add(calendarField, offset);\n        }\n    }\n```"
            ],
            [
                940,
                "java",
                "SVGGraphics2D.getSVGFontStyle",
                "```java\nprivate String getSVGFontStyle() {\n        StringBuilder b = new StringBuilder();\n        b.append(\"fill: \").append(svgColorStr()).append(\"; \");\n        b.append(\"fill-opacity: \").append(getColorAlpha() * getAlpha())\n                .append(\"; \");\n        String fontFamily = this.fontMapper.mapFont(this.font.getFamily());\n        b.append(\"font-family: \").append(fontFamily).append(\"; \");\n        b.append(\"font-size: \").append(this.font.getSize()).append(this.fontSizeUnits).append(\";\");\n        if (this.font.isBold()) {\n            b.append(\" font-weight: bold;\");\n        }\n        if (this.font.isItalic()) {\n            b.append(\" font-style: italic;\");\n        }\n        return b.toString();\n    }\n```"
            ],
            [
                414,
                "java",
                "LogglyClient.log",
                "```java\npublic boolean log(String message) {\n        if (message == null) return false;\n\n        boolean ok;\n        try {\n            ok = loggly.log(token, tags, message).isExecuted();\n        } catch (Exception e) {\n            e.printStackTrace();\n            ok = false;\n        }\n        return ok;\n    }\n```"
            ],
            [
                179,
                "java",
                "CheckUtilities.checkStringListArgument",
                "```java\npublic static void checkStringListArgument(List<String> str, String variableName) {\n    if (null == str) {\n      throw new NullPointerException(ExceptionMessageMap.getMessage(\"000002\")\n          + \"  { variableName=[\" + variableName + \"] }\");\n    }\n    if (str.size() == 0) {\n      throw new IllegalArgumentException(ExceptionMessageMap.getMessage(\"000002\")\n          + \"  { variableName=[\" + variableName + \"] }\");\n    }\n    for (int i = 0; i < str.size(); i++) {\n      checkStringArgument(str.get(i), variableName);\n    }\n  }\n```"
            ],
            [
                499,
                "java",
                "BorderWidth.isValid",
                "```java\npublic static boolean isValid(final String cssValue) {\n        final String trimmedCssValue = StringUtil.strip(cssValue).toLowerCase();\n        final String[] cssValueParts = StringUtil.splitBySpace(trimmedCssValue);\n        if (cssValueParts.length > 4) {\n            return false;\n        }\n        for (final String cssValuePart : cssValueParts) {\n            boolean invalidValue = true;\n            for (final CssLengthUnit cssLengthUnit : CssLengthUnit.values()) {\n                final String unit = cssLengthUnit.getUnit();\n                if (cssValuePart.endsWith(unit)) {\n                    final String valueOnly = cssValuePart.replaceFirst(unit,\n                            \"\");\n                    try {\n                        Float.parseFloat(valueOnly);\n                    } catch (final NumberFormatException e) {\n                        break;\n                    }\n                    invalidValue = false;\n                    break;\n                }\n            }\n            if (PREDEFINED_CONSTANTS.contains(cssValuePart)) {\n                invalidValue = false;\n            }\n            if (invalidValue) {\n                return false;\n            }\n        }\n        return true;\n    }\n```"
            ],
            [
                39,
                "java",
                "ZKClientImpl.getChildren",
                "```java\n@Override\n  public WatchableTask<List<String>> getChildren(String path) {\n    return new WatchableTask<List<String>>(\"zkGetChildren: \" + path) {\n      @Override\n      protected Promise run(Context context) throws Throwable {\n        SettablePromise<List<String>> promise = Promises.settable();\n        _zkClient.getChildren(path, _watcher, (int rc, String p, Object ctx, List<String> children) -> {\n          KeeperException.Code code = KeeperException.Code.get(rc);\n          switch (code) {\n            case OK:\n              promise.done(children);\n              break;\n            default:\n              promise.fail(KeeperException.create(code, p));\n          }\n        }, null);\n        return promise;\n      }\n    };\n  }\n```"
            ],
            [
                351,
                "java",
                "Trans.getConnectionAuto",
                "```java\npublic static Connection getConnectionAuto(DataSource ds) throws SQLException {\n        if (get() == null)\n            return ds.getConnection();\n        else\n            return get().getConnection(ds);\n    }\n```"
            ],
            [
                285,
                "java",
                "ShadowUsageStatsManager.getAppStandbyBucket",
                "```java\n@Implementation(minSdk = Build.VERSION_CODES.P)\n  @HiddenApi\n  public @StandbyBuckets int getAppStandbyBucket(String packageName) {\n    Integer bucket = appStandbyBuckets.get(packageName);\n    return (bucket == null) ? UsageStatsManager.STANDBY_BUCKET_ACTIVE : bucket;\n  }\n```"
            ],
            [
                169,
                "java",
                "BaseActions.push",
                "```java\npublic boolean push(final int down, final V value)\n    {\n        check();\n        context.getValueStack().push(down, value);\n        return true;\n    }\n```"
            ],
            [
                50,
                "java",
                "ConditionFactory.untilCall",
                "```java\npublic <T> T untilCall(T proxyMethodReturnValue, final Matcher<? super T> matcher) {\n        if (!existInCP(\"java.util.ServiceLoader\")) {\n            throw new UnsupportedOperationException(\"java.util.ServiceLoader not found in classpath so cannot create condition\");\n        }\n        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n        if (cl == null) {\n            cl = ClassLoader.getSystemClassLoader();\n        }\n        Iterator<ProxyConditionFactory> iterator = java.util.ServiceLoader.load(ProxyConditionFactory.class, cl).iterator();\n        if (!iterator.hasNext()) {\n            throw new UnsupportedOperationException(\"There's currently no plugin installed that can handle proxy conditions, please consider adding 'awaitility-proxy' to the classpath. If using Maven you can do:\" +\n                    \"<dependency>\\n\" +\n                    \"\\t<groupId>org.awaitility</groupId>\\n\" +\n                    \"\\t<artifactId>awaitility-proxy</artifactId>\\n\" +\n                    \"\\t<version>${awaitility.version}</version>\\n\" +\n                    \"</dependency>\\n\");\n        }\n        @SuppressWarnings(\"unchecked\") ProxyConditionFactory<T> factory = iterator.next();\n        if (factory == null) {\n            throw new IllegalArgumentException(\"Internal error: Proxy condition plugin initialization returned null, please report an issue.\");\n        }\n        return until(factory.createProxyCondition(proxyMethodReturnValue, matcher, generateConditionSettings()));\n    }\n```"
            ],
            [
                95,
                "java",
                "MentionsEditText.onTouchEvent",
                "```java\n@Override\n    public boolean onTouchEvent(@NonNull MotionEvent event) {\n        final MentionSpan touchedSpan = getTouchedSpan(event);\n\n        // Android 6 occasionally throws a NullPointerException inside Editor.onTouchEvent()\n        // for ACTION_UP when attempting to display (uninitialised) text handles.\n        boolean superResult;\n        if (android.os.Build.VERSION.SDK_INT == Build.VERSION_CODES.M &&\n            event.getActionMasked() == MotionEvent.ACTION_UP) {\n            try {\n                superResult = super.onTouchEvent(event);\n            } catch (NullPointerException ignored) {\n                // Ignore this (see above) - since we're now in an unknown state let's clear all\n                // selection (which is still better than an arbitrary crash that we can't control):\n                clearFocus();\n                superResult = true;\n            }\n        } else {\n            superResult = super.onTouchEvent(event);\n        }\n\n        if (event.getAction() == MotionEvent.ACTION_UP) {\n            // Don't call the onclick on mention if MotionEvent.ACTION_UP is for long click action,\n            if (!isLongPressed && touchedSpan != null) {\n                // Manually click span and show soft keyboard\n                touchedSpan.onClick(this);\n                Context context = getContext();\n                if (context != null) {\n                    InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);\n                    imm.showSoftInput(this, 0);\n                }\n                return true;\n            }\n        } else if (event.getAction() == MotionEvent.ACTION_DOWN) {\n            isLongPressed = false;\n            if (isLongClickable() && touchedSpan != null) {\n                if (longClickRunnable == null) {\n                    longClickRunnable = new CheckLongClickRunnable();\n                }\n                longClickRunnable.touchedSpan = touchedSpan;\n                removeCallbacks(longClickRunnable);\n                postDelayed(longClickRunnable, ViewConfiguration.getLongPressTimeout());\n            }\n        } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {\n            isLongPressed = false;\n        }\n\n        // Check if user clicked on the EditText while showing the suggestions list\n        // If so, avoid the current prefix\n        if (mAvoidPrefixOnTap\n                && mSuggestionsVisibilityManager != null\n                && mSuggestionsVisibilityManager.isDisplayingSuggestions()) {\n            mSuggestionsVisibilityManager.displaySuggestions(false);\n            String keywords = getCurrentKeywordsString();\n            String[] words = keywords.split(\" \");\n            if (words.length > 0) {\n                String prefix = words[words.length - 1];\n                // Note that prefix == \"\" when user types an explicit character and taps the EditText\n                // We must not allow the user to avoid suggestions for the empty string prefix\n                // Otherwise, explicit mentions would be broken, see MOB-38080\n                if (prefix.length() > 0) {\n                    setAvoidedPrefix(prefix);\n                }\n            }\n        }\n        return superResult;\n    }\n```"
            ],
            [
                48,
                "java",
                "Json.fromJson",
                "```java\npublic static Object fromJson(Type type, Reader reader)\r\n            throws JsonException {\r\n        return parse(type, reader);\r\n    }\n```"
            ],
            [
                717,
                "java",
                "DefaultBoundSessionOfHashSetOperations.set",
                "```java\npublic Long set(HK key, Collection<HV> values) {\n        return ops.multiSet(getKey(), getField(), key, values);\n    }\n```"
            ],
            [
                292,
                "java",
                "Node.back",
                "```java\nNode<E> back() {\n            Node<E> f = predecessor();\n            return (f == null || f.isSpecial()) ? null : f;\n        }\n```"
            ],
            [
                266,
                "java",
                "PVector2DGenerator.createNormal",
                "```java\npublic static <T> Generator<PVector2D<T>> createNormal()\n  {\n    return new PVector2DGenerator<>(PrimitiveGenerators.doubles(\n      GeneratorConstants.BOUND_NORMAL_DOUBLE_LOWER,\n      GeneratorConstants.BOUND_NORMAL_DOUBLE_UPPER\n    ));\n  }\n```"
            ],
            [
                483,
                "java",
                "IntMath.factorial",
                "```java\npublic static int factorial(int n) {\n    checkNonNegative(\"n\", n);\n    return (n < factorials.length) ? factorials[n] : Integer.MAX_VALUE;\n  }\n```"
            ],
            [
                26,
                "java",
                "RandomizedBackoff.nextBackoff",
                "```java\n@Override\n  public long nextBackoff(int attempts, Throwable error) {\n    return _policy.nextBackoff(attempts, error) + _minRange + Math.round((_maxRange - _minRange) * ThreadLocalRandom.current().nextDouble());\n  }\n```"
            ],
            [
                385,
                "java",
                "Striped.lazyWeakSemaphore",
                "```java\npublic static Striped<Semaphore> lazyWeakSemaphore(int stripes, final int permits) {\n    return lazy(\n        stripes,\n        new Supplier<Semaphore>() {\n          @Override\n          public Semaphore get() {\n            return new Semaphore(permits, false);\n          }\n        });\n  }\n```"
            ],
            [
                462,
                "java",
                "ItemGroupAssert.assertDoesNotHaveDuplicates",
                "```java\nprotected final void assertDoesNotHaveDuplicates() {\n    isNotNull();\n    Collection<?> duplicates = duplicatesFrom(actualAsList());\n    if (duplicates.isEmpty()) {\n      return;\n    }\n    failIfCustomMessageIsSet();\n    throw failure(format(\"<%s> contains duplicate(s):<%s>\", actual, duplicates));\n  }\n```"
            ],
            [
                1,
                "java",
                "Times.nextSecond",
                "```java\npublic static Date nextSecond(Date date, int second) {\r\n        Calendar cal = Calendar.getInstance();\r\n        if (date != null) {\r\n            cal.setTime(date);\r\n        }\r\n        cal.add(Calendar.SECOND, second);\r\n        return cal.getTime();\r\n    }\n```"
            ],
            [
                154,
                "java",
                "Xmls.eachChildren",
                "```java\npublic static void eachChildren(Element ele,\n                                    String regex,\n                                    final Each<Element> callback,\n                                    int off) {\n        if (null == ele || null == callback)\n            return;\n\n        // \u6b63\u5219\u5f0f\n        final Pattern p = null == regex ? null : Pattern.compile(regex);\n\n        NodeList nl = ele.getChildNodes();\n\n        // \u5faa\u73af\u5b50\n        final int len = nl.getLength();\n\n        // \u6bcf\u6b21\u5faa\u73af\u6267\u884c\n        Callback2<Integer, Node> eachInvoke = new Callback2<Integer, Node>() {\n            public void invoke(Integer index, Node nd) {\n                if (nd instanceof Element)\n                    try {\n                        Element tag = (Element) nd;\n                        if (null == p || p.matcher(tag.getTagName()).find())\n                            callback.invoke(index, tag, len);\n                    }\n                    catch (ExitLoop e) {\n                        throw Lang.wrapThrow(e);\n                    }\n                    catch (ContinueLoop e) {}\n                    catch (LoopException e) {\n                        throw Lang.wrapThrow(e);\n                    }\n            }\n        };\n\n        try {\n            // \u8d1f\u5411\u8fed\u4ee3\n            if (off < 0) {\n                for (int i = len + off; i >= 0; i--) {\n                    eachInvoke.invoke(i, nl.item(i));\n                }\n            }\n            // \u6b63\u5411\u8fed\u4ee3\n            else {\n                for (int i = off; i < len; i++) {\n                    eachInvoke.invoke(i, nl.item(i));\n                }\n            }\n        }\n        catch (ExitLoop e) {}\n        catch (RuntimeException e) {\n            if (e.getCause() instanceof ExitLoop)\n                return;\n            else\n                throw e;\n        }\n    }\n```"
            ],
            [
                56,
                "java",
                "JsonUnflattener.withSeparator",
                "```java\npublic JsonUnflattener withSeparator(char separator) {\n    isTrue(!Character.toString(separator).matches(\"[\\\"\\\\s]\"),\n        \"Separator contains illegal chracter(%s)\",\n        Character.toString(separator));\n    isTrue(!leftBracket.equals(separator) && !rightBracket.equals(separator),\n        \"Separator(%s) is already used in brackets\",\n        Character.toString(separator));\n\n    this.separator = separator;\n    return this;\n  }\n```"
            ],
            [
                612,
                "java",
                "PopupAppRegistrationHandler.handleRegistrationRequest",
                "```java\n@Override\n    public void handleRegistrationRequest(Context context, AppDescriptor descriptor, final Callback callback) {\n        final DialogView dialogView = new DialogView(context, descriptor);\n\n        Dialog dialog = new AlertDialog.Builder(context).setPositiveButton(R.string.app_permission_dialog_allow, new AlertDialog.OnClickListener() {\n\n            @Override\n            public void onClick(DialogInterface dialog, int which) {\n                callback.onRequestAccepted(dialogView.getSelectedPersona());\n            }\n        }).setNegativeButton(R.string.app_permission_dialog_deny, new AlertDialog.OnClickListener() {\n\n            @Override\n            public void onClick(DialogInterface dialog, int which) {\n                callback.onRequestRefused();\n            }\n        }).setView(dialogView.getView()).create();\n\n\n        /*\n         * Workaround to fix the crash:\n\t\t * android.view.WindowManager$BadTokenException: Unable to add window\n\t\t * android.view.ViewRootImpl$W@3d67307 -- permission denied for this window type\n\t\t * that appears only on Android 6.0 Marshmallow or greater.\n\t\t * Start a dialog fragment to explain the procedure to the user.\n\t\t * When the user accepts, onClickOnUnderstoodButton() will be called.\n\t\t */\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n            //if android MarshMallow or greater\n            if (Settings.canDrawOverlays(context)) {\n                dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);\n                dialog.show();\n            } else {\n                //to prevent a crash\n                Toast.makeText(context, \"You must activate SPF!\", Toast.LENGTH_SHORT).show();\n            }\n        } else {\n            //other older Android's versions\n            dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);\n            dialog.show();\n        }\n    }\n```"
            ],
            [
                819,
                "java",
                "Themes.getColor",
                "```java\npublic static int getColor(Context context, @AttrRes int attrId) {\n        int color = 0;\n        TypedArray a = context.obtainStyledAttributes(new int[]{attrId});\n        try {\n            color = a.getColor(0, 0);\n        } catch (UnsupportedOperationException e) {\n            error(\"color\", attrId, e);\n        }\n        a.recycle();\n        return color;\n    }\n```"
            ],
            [
                12,
                "java",
                "ReflectionHelper.getGetterPropertyName",
                "```java\npublic static String getGetterPropertyName(Member member) {\n        if (member instanceof Field) {\n            return member.getName();\n        } else if (member instanceof Method) {\n            String methodName = member.getName();\n            for (String prefix : PROPERTY_ACCESSOR_PREFIXES) {\n                if (methodName.startsWith(prefix)) {\n                    return decapitalizePropertyName(methodName.substring(prefix.length()));\n                }\n            }\n        }\n        return null;\n    }\n```"
            ],
            [
                373,
                "java",
                "MenuTree.setDefault",
                "```java\npublic void setDefault(final UUID _selectCmdUUID)\n    {\n        final UIMenuItem menuItem = getProvider().getRoots().next();\n        menuItem.setHeader(true);\n        boolean hasDefault = false;\n        for (final UIMenuItem childItem : menuItem.getChildren()) {\n            if (_selectCmdUUID == null && childItem.isDefaultSelected()\n                            || _selectCmdUUID != null && _selectCmdUUID.equals(childItem.getCommandUUID())) {\n                hasDefault = true;\n                childItem.setSelected(true);\n            }\n        }\n        if (!hasDefault) {\n            menuItem.setSelected(true);\n        }\n        expand(menuItem);\n        expandChildren(menuItem);\n    }\n```"
            ],
            [
                42,
                "java",
                "Mono.timeout",
                "```java\npublic final Mono<T> timeout(Duration timeout, Mono<? extends T> fallback) {\n\t\treturn timeout(timeout, fallback, Schedulers.parallel());\n\t}\n```"
            ],
            [
                898,
                "java",
                "Maps.transformEntry",
                "```java\nstatic <V2, K, V1> Entry<K, V2> transformEntry(\n      final EntryTransformer<? super K, ? super V1, V2> transformer, final Entry<K, V1> entry) {\n    checkNotNull(transformer);\n    checkNotNull(entry);\n    return new AbstractMapEntry<K, V2>() {\n      @Override\n      public K getKey() {\n        return entry.getKey();\n      }\n\n      @Override\n      public V2 getValue() {\n        return transformer.transformEntry(entry.getKey(), entry.getValue());\n      }\n    };\n  }\n```"
            ],
            [
                893,
                "java",
                "Record.get",
                "```java\npublic Object get(Object name) {\r\n        if (null == name)\r\n            return null;\r\n        return map.get(name.toString().toLowerCase());\r\n    }\n```"
            ],
            [
                112,
                "java",
                "VotesClass.getBillsBySponsorYear",
                "```java\npublic Bills getBillsBySponsorYear(String candidateId, String year) throws VoteSmartException, VoteSmartErrorException {\r\n\t\treturn api.query(\"Votes.getBillsBySponsorYear\", new ArgMap(\"candidateId\", candidateId, \"year\", year), Bills.class );\r\n\t}\n```"
            ],
            [
                30,
                "java",
                "Resources.asCharSource",
                "```java\npublic static CharSource asCharSource(URL url, Charset charset) {\n    return asByteSource(url).asCharSource(charset);\n  }\n```"
            ],
            [
                67,
                "java",
                "SchematronResourcePure.validateCompletely",
                "```java\npublic void validateCompletely (@Nonnull final IPSErrorHandler aErrorHandler)\n  {\n    ValueEnforcer.notNull (aErrorHandler, \"ErrorHandler\");\n\n    try\n    {\n      getOrCreateBoundSchema ().getOriginalSchema ().validateCompletely (aErrorHandler);\n    }\n    catch (final RuntimeException ex)\n    {\n      // May happen when XPath errors are contained\n    }\n  }\n```"
            ],
            [
                631,
                "java",
                "ShadowArscAssetManager9.nativeThemeCopy",
                "```java\n@Implementation(minSdk = Build.VERSION_CODES.Q)\n  protected static void nativeThemeCopy(long dst_asset_manager_ptr, long dst_theme_ptr,\n      long src_asset_manager_ptr, long src_theme_ptr) {\n    Theme dst_theme = Registries.NATIVE_THEME9_REGISTRY.getNativeObject(dst_theme_ptr);\n    Theme src_theme = Registries.NATIVE_THEME9_REGISTRY.getNativeObject(src_theme_ptr);\n\n    if (dst_asset_manager_ptr != src_asset_manager_ptr) {\n      CppAssetManager2 dst_assetmanager = AssetManagerFromLong(dst_asset_manager_ptr);\n      CHECK(dst_theme.GetAssetManager() == dst_assetmanager);\n\n      CppAssetManager2 src_assetmanager = AssetManagerFromLong(src_asset_manager_ptr);\n      CHECK(src_theme.GetAssetManager() == src_assetmanager);\n\n      dst_theme.SetTo(src_theme);\n    } else {\n      dst_theme.SetTo(src_theme);\n    }\n  }\n```"
            ],
            [
                160,
                "java",
                "BcelUtil.accessFlagsToString",
                "```java\nstatic String accessFlagsToString(Method m) {\n\n    int flags = m.getAccessFlags();\n\n    StringBuilder buf = new StringBuilder();\n    // Note that pow is a binary mask for the flag (= 2^i).\n    for (int i = 0, pow = 1; i <= Const.MAX_ACC_FLAG; i++) {\n      if ((flags & pow) != 0) {\n        if (buf.length() > 0) {\n          buf.append(\" \");\n        }\n        if (i < Const.ACCESS_NAMES_LENGTH) {\n          buf.append(Const.getAccessName(i));\n        } else {\n          buf.append(String.format(\"ACC_BIT(%x)\", pow));\n        }\n      }\n      pow <<= 1;\n    }\n\n    return buf.toString();\n  }\n```"
            ],
            [
                689,
                "java",
                "Collections2.filter",
                "```java\npublic static <E> Collection<E> filter(Collection<E> unfiltered, Predicate<? super E> predicate) {\n    if (unfiltered instanceof FilteredCollection) {\n      // Support clear(), removeAll(), and retainAll() when filtering a filtered\n      // collection.\n      return ((FilteredCollection<E>) unfiltered).createCombined(predicate);\n    }\n\n    return new FilteredCollection<E>(checkNotNull(unfiltered), checkNotNull(predicate));\n  }\n```"
            ],
            [
                57,
                "java",
                "Chronos.runBroadcast",
                "```java\n@NonNull\n    public static <Output> ChronosOperationResult<Output> runBroadcast(\n            @NonNull final ChronosOperation<Output> operation) {\n        return ChronosService.getInstance().runSync(operation, true);\n    }\n```"
            ],
            [
                106,
                "java",
                "XmlToXsdExtensions.xmlToXsd",
                "```java\npublic static void xmlToXsd(final File xmlInputFile, final File xsdOutFile,\n\t\tfinal Inst2XsdOptions inst2XsdOptions) throws XmlException, IOException\n\t{\n\t\txmlToXsd(xmlInputFile, xsdOutFile, inst2XsdOptions, new XmlOptions().setSavePrettyPrint());\n\t}\n```"
            ]
        ]
    },
    "Validation-java MRR (bs=1,000)": 0.012378643774214106,
    "Examples-Test-python": {
        "_type": "table",
        "columns": [
            "Rank",
            "Language",
            "Query",
            "Code"
        ],
        "data": [
            [
                713,
                "python",
                "unpack_4to8",
                "```python\ndef unpack_4to8(data):\n    \"\"\" Promote 2-bit unisgned data into 8-bit unsigned data.\n\n    Args:\n        data: Numpy array with dtype == uint8\n\n    Notes:\n        # The process is this:\n        # ABCDEFGH [Bits of one 4+4-bit value]\n        # 00000000ABCDEFGH [astype(uint16)]\n        # 0000ABCDEFGH0000 [<< 4]\n        # 0000ABCDXXXXEFGH [bitwise 'or' of previous two lines]\n        # 0000111100001111 [0x0F0F]\n        # 0000ABCD0000EFGH [bitwise 'and' of previous two lines]\n        # ABCD0000EFGH0000 [<< 4]\n        # which effectively pads the two 4-bit values with zeros on the right\n        # Note: This technique assumes LSB-first ordering\n    \"\"\"\n\n    tmpdata = data.astype(np.int16)  # np.empty(upshape, dtype=np.int16)\n    tmpdata = (tmpdata | (tmpdata << 4)) & 0x0F0F\n    # tmpdata = tmpdata << 4 # Shift into high bits to avoid needing to sign extend\n    updata = tmpdata.byteswap()\n    return updata.view(data.dtype)\n```"
            ],
            [
                5,
                "python",
                "parse_mim2gene",
                "```python\ndef parse_mim2gene(lines):\n    \"\"\"Parse the file called mim2gene\n    \n    This file describes what type(s) the different mim numbers have.\n    The different entry types are: 'gene', 'gene/phenotype', 'moved/removed',\n    'phenotype', 'predominantly phenotypes'\n    Where:\n        gene: Is a gene entry\n        gene/phenotype: This entry describes both a phenotype and a gene\n        moved/removed: No explanation needed\n        phenotype: Describes a phenotype\n        predominantly phenotype: Not clearly established (probably phenotype)\n    \n    Args:\n        lines(iterable(str)): The mim2gene lines\n    \n    Yields:\n        parsed_entry(dict)\n    \n        {\n            \"mim_number\": int, \n            \"entry_type\": str, \n            \"entrez_gene_id\": int, \n            \"hgnc_symbol\": str, \n            \"ensembl_gene_id\": str,\n            \"ensembl_transcript_id\": str,\n        }\n    \n    \"\"\"\n    LOG.info(\"Parsing mim2gene\")\n    header = [\"mim_number\", \"entry_type\", \"entrez_gene_id\", \"hgnc_symbol\", \"ensembl_gene_id\"]\n    for i, line in enumerate(lines):\n        if line.startswith('#'):\n            continue\n        \n        if not len(line) > 0:\n            continue\n\n        line = line.rstrip()\n        parsed_entry = parse_omim_line(line, header)\n        parsed_entry['mim_number'] = int(parsed_entry['mim_number'])\n        parsed_entry['raw'] = line\n        \n        if 'hgnc_symbol' in parsed_entry:\n            parsed_entry['hgnc_symbol'] = parsed_entry['hgnc_symbol']\n        \n        if parsed_entry.get('entrez_gene_id'):\n            parsed_entry['entrez_gene_id'] = int(parsed_entry['entrez_gene_id'])\n        \n        if parsed_entry.get('ensembl_gene_id'):\n            ensembl_info = parsed_entry['ensembl_gene_id'].split(',')\n            parsed_entry['ensembl_gene_id'] = ensembl_info[0].strip()\n            if len(ensembl_info) > 1:\n                parsed_entry['ensembl_transcript_id'] = ensembl_info[1].strip()\n        \n        yield parsed_entry\n```"
            ],
            [
                634,
                "python",
                "CreditNoteController.cancellation_fee",
                "```python\ndef cancellation_fee(self, percentage):\n        ''' Generates an invoice with a cancellation fee, and applies\n        credit to the invoice.\n\n        percentage (Decimal): The percentage of the credit note to turn into\n        a cancellation fee. Must be 0 <= percentage <= 100.\n        '''\n\n        # Local import to fix import cycles. Can we do better?\n        from .invoice import InvoiceController\n\n        assert(percentage >= 0 and percentage <= 100)\n\n        cancellation_fee = self.credit_note.value * percentage / 100\n        due = datetime.timedelta(days=1)\n        item = [(\"Cancellation fee\", cancellation_fee)]\n        invoice = InvoiceController.manual_invoice(\n            self.credit_note.invoice.user, due, item\n        )\n\n        if not invoice.is_paid:\n            self.apply_to_invoice(invoice)\n\n        return InvoiceController(invoice)\n```"
            ],
            [
                932,
                "python",
                "update_panel",
                "```python\ndef update_panel(store, panel_name, csv_lines, option):\n    \"\"\"Update an existing gene panel with genes.\n\n    Args:\n        store(scout.adapter.MongoAdapter)\n        panel_name(str)\n        csv_lines(iterable(str)): Stream with genes\n        option(str): 'add' or 'replace'\n\n    Returns:\n        panel_obj(dict)\n    \"\"\"\n    new_genes= []\n    panel_obj = store.gene_panel(panel_name)\n    if panel_obj is None:\n        return None\n    try:\n        new_genes = parse_genes(csv_lines) # a list of gene dictionaries containing gene info\n    except SyntaxError as error:\n        flash(error.args[0], 'danger')\n        return None\n\n    # if existing genes are to be replaced by those in csv_lines\n    if option == 'replace':\n        # all existing genes should be deleted\n        for gene in panel_obj['genes']:\n            #create extra key to use in pending actions:\n            gene['hgnc_symbol'] = gene['symbol']\n            store.add_pending(panel_obj, gene, action='delete', info=None)\n\n    for new_gene in new_genes:\n        if not new_gene['hgnc_id']:\n            flash(\"gene missing hgnc id: {}\".format(new_gene['hgnc_symbol']),'danger')\n            continue\n        gene_obj = store.hgnc_gene(new_gene['hgnc_id'])\n        if gene_obj is None:\n            flash(\"gene not found: {} - {}\".format(new_gene['hgnc_id'], new_gene['hgnc_symbol']),'danger')\n            continue\n        if new_gene['hgnc_symbol'] and gene_obj['hgnc_symbol'] != new_gene['hgnc_symbol']:\n            flash(\"symbol mis-match: {0} | {1}\".format(\n                gene_obj['hgnc_symbol'], new_gene['hgnc_symbol']), 'warning')\n\n        info_data = {\n            'disease_associated_transcripts': new_gene['transcripts'],\n            'reduced_penetrance': new_gene['reduced_penetrance'],\n            'mosaicism': new_gene['mosaicism'],\n            'inheritance_models': new_gene['inheritance_models'],\n            'database_entry_version': new_gene['database_entry_version'],\n        }\n        if option == 'replace': # there will be no existing genes for sure, because we're replacing them all\n            action = 'add'\n        else: # add option. Add if genes is not existing. otherwise edit it\n            existing_genes = {gene['hgnc_id'] for gene in panel_obj['genes']}\n            action = 'edit' if gene_obj['hgnc_id'] in existing_genes else 'add'\n        store.add_pending(panel_obj, gene_obj, action=action, info=info_data)\n\n    return panel_obj\n```"
            ],
            [
                74,
                "python",
                "MinHashLSHForest.index",
                "```python\ndef index(self):\n        '''\n        Index all the keys added so far and make them searchable.\n        '''\n        for i, hashtable in enumerate(self.hashtables):\n            self.sorted_hashtables[i] = [H for H in hashtable.keys()]\n            self.sorted_hashtables[i].sort()\n```"
            ],
            [
                263,
                "python",
                "Eaf.generate_ts_id",
                "```python\ndef generate_ts_id(self, time=None):\n        \"\"\"Generate the next timeslot id, this function is mainly used\n        internally\n\n        :param int time: Initial time to assign to the timeslot.\n        :raises ValueError: If the time is negative.\n        \"\"\"\n        if time and time < 0:\n            raise ValueError('Time is negative...')\n        if not self.maxts:\n            valid_ts = [int(''.join(filter(str.isdigit, a)))\n                        for a in self.timeslots]\n            self.maxts = max(valid_ts + [1])+1\n        else:\n            self.maxts += 1\n        ts = 'ts{:d}'.format(self.maxts)\n        self.timeslots[ts] = time\n        return ts\n```"
            ],
            [
                968,
                "python",
                "BandwidthLimitedStream.read",
                "```python\ndef read(self, amount):\n        \"\"\"Read a specified amount\n\n        Reads will only be throttled if bandwidth limiting is enabled.\n        \"\"\"\n        if not self._bandwidth_limiting_enabled:\n            return self._fileobj.read(amount)\n\n        # We do not want to be calling consume on every read as the read\n        # amounts can be small causing the lock of the leaky bucket to\n        # introduce noticeable overhead. So instead we keep track of\n        # how many bytes we have seen and only call consume once we pass a\n        # certain threshold.\n        self._bytes_seen += amount\n        if self._bytes_seen < self._bytes_threshold:\n            return self._fileobj.read(amount)\n\n        self._consume_through_leaky_bucket()\n        return self._fileobj.read(amount)\n```"
            ],
            [
                136,
                "python",
                "Meter.extractMonthTariff",
                "```python\ndef extractMonthTariff(self, month):\n        \"\"\" Extract the tariff for a single month from the meter object buffer.\n\n        Args:\n            month (int):  A :class:`~ekmmeters.Months` value or range(Extents.Months).\n\n        Returns:\n            tuple: The eight tariff period totals for month. The return tuple breaks out as follows:\n\n            ================= ======================================\n            kWh_Tariff_1      kWh for tariff period 1 over month.\n            kWh_Tariff_2      kWh for tariff period 2 over month\n            kWh_Tariff_3      kWh for tariff period 3 over month\n            kWh_Tariff_4      kWh for tariff period 4 over month\n            kWh_Tot           Total kWh over requested month\n            Rev_kWh_Tariff_1  Rev kWh for tariff period 1 over month\n            Rev_kWh_Tariff_3  Rev kWh for tariff period 2 over month\n            Rev_kWh_Tariff_3  Rev kWh for tariff period 3 over month\n            Rev_kWh_Tariff_4  Rev kWh for tariff period 4 over month\n            Rev_kWh_Tot       Total Rev kWh over requested month\n            ================= ======================================\n\n        \"\"\"\n        ret = namedtuple(\"ret\", [\"Month\", Field.kWh_Tariff_1, Field.kWh_Tariff_2, Field.kWh_Tariff_3,\n                         Field.kWh_Tariff_4, Field.kWh_Tot, Field.Rev_kWh_Tariff_1,\n                         Field.Rev_kWh_Tariff_2, Field.Rev_kWh_Tariff_3,\n                         Field.Rev_kWh_Tariff_4, Field.Rev_kWh_Tot])\n        month += 1\n        ret.Month = str(month)\n        if (month < 1) or (month > Extents.Months):\n            ret.kWh_Tariff_1 = ret.kWh_Tariff_2 = ret.kWh_Tariff_3 = ret.kWh_Tariff_4 = str(0)\n            ret.Rev_kWh_Tariff_1 = ret.Rev_kWh_Tariff_2 = ret.Rev_kWh_Tariff_3 = ret.Rev_kWh_Tariff_4 = str(0)\n            ret.kWh_Tot = ret.Rev_kWh_Tot = str(0)\n            ekm_log(\"Out of range(Extents.Months) month = \" + str(month))\n            return ret\n\n        base_str = \"Month_\" + str(month) + \"_\"\n        ret.kWh_Tariff_1 = self.m_mons[base_str + \"Tariff_1\"][MeterData.StringValue]\n        ret.kWh_Tariff_2 = self.m_mons[base_str + \"Tariff_2\"][MeterData.StringValue]\n        ret.kWh_Tariff_3 = self.m_mons[base_str + \"Tariff_3\"][MeterData.StringValue]\n        ret.kWh_Tariff_4 = self.m_mons[base_str + \"Tariff_4\"][MeterData.StringValue]\n        ret.kWh_Tot = self.m_mons[base_str + \"Tot\"][MeterData.StringValue]\n        ret.Rev_kWh_Tariff_1 = self.m_rev_mons[base_str + \"Tariff_1\"][MeterData.StringValue]\n        ret.Rev_kWh_Tariff_2 = self.m_rev_mons[base_str + \"Tariff_2\"][MeterData.StringValue]\n        ret.Rev_kWh_Tariff_3 = self.m_rev_mons[base_str + \"Tariff_3\"][MeterData.StringValue]\n        ret.Rev_kWh_Tariff_4 = self.m_rev_mons[base_str + \"Tariff_4\"][MeterData.StringValue]\n        ret.Rev_kWh_Tot = self.m_rev_mons[base_str + \"Tot\"][MeterData.StringValue]\n        return ret\n```"
            ],
            [
                1,
                "python",
                "BigQueryCursor.executemany",
                "```python\ndef executemany(self, operation, seq_of_parameters):\n        \"\"\"\n        Execute a BigQuery query multiple times with different parameters.\n\n        :param operation: The query to execute.\n        :type operation: str\n        :param seq_of_parameters: List of dictionary parameters to substitute into the\n            query.\n        :type seq_of_parameters: list\n        \"\"\"\n        for parameters in seq_of_parameters:\n            self.execute(operation, parameters)\n```"
            ],
            [
                617,
                "python",
                "TypeSystem.convert_from_binary",
                "```python\ndef convert_from_binary(self, binvalue, type, **kwargs):\n        \"\"\"\n        Convert binary data to type 'type'.\n\n        'type' must have a convert_binary function.  If 'type'\n        supports size checking, the size function is called to ensure\n        that binvalue is the correct size for deserialization\n        \"\"\"\n\n        size = self.get_type_size(type)\n        if size > 0 and len(binvalue) != size:\n            raise ArgumentError(\"Could not convert type from binary since the data was not the correct size\", required_size=size, actual_size=len(binvalue), type=type)\n\n        typeobj = self.get_type(type)\n\n        if not hasattr(typeobj, 'convert_binary'):\n            raise ArgumentError(\"Type does not support conversion from binary\", type=type)\n\n        return typeobj.convert_binary(binvalue, **kwargs)\n```"
            ],
            [
                177,
                "python",
                "read_data",
                "```python\ndef read_data(data_file, dataformat, name_mode):\n    \"\"\"\n    Load data_file described by a dataformat dict.\n\n    Parameters\n    ----------\n    data_file : str\n        Path to data file, including extension.\n    dataformat : dict\n        A dataformat dict, see example below.\n    name_mode : str\n        How to identyfy sample names. If 'file_names' uses the\n        input name of the file, stripped of the extension. If\n        'metadata_names' uses the 'name' attribute of the 'meta'\n        sub-dictionary in dataformat. If any other str, uses this\n        str as the sample name.\n\n    Example\n    -------\n    >>>\n    {'genfromtext_args': {'delimiter': ',',\n                          'skip_header': 4},  # passed directly to np.genfromtxt\n     'column_id': {'name_row': 3,  # which row contains the column names\n                   'delimiter': ',',  # delimeter between column names\n                   'timecolumn': 0,  # which column contains the 'time' variable\n                   'pattern': '([A-z]{1,2}[0-9]{1,3})'},  # a regex pattern which captures the column names\n     'meta_regex': {  # a dict of (line_no: ([descriptors], [regexs])) pairs\n                    0: (['path'], '(.*)'),\n                    2: (['date', 'method'],  # MUST include date\n                     '([A-Z][a-z]+ [0-9]+ [0-9]{4}[ ]+[0-9:]+ [amp]+).* ([A-z0-9]+\\.m)')\n                   }\n    }\n\n    Returns\n    -------\n    sample, analytes, data, meta : tuple\n    \"\"\"\n    with open(data_file) as f:\n        lines = f.readlines()\n\n    if 'meta_regex' in dataformat.keys():\n        meta = Bunch()\n        for k, v in dataformat['meta_regex'].items():\n            try:\n                out = re.search(v[-1], lines[int(k)]).groups()\n            except:\n                raise ValueError('Failed reading metadata when applying:\\n  regex: {}\\nto\\n  line: {}'.format(v[-1], lines[int(k)]))\n            for i in np.arange(len(v[0])):\n                meta[v[0][i]] = out[i]\n    else:\n        meta = {}\n\n    # sample name\n    if name_mode == 'file_names':\n        sample = os.path.basename(data_file).split('.')[0]\n    elif name_mode == 'metadata_names':\n        sample = meta['name']\n    else:\n        sample = name_mode\n\n    # column and analyte names\n    columns = np.array(lines[dataformat['column_id']['name_row']].strip().split(\n        dataformat['column_id']['delimiter']))\n    if 'pattern' in dataformat['column_id'].keys():\n        pr = re.compile(dataformat['column_id']['pattern'])\n        analytes = [pr.match(c).groups()[0] for c in columns if pr.match(c)]\n\n    # do any required pre-formatting\n    if 'preformat_replace' in dataformat.keys():\n        with open(data_file) as f:\n            fbuffer = f.read()\n        for k, v in dataformat['preformat_replace'].items():\n            fbuffer = re.sub(k, v, fbuffer)\n        # dead data\n        read_data = np.genfromtxt(BytesIO(fbuffer.encode()),\n                                  **dataformat['genfromtext_args']).T\n    else:\n        # read data\n        read_data = np.genfromtxt(data_file,\n                                  **dataformat['genfromtext_args']).T\n\n    # data dict\n    dind = np.zeros(read_data.shape[0], dtype=bool)\n    for a in analytes:\n        dind[columns == a] = True\n\n    data = Bunch()\n    data['Time'] = read_data[dataformat['column_id']['timecolumn']]\n\n    # deal with time units\n    if 'time_unit' in dataformat['column_id']:\n        if isinstance(dataformat['column_id']['time_unit'], (float, int)):\n            time_mult = dataformat['column_id']['time_unit']\n        elif isinstance(dataformat['column_id']['time_unit'], str):\n            unit_multipliers = {'ms': 1/1000,\n                                'min': 60/1,\n                                's': 1}\n            try:\n                time_mult = unit_multipliers[dataformat['column_id']['time_unit']]\n            except:\n                raise ValueError(\"In dataformat: time_unit must be a number, 'ms', 'min' or 's'\")\n        data['Time'] *= time_mult\n        \n    # convert raw data into counts\n    # TODO: Is this correct? Should actually be per-analyte dwell?\n    # if 'unit' in dataformat:\n    #     if dataformat['unit'] == 'cps':\n    #         tstep = data['Time'][1] - data['Time'][0]\n    #         read_data[dind] *= tstep\n    #     else:\n    #         pass\n    data['rawdata'] = Bunch(zip(analytes, read_data[dind]))\n    data['total_counts'] = np.nansum(read_data[dind], 0)\n\n    return sample, analytes, data, meta\n```"
            ],
            [
                625,
                "python",
                "DrawElement.top",
                "```python\ndef top(self):\n        \"\"\" Constructs the top line of the element\"\"\"\n        ret = self.top_format % self.top_connect.center(\n            self.width, self.top_pad)\n        if self.right_fill:\n            ret = ret.ljust(self.right_fill, self.top_pad)\n        if self.left_fill:\n            ret = ret.rjust(self.left_fill, self.top_pad)\n        ret = ret.center(self.layer_width, self.top_bck)\n        return ret\n```"
            ],
            [
                232,
                "python",
                "GoogleCloudBucketHelper.google_cloud_to_local",
                "```python\ndef google_cloud_to_local(self, file_name):\n        \"\"\"\n        Checks whether the file specified by file_name is stored in Google Cloud\n        Storage (GCS), if so, downloads the file and saves it locally. The full\n        path of the saved file will be returned. Otherwise the local file_name\n        will be returned immediately.\n\n        :param file_name: The full path of input file.\n        :type file_name: str\n        :return: The full path of local file.\n        :rtype: str\n        \"\"\"\n        if not file_name.startswith('gs://'):\n            return file_name\n\n        # Extracts bucket_id and object_id by first removing 'gs://' prefix and\n        # then split the remaining by path delimiter '/'.\n        path_components = file_name[self.GCS_PREFIX_LENGTH:].split('/')\n        if len(path_components) < 2:\n            raise Exception(\n                'Invalid Google Cloud Storage (GCS) object path: {}'\n                .format(file_name))\n\n        bucket_id = path_components[0]\n        object_id = '/'.join(path_components[1:])\n        local_file = '/tmp/dataflow{}-{}'.format(str(uuid.uuid4())[:8],\n                                                 path_components[-1])\n        self._gcs_hook.download(bucket_id, object_id, local_file)\n\n        if os.stat(local_file).st_size > 0:\n            return local_file\n        raise Exception(\n            'Failed to download Google Cloud Storage (GCS) object: {}'\n            .format(file_name))\n```"
            ],
            [
                583,
                "python",
                "get_single_list_nodes_data",
                "```python\ndef get_single_list_nodes_data(li, meta_data):\n    \"\"\"\n    Find consecutive li tags that have content that have the same list id.\n    \"\"\"\n    yield li\n    w_namespace = get_namespace(li, 'w')\n    current_numId = get_numId(li, w_namespace)\n    starting_ilvl = get_ilvl(li, w_namespace)\n    el = li\n    while True:\n        el = el.getnext()\n        if el is None:\n            break\n        # If the tag has no content ignore it.\n        if not has_text(el):\n            continue\n\n        # Stop the lists if you come across a list item that should be a\n        # heading.\n        if _is_top_level_upper_roman(el, meta_data):\n            break\n\n        if (\n                is_li(el, meta_data) and\n                (starting_ilvl > get_ilvl(el, w_namespace))):\n            break\n\n        new_numId = get_numId(el, w_namespace)\n        if new_numId is None or new_numId == -1:\n            # Not a p tag or a list item\n            yield el\n            continue\n        # If the list id of the next tag is different that the previous that\n        # means a new list being made (not nested)\n        if current_numId != new_numId:\n            # Not a subsequent list.\n            break\n        if is_last_li(el, meta_data, current_numId):\n            yield el\n            break\n        yield el\n```"
            ],
            [
                13,
                "python",
                "Node.select",
                "```python\ndef select(self, selector):\n        \"\"\"\n        Like :meth:`find_all`, but takes a CSS selector string as input.\n        \"\"\"\n        op = operator.methodcaller('select', selector)\n        return self._wrap_multi(op)\n```"
            ],
            [
                980,
                "python",
                "SqlDatabaseManagementService.list_quotas",
                "```python\ndef list_quotas(self, server_name):\n        '''\n        Gets quotas for an Azure SQL Database Server.\n\n        server_name:\n            Name of the server.\n        '''\n        _validate_not_none('server_name', server_name)\n        response = self._perform_get(self._get_quotas_path(server_name),\n                                     None)\n        return _MinidomXmlToObject.parse_service_resources_response(\n            response, ServerQuota)\n```"
            ],
            [
                527,
                "python",
                "SolveBioAuth.logout",
                "```python\ndef logout(self):\n        \"\"\"Revoke the token and remove the cookie.\"\"\"\n        if self._oauth_client_secret:\n            try:\n                oauth_token = flask.request.cookies[self.TOKEN_COOKIE_NAME]\n                # Revoke the token\n                requests.post(\n                    urljoin(self._api_host, self.OAUTH2_REVOKE_TOKEN_PATH),\n                    data={\n                        'client_id': self._oauth_client_id,\n                        'client_secret': self._oauth_client_secret,\n                        'token': oauth_token\n                    })\n            except:\n                pass\n\n        response = flask.redirect('/')\n        self.clear_cookies(response)\n        return response\n```"
            ],
            [
                243,
                "python",
                "Context.integrity_negotiated",
                "```python\ndef integrity_negotiated(self):\n        \"\"\"\n        After :meth:`step` has been called, this property will be set to\n        True if integrity protection (signing) has been negotiated in this context, False\n        otherwise. If this property is True, you can use :meth:`get_mic` to sign messages with a\n        message integrity code (MIC), which the peer application can verify.\n        \"\"\"\n        return (\n            self.flags & C.GSS_C_INTEG_FLAG\n        ) and (\n            self.established or (self.flags & C.GSS_C_PROT_READY_FLAG)\n        )\n```"
            ],
            [
                703,
                "python",
                "QasmSimulatorPy._get_statevector",
                "```python\ndef _get_statevector(self):\n        \"\"\"Return the current statevector in JSON Result spec format\"\"\"\n        vec = np.reshape(self._statevector, 2 ** self._number_of_qubits)\n        # Expand complex numbers\n        vec = np.stack([vec.real, vec.imag], axis=1)\n        # Truncate small values\n        vec[abs(vec) < self._chop_threshold] = 0.0\n        return vec\n```"
            ],
            [
                673,
                "python",
                "OpenIdMixin.authenticate_redirect",
                "```python\ndef authenticate_redirect(\n        self, callback_uri=None, ax_attrs=[\"name\", \"email\", \"language\",\n                                           \"username\"]):\n\n        \"\"\"Returns the authentication URL for this service.\n\n        After authentication, the service will redirect back to the given\n        callback URI.\n\n        We request the given attributes for the authenticated user by\n        default (name, email, language, and username). If you don't need\n        all those attributes for your app, you can request fewer with\n        the ax_attrs keyword argument.\n        \"\"\"\n        callback_uri = callback_uri or self.request.uri\n        args = self._openid_args(callback_uri, ax_attrs=ax_attrs)\n        self.redirect(self._OPENID_ENDPOINT + \"?\" + urllib.urlencode(args))\n```"
            ],
            [
                33,
                "python",
                "NotebookManager.save_new_notebook",
                "```python\ndef save_new_notebook(self, data, name=None, format=u'json'):\n        \"\"\"Save a new notebook and return its notebook_id.\n\n        If a name is passed in, it overrides any values in the notebook data\n        and the value in the data is updated to use that value.\n        \"\"\"\n        if format not in self.allowed_formats:\n            raise web.HTTPError(415, u'Invalid notebook format: %s' % format)\n\n        try:\n            nb = current.reads(data.decode('utf-8'), format)\n        except:\n            raise web.HTTPError(400, u'Invalid JSON data')\n\n        if name is None:\n            try:\n                name = nb.metadata.name\n            except AttributeError:\n                raise web.HTTPError(400, u'Missing notebook name')\n        nb.metadata.name = name\n\n        notebook_id = self.new_notebook_id(name)\n        self.save_notebook_object(notebook_id, nb)\n        return notebook_id\n```"
            ],
            [
                567,
                "python",
                "PassManager.passes",
                "```python\ndef passes(self):\n        \"\"\"\n        Returns a list structure of the appended passes and its options.\n\n        Returns (list): The appended passes.\n        \"\"\"\n        ret = []\n        for pass_ in self.working_list:\n            ret.append(pass_.dump_passes())\n        return ret\n```"
            ],
            [
                2,
                "python",
                "DatabaseConnection.read",
                "```python\ndef read(self, path, params=None):\n        \"\"\"Read the result at the given path (GET) from the CRUD API, using the optional params dictionary\n        as url parameters.\"\"\"\n        return self.handleresult(self.r.get(urljoin(self.url + CRUD_PATH,\n                                                    path),\n                                            params=params))\n```"
            ],
            [
                7,
                "python",
                "Session.evaluate_script",
                "```python\ndef evaluate_script(self, script, *args):\n        \"\"\"\n        Evaluate the given JavaScript and return the result. Be careful when using this with\n        scripts that return complex objects, such as jQuery statements. :meth:`execute_script`\n        might be a better alternative.\n\n        Args:\n            script (str): A string of JavaScript to evaluate.\n            *args: Variable length argument list to pass to the executed JavaScript string.\n\n        Returns:\n            object: The result of the evaluated JavaScript (may be driver specific).\n        \"\"\"\n\n        args = [arg.base if isinstance(arg, Base) else arg for arg in args]\n        result = self.driver.evaluate_script(script, *args)\n        return self._wrap_element_script_result(result)\n```"
            ],
            [
                840,
                "python",
                "get_all_boundary_algorithms",
                "```python\ndef get_all_boundary_algorithms():\n    \"\"\"Gets all the possible boundary algorithms in MSAF.\n\n    Returns\n    -------\n    algo_ids : list\n        List of all the IDs of boundary algorithms (strings).\n    \"\"\"\n    algo_ids = []\n    for name in msaf.algorithms.__all__:\n        module = eval(msaf.algorithms.__name__ + \".\" + name)\n        if module.is_boundary_type:\n            algo_ids.append(module.algo_id)\n    return algo_ids\n```"
            ],
            [
                931,
                "python",
                "Expression.op_and",
                "```python\ndef op_and(self, *elements):\n        \"\"\"Update the ``Expression`` by joining the specified additional\n        ``elements`` using an \"AND\" ``Operator``\n\n        Args:\n            *elements (BaseExpression): The ``Expression`` and/or\n                ``Constraint`` elements which the \"AND\" ``Operator`` applies\n                to.\n\n        Returns:\n            Expression: ``self`` or related ``Expression``.\n        \"\"\"\n        expression = self.add_operator(Operator(';'))\n        for element in elements:\n            expression.add_element(element)\n        return expression\n```"
            ],
            [
                540,
                "python",
                "LinkyClient._get_data",
                "```python\ndef _get_data(self, p_p_resource_id, start_date=None, end_date=None):\n        \"\"\"Get data.\"\"\"\n\n        data = {\n            '_' + REQ_PART + '_dateDebut': start_date,\n            '_' + REQ_PART + '_dateFin': end_date\n        }\n\n        params = {\n            'p_p_id': REQ_PART,\n            'p_p_lifecycle': 2,\n            'p_p_state': 'normal',\n            'p_p_mode': 'view',\n            'p_p_resource_id': p_p_resource_id,\n            'p_p_cacheability': 'cacheLevelPage',\n            'p_p_col_id': 'column-1',\n            'p_p_col_pos': 1,\n            'p_p_col_count': 3\n        }\n\n        try:\n            raw_res = self._session.post(DATA_URL,\n                                         data=data,\n                                         params=params,\n                                         allow_redirects=False,\n                                         timeout=self._timeout)\n\n            if 300 <= raw_res.status_code < 400:\n                raw_res = self._session.post(DATA_URL,\n                                             data=data,\n                                             params=params,\n                                             allow_redirects=False,\n                                             timeout=self._timeout)\n        except OSError as e:\n            raise PyLinkyError(\"Could not access enedis.fr: \" + str(e))\n\n        if raw_res.text is \"\":\n            raise PyLinkyError(\"No data\")\n\n        if 302 == raw_res.status_code and \"/messages/maintenance.html\" in raw_res.text:\n            raise PyLinkyError(\"Site in maintenance\")\n\n        try:\n            json_output = raw_res.json()\n        except (OSError, json.decoder.JSONDecodeError, simplejson.errors.JSONDecodeError) as e:\n            raise PyLinkyError(\"Impossible to decode response: \" + str(e) + \"\\nResponse was: \" + str(raw_res.text))\n\n        if json_output.get('etat').get('valeur') == 'erreur':\n            raise PyLinkyError(\"Enedis.fr answered with an error: \" + str(json_output))\n\n        return json_output.get('graphe')\n```"
            ],
            [
                468,
                "python",
                "clinvar",
                "```python\ndef clinvar(institute_id, case_name, variant_id):\n    \"\"\"Build a clinVar submission form for a variant.\"\"\"\n    data = controllers.clinvar_export(store, institute_id, case_name, variant_id)\n    if request.method == 'GET':\n        return data\n    else: #POST\n        form_dict = request.form.to_dict()\n        submission_objects = set_submission_objects(form_dict) # A tuple of submission objects (variants and casedata objects)\n\n        # Add submission data to an open clinvar submission object,\n        # or create a new if no open submission is found in database\n        open_submission = store.get_open_clinvar_submission(current_user.email, institute_id)\n        updated_submission = store.add_to_submission(open_submission['_id'], submission_objects)\n\n        # Redirect to clinvar submissions handling page, and pass it the updated_submission_object\n        return redirect(url_for('cases.clinvar_submissions', institute_id=institute_id))\n```"
            ],
            [
                199,
                "python",
                "MozillaClubParser.__get_event_fields",
                "```python\ndef __get_event_fields(self):\n        \"\"\"Get the events fields (columns) from the cells received.\"\"\"\n\n        event_fields = {}\n        # The cells in the first row are the column names\n        # Check that the columns names are the same we have as template\n        # Create the event template from the data retrieved\n        while self.ncell < len(self.cells):\n            cell = self.cells[self.ncell]\n            row = cell['gs$cell']['row']\n            if int(row) > 1:\n                # When the row number >1 the column row is finished\n                break\n            ncol = int(cell['gs$cell']['col'])\n            name = cell['content']['$t']\n            event_fields[ncol] = name\n            if ncol in EVENT_TEMPLATE:\n                if event_fields[ncol] != EVENT_TEMPLATE[ncol]:\n                    logger.warning(\"Event template changed in spreadsheet %s vs %s\",\n                                   name, EVENT_TEMPLATE[ncol])\n            else:\n                logger.warning(\"Event template changed in spreadsheet. New column: %s\", name)\n\n            self.ncell += 1\n        return event_fields\n```"
            ],
            [
                65,
                "python",
                "center_eigenvalue_diff",
                "```python\ndef center_eigenvalue_diff(mat):\n    \"\"\"Compute the eigvals of mat and then find the center eigval difference.\"\"\"\n    N = len(mat)\n    evals = np.sort(la.eigvals(mat))\n    diff = np.abs(evals[N/2] - evals[N/2-1])\n    return diff\n```"
            ],
            [
                6,
                "python",
                "MongoHook.delete_one",
                "```python\ndef delete_one(self, mongo_collection, filter_doc, mongo_db=None, **kwargs):\n        \"\"\"\n        Deletes a single document in a mongo collection.\n        https://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.delete_one\n\n        :param mongo_collection: The name of the collection to delete from.\n        :type mongo_collection: str\n        :param filter_doc: A query that matches the document to delete.\n        :type filter_doc: dict\n        :param mongo_db: The name of the database to use.\n            Can be omitted; then the database from the connection string is used.\n        :type mongo_db: str\n\n        \"\"\"\n        collection = self.get_collection(mongo_collection, mongo_db=mongo_db)\n\n        return collection.delete_one(filter_doc, **kwargs)\n```"
            ],
            [
                541,
                "python",
                "Mesh.set_fields",
                "```python\ndef set_fields(self, fields = None, **kwargs):\n    \"\"\"\n    Sets the fields.\n    \"\"\"\n    self.fields = []\n    if fields != None:\n      for field in fields: \n        self.fields.append(field)\n```"
            ],
            [
                238,
                "python",
                "ResourceManager.addFromTex",
                "```python\ndef addFromTex(self,name,img,category):\n        \"\"\"\n        Adds a new texture from the given image.\n        \n        ``img`` may be any object that supports Pyglet-style copying in form of the ``blit_to_texture()`` method.\n        \n        This can be used to add textures that come from non-file sources, e.g. Render-to-texture.\n        \"\"\"\n        texreg = self.categoriesTexBin[category].add(img)\n        #texreg = texreg.get_transform(True,True) # Mirrors the image due to how pyglets coordinate system works\n        # Strange behaviour, sometimes needed and sometimes not\n        \n        self.categories[category][name]=texreg\n        target = texreg.target\n        texid = texreg.id\n        texcoords = texreg.tex_coords\n        \n        # Prevents texture bleeding with texture sizes that are powers of 2, else weird lines may appear at certain angles.\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT)\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT)\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST)\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST_MIPMAP_LINEAR)\n        glGenerateMipmap(GL_TEXTURE_2D)\n        \n        out = target,texid,texcoords\n        self.categoriesTexCache[category][name]=out\n        return out\n```"
            ],
            [
                31,
                "python",
                "InstallRequirement.populate_link",
                "```python\ndef populate_link(self, finder, upgrade):\n        \"\"\"Ensure that if a link can be found for this, that it is found.\n\n        Note that self.link may still be None - if Upgrade is False and the\n        requirement is already installed.\n        \"\"\"\n        if self.link is None:\n            self.link = finder.find_requirement(self, upgrade)\n```"
            ],
            [
                246,
                "python",
                "MultivariateNormalTriL.params_size",
                "```python\ndef params_size(event_size, name=None):\n    \"\"\"The number of `params` needed to create a single distribution.\"\"\"\n    with tf.compat.v1.name_scope(name, 'MultivariateNormalTriL_params_size',\n                                 [event_size]):\n      return event_size + event_size * (event_size + 1) // 2\n```"
            ],
            [
                474,
                "python",
                "ConnectionHandler.use_music_service",
                "```python\ndef use_music_service(self, service_name, api_key):\n        \"\"\"\n        Sets the current music service to service_name.\n\n        :param str service_name: Name of the music service\n        :param str api_key: Optional API key if necessary\n        \"\"\"\n\n        try:\n            self.current_music = self.music_services[service_name]\n        except KeyError:\n            if service_name == 'youtube':\n                self.music_services['youtube'] = Youtube()\n                self.current_music = self.music_services['youtube']\n            elif service_name == 'soundcloud':\n                self.music_services['soundcloud'] = Soundcloud(api_key=api_key)\n                self.current_music = self.music_services['soundcloud']\n            else:\n                log.error('Music service name is not recognized.')\n```"
            ],
            [
                528,
                "python",
                "Striplog.invert",
                "```python\ndef invert(self, copy=False):\n        \"\"\"\n        Inverts the striplog, changing its order and the order of its contents.\n\n        Operates in place by default.\n\n        Args:\n            copy (bool): Whether to operate in place or make a copy.\n\n        Returns:\n            None if operating in-place, or an inverted copy of the striplog\n                if not.\n        \"\"\"\n        if copy:\n            return Striplog([i.invert(copy=True) for i in self])\n        else:\n            for i in self:\n                i.invert()\n            self.__sort()\n            o = self.order\n            self.order = {'depth': 'elevation', 'elevation': 'depth'}[o]\n            return\n```"
            ],
            [
                616,
                "python",
                "VCGPrinter.edge",
                "```python\ndef edge(self, from_node, to_node, edge_type=\"\", **args):\n        \"\"\"draw an edge from a node to another.\n        \"\"\"\n        self._stream.write(\n            '%s%sedge: {sourcename:\"%s\" targetname:\"%s\"'\n            % (self._indent, edge_type, from_node, to_node)\n        )\n        self._write_attributes(EDGE_ATTRS, **args)\n        self._stream.write(\"}\\n\")\n```"
            ],
            [
                503,
                "python",
                "pdf_case_report",
                "```python\ndef pdf_case_report(institute_id, case_name):\n    \"\"\"Download a pdf report for a case\"\"\"\n\n    institute_obj, case_obj = institute_and_case(store, institute_id, case_name)\n    data = controllers.case_report_content(store, institute_obj, case_obj)\n\n    # add coverage report on the bottom of this report\n    if current_app.config.get('SQLALCHEMY_DATABASE_URI'):\n        data['coverage_report'] = controllers.coverage_report_contents(store, institute_obj, case_obj, request.url_root)\n\n    # workaround to be able to print the case pedigree to pdf\n    if case_obj.get('madeline_info') is not None:\n        with open(os.path.join(cases_bp.static_folder, 'madeline.svg'), 'w') as temp_madeline:\n            temp_madeline.write(case_obj['madeline_info'])\n\n    html_report = render_template('cases/case_report.html', institute=institute_obj, case=case_obj, format='pdf', **data)\n    return render_pdf(HTML(string=html_report), download_filename=case_obj['display_name']+'_'+datetime.datetime.now().strftime(\"%Y-%m-%d\")+'_scout.pdf')\n```"
            ],
            [
                11,
                "python",
                "TaskInstance.are_dependencies_met",
                "```python\ndef are_dependencies_met(\n            self,\n            dep_context=None,\n            session=None,\n            verbose=False):\n        \"\"\"\n        Returns whether or not all the conditions are met for this task instance to be run\n        given the context for the dependencies (e.g. a task instance being force run from\n        the UI will ignore some dependencies).\n\n        :param dep_context: The execution context that determines the dependencies that\n            should be evaluated.\n        :type dep_context: DepContext\n        :param session: database session\n        :type session: sqlalchemy.orm.session.Session\n        :param verbose: whether log details on failed dependencies on\n            info or debug log level\n        :type verbose: bool\n        \"\"\"\n        dep_context = dep_context or DepContext()\n        failed = False\n        verbose_aware_logger = self.log.info if verbose else self.log.debug\n        for dep_status in self.get_failed_dep_statuses(\n                dep_context=dep_context,\n                session=session):\n            failed = True\n\n            verbose_aware_logger(\n                \"Dependencies not met for %s, dependency '%s' FAILED: %s\",\n                self, dep_status.dep_name, dep_status.reason\n            )\n\n        if failed:\n            return False\n\n        verbose_aware_logger(\"Dependencies all met for %s\", self)\n        return True\n```"
            ],
            [
                223,
                "python",
                "map_method",
                "```python\ndef map_method(method,object_list,*argseq,**kw):\n    \"\"\"map_method(method,object_list,*args,**kw) -> list\n\n    Return a list of the results of applying the methods to the items of the\n    argument sequence(s).  If more than one sequence is given, the method is\n    called with an argument list consisting of the corresponding item of each\n    sequence. All sequences must be of the same length.\n\n    Keyword arguments are passed verbatim to all objects called.\n\n    This is Python code, so it's not nearly as fast as the builtin map().\"\"\"\n\n    out_list = []\n    idx = 0\n    for object in object_list:\n        try:\n            handler = getattr(object, method)\n        except AttributeError:\n            out_list.append(None)\n        else:\n            if argseq:\n                args = map(lambda lst:lst[idx],argseq)\n                #print 'ob',object,'hand',handler,'ar',args # dbg\n                out_list.append(handler(args,**kw))\n            else:\n                out_list.append(handler(**kw))\n        idx += 1\n    return out_list\n```"
            ],
            [
                646,
                "python",
                "Gerrit.parse_reviews",
                "```python\ndef parse_reviews(raw_data):\n        \"\"\"Parse a Gerrit reviews list.\"\"\"\n\n        # Join isolated reviews in JSON in array for parsing\n        items_raw = \"[\" + raw_data.replace(\"\\n\", \",\") + \"]\"\n        items_raw = items_raw.replace(\",]\", \"]\")\n        items = json.loads(items_raw)\n        reviews = []\n\n        for item in items:\n            if 'project' in item.keys():\n                reviews.append(item)\n\n        return reviews\n```"
            ],
            [
                738,
                "python",
                "start",
                "```python\ndef start(dashboards, once, secrets):\n    \"\"\"Display a dashboard from the dashboard file(s) provided in the DASHBOARDS\n       Paths and/or URLs for dashboards (URLs must secrets with http or https)\n    \"\"\"\n\n    if secrets is None:\n        secrets = os.path.join(os.path.expanduser(\"~\"), \"/.doodledashboard/secrets\")\n\n    try:\n        loaded_secrets = try_read_secrets_file(secrets)\n    except InvalidSecretsException as err:\n        click.echo(get_error_message(err, default=\"Secrets file is invalid\"), err=True)\n        raise click.Abort()\n\n    read_configs = [\"\"\"\n    dashboard:\n      display:\n        type: console\n    \"\"\"]\n    for dashboard_file in dashboards:\n        read_configs.append(read_file(dashboard_file))\n\n    dashboard_config = DashboardConfigReader(initialise_component_loader(), loaded_secrets)\n\n    try:\n        dashboard = read_dashboard_from_config(dashboard_config, read_configs)\n    except YAMLError as err:\n        click.echo(get_error_message(err, default=\"Dashboard configuration is invalid\"), err=True)\n        raise click.Abort()\n\n    try:\n        DashboardValidator().validate(dashboard)\n    except ValidationException as err:\n        click.echo(get_error_message(err, default=\"Dashboard configuration is invalid\"), err=True)\n        raise click.Abort()\n\n    explain_dashboard(dashboard)\n\n    click.echo(\"Dashboard running...\")\n\n    while True:\n        try:\n            DashboardRunner(dashboard).cycle()\n        except SecretNotFound as err:\n            click.echo(get_error_message(err, default=\"Datafeed didn't have required secret\"), err=True)\n            raise click.Abort()\n\n        if once:\n            break\n```"
            ],
            [
                99,
                "python",
                "OAuth2RequestValidator.authenticate_client",
                "```python\ndef authenticate_client(self, request, *args, **kwargs):\n        \"\"\"Authenticate itself in other means.\n\n        Other means means is described in `Section 3.2.1`_.\n\n        .. _`Section 3.2.1`: http://tools.ietf.org/html/rfc6749#section-3.2.1\n        \"\"\"\n        client_id, client_secret = self._get_client_creds_from_request(request)\n        log.debug('Authenticate client %r', client_id)\n\n        client = self._clientgetter(client_id)\n        if not client:\n            log.debug('Authenticate client failed, client not found.')\n            return False\n\n        request.client = client\n\n        # http://tools.ietf.org/html/rfc6749#section-2\n        # The client MAY omit the parameter if the client secret is an empty string.\n        if hasattr(client, 'client_secret') and client.client_secret != client_secret:\n            log.debug('Authenticate client failed, secret not match.')\n            return False\n\n        log.debug('Authenticate client success.')\n        return True\n```"
            ],
            [
                11,
                "python",
                "Trajectory.f_get_parameters",
                "```python\ndef f_get_parameters(self, fast_access=False, copy=True):\n        \"\"\" Returns a dictionary containing the full parameter names as keys and the parameters\n         or the parameter data items as values.\n\n\n        :param fast_access:\n\n            Determines whether the parameter objects or their values are returned\n            in the dictionary.\n\n        :param copy:\n\n            Whether the original dictionary or a shallow copy is returned.\n            If you want the real dictionary please do not modify it at all!\n            Not Copying and fast access do not work at the same time! Raises ValueError\n            if fast access is true and copy false.\n\n        :return: Dictionary containing the parameters.\n\n        :raises: ValueError\n\n        \"\"\"\n        return self._return_item_dictionary(self._parameters, fast_access, copy)\n```"
            ],
            [
                679,
                "python",
                "load_config",
                "```python\ndef load_config(under_test=False, custom=None):  # pragma: no cover\n    \"\"\"\n    Load the configuration.\n\n    :param under_test:\n        Tell us if we only have to load the configuration file (True)\n        or load the configuration file and initate the output directory\n        if it does not exist (False).\n    :type under_test: bool\n\n    :param custom:\n        A dict with the configuration index (from .PyFunceble.yaml) to update.\n    :type custom: dict\n\n    .. warning::\n        If :code:`custom` is given, the given :code:`dict` overwrite\n        the last value of the given configuration indexes.\n    \"\"\"\n\n    if \"config_loaded\" not in INTERN:\n        # The configuration was not already loaded.\n\n        # We load and download the different configuration file if they are non\n        # existant.\n        Load(CURRENT_DIRECTORY)\n\n        if not under_test:\n            # If we are not under test which means that we want to save informations,\n            # we initiate the directory structure.\n            DirectoryStructure()\n\n        # We save that the configuration was loaded.\n        INTERN.update({\"config_loaded\": True})\n\n        if custom and isinstance(custom, dict):\n            # The given configuration is not None or empty.\n            # and\n            # It is a dict.\n\n            # We update the configuration index.\n            CONFIGURATION.update(custom)\n```"
            ],
            [
                175,
                "python",
                "FourDirectionalMoveController.registerEventHandlers",
                "```python\ndef registerEventHandlers(self):\n        \"\"\"\n        Registers needed keybinds and schedules the :py:meth:`update` Method.\n        \n        You can control what keybinds are used via the :confval:`controls.controls.forward` etc. Configuration Values.\n        \"\"\"\n        # Forward\n        self.peng.keybinds.add(self.peng.cfg[\"controls.controls.forward\"],\"peng3d:actor.%s.player.controls.forward\"%self.actor.uuid,self.on_fwd_down,False)\n        # Backward\n        self.peng.keybinds.add(self.peng.cfg[\"controls.controls.backward\"],\"peng3d:actor.%s.player.controls.backward\"%self.actor.uuid,self.on_bwd_down,False)\n        # Strafe Left\n        self.peng.keybinds.add(self.peng.cfg[\"controls.controls.strafeleft\"],\"peng3d:actor.%s.player.controls.strafeleft\"%self.actor.uuid,self.on_left_down,False)\n        # Strafe Right\n        self.peng.keybinds.add(self.peng.cfg[\"controls.controls.straferight\"],\"peng3d:actor.%s.player.controls.straferight\"%self.actor.uuid,self.on_right_down,False)\n        pyglet.clock.schedule_interval(self.update,1.0/60)\n```"
            ],
            [
                129,
                "python",
                "FrameIdentifierVisitor.visit_Name",
                "```python\ndef visit_Name(self, node):\n        \"\"\"All assignments to names go through this function.\"\"\"\n        if node.ctx == 'store':\n            self.identifiers.declared_locally.add(node.name)\n        elif node.ctx == 'param':\n            self.identifiers.declared_parameter.add(node.name)\n        elif node.ctx == 'load' and not \\\n             self.identifiers.is_declared(node.name):\n            self.identifiers.undeclared.add(node.name)\n```"
            ],
            [
                975,
                "python",
                "Client._call",
                "```python\ndef _call(self, method, params=None, request_id=None):\n        \"\"\" Calls the JSON-RPC endpoint. \"\"\"\n        params = params or []\n\n        # Determines which 'id' value to use and increment the counter associated with the current\n        # client instance if applicable.\n        rid = request_id or self._id_counter\n        if request_id is None:\n            self._id_counter += 1\n\n        # Prepares the payload and the headers that will be used to forge the request.\n        payload = {'jsonrpc': '2.0', 'method': method, 'params': params, 'id': rid}\n        headers = {'Content-Type': 'application/json'}\n        scheme = 'https' if self.tls else 'http'\n        url = '{}://{}:{}'.format(scheme, self.host, self.port)\n\n        # Calls the JSON-RPC endpoint!\n        try:\n            response = self.session.post(url, headers=headers, data=json.dumps(payload))\n            response.raise_for_status()\n        except HTTPError:\n            raise TransportError(\n                'Got unsuccessful response from server (status code: {})'.format(\n                    response.status_code),\n                response=response)\n\n        # Ensures the response body can be deserialized to JSON.\n        try:\n            response_data = response.json()\n        except ValueError as e:\n            raise ProtocolError(\n                'Unable to deserialize response body: {}'.format(e), response=response)\n\n        # Properly handles potential errors.\n        if response_data.get('error'):\n            code = response_data['error'].get('code', '')\n            message = response_data['error'].get('message', '')\n            raise ProtocolError(\n                'Error[{}] {}'.format(code, message), response=response, data=response_data)\n        elif 'result' not in response_data:\n            raise ProtocolError(\n                'Response is empty (result field is missing)', response=response,\n                data=response_data)\n\n        return response_data['result']\n```"
            ],
            [
                915,
                "python",
                "Client._update_secrets",
                "```python\ndef _update_secrets(self):\n        '''update secrets will update metadata needed for pull and search\n        '''\n        self.token = self._required_get_and_update('SREGISTRY_GITLAB_TOKEN')\n        self.headers[\"Private-Token\"] = self.token\n```"
            ]
        ]
    },
    "Test-python MRR (bs=1,000)": 0.0266119813378607,
    "Examples-FuncNameTest-python": {
        "_type": "table",
        "columns": [
            "Rank",
            "Language",
            "Query",
            "Code"
        ],
        "data": [
            [
                624,
                "python",
                "unpack_4to8",
                "```python\ndef unpack_4to8(data):\n    \"\"\" Promote 2-bit unisgned data into 8-bit unsigned data.\n\n    Args:\n        data: Numpy array with dtype == uint8\n\n    Notes:\n        # The process is this:\n        # ABCDEFGH [Bits of one 4+4-bit value]\n        # 00000000ABCDEFGH [astype(uint16)]\n        # 0000ABCDEFGH0000 [<< 4]\n        # 0000ABCDXXXXEFGH [bitwise 'or' of previous two lines]\n        # 0000111100001111 [0x0F0F]\n        # 0000ABCD0000EFGH [bitwise 'and' of previous two lines]\n        # ABCD0000EFGH0000 [<< 4]\n        # which effectively pads the two 4-bit values with zeros on the right\n        # Note: This technique assumes LSB-first ordering\n    \"\"\"\n\n    tmpdata = data.astype(np.int16)  # np.empty(upshape, dtype=np.int16)\n    tmpdata = (tmpdata | (tmpdata << 4)) & 0x0F0F\n    # tmpdata = tmpdata << 4 # Shift into high bits to avoid needing to sign extend\n    updata = tmpdata.byteswap()\n    return updata.view(data.dtype)\n```"
            ],
            [
                117,
                "python",
                "parse_mim2gene",
                "```python\ndef parse_mim2gene(lines):\n    \"\"\"Parse the file called mim2gene\n    \n    This file describes what type(s) the different mim numbers have.\n    The different entry types are: 'gene', 'gene/phenotype', 'moved/removed',\n    'phenotype', 'predominantly phenotypes'\n    Where:\n        gene: Is a gene entry\n        gene/phenotype: This entry describes both a phenotype and a gene\n        moved/removed: No explanation needed\n        phenotype: Describes a phenotype\n        predominantly phenotype: Not clearly established (probably phenotype)\n    \n    Args:\n        lines(iterable(str)): The mim2gene lines\n    \n    Yields:\n        parsed_entry(dict)\n    \n        {\n            \"mim_number\": int, \n            \"entry_type\": str, \n            \"entrez_gene_id\": int, \n            \"hgnc_symbol\": str, \n            \"ensembl_gene_id\": str,\n            \"ensembl_transcript_id\": str,\n        }\n    \n    \"\"\"\n    LOG.info(\"Parsing mim2gene\")\n    header = [\"mim_number\", \"entry_type\", \"entrez_gene_id\", \"hgnc_symbol\", \"ensembl_gene_id\"]\n    for i, line in enumerate(lines):\n        if line.startswith('#'):\n            continue\n        \n        if not len(line) > 0:\n            continue\n\n        line = line.rstrip()\n        parsed_entry = parse_omim_line(line, header)\n        parsed_entry['mim_number'] = int(parsed_entry['mim_number'])\n        parsed_entry['raw'] = line\n        \n        if 'hgnc_symbol' in parsed_entry:\n            parsed_entry['hgnc_symbol'] = parsed_entry['hgnc_symbol']\n        \n        if parsed_entry.get('entrez_gene_id'):\n            parsed_entry['entrez_gene_id'] = int(parsed_entry['entrez_gene_id'])\n        \n        if parsed_entry.get('ensembl_gene_id'):\n            ensembl_info = parsed_entry['ensembl_gene_id'].split(',')\n            parsed_entry['ensembl_gene_id'] = ensembl_info[0].strip()\n            if len(ensembl_info) > 1:\n                parsed_entry['ensembl_transcript_id'] = ensembl_info[1].strip()\n        \n        yield parsed_entry\n```"
            ],
            [
                619,
                "python",
                "CreditNoteController.cancellation_fee",
                "```python\ndef cancellation_fee(self, percentage):\n        ''' Generates an invoice with a cancellation fee, and applies\n        credit to the invoice.\n\n        percentage (Decimal): The percentage of the credit note to turn into\n        a cancellation fee. Must be 0 <= percentage <= 100.\n        '''\n\n        # Local import to fix import cycles. Can we do better?\n        from .invoice import InvoiceController\n\n        assert(percentage >= 0 and percentage <= 100)\n\n        cancellation_fee = self.credit_note.value * percentage / 100\n        due = datetime.timedelta(days=1)\n        item = [(\"Cancellation fee\", cancellation_fee)]\n        invoice = InvoiceController.manual_invoice(\n            self.credit_note.invoice.user, due, item\n        )\n\n        if not invoice.is_paid:\n            self.apply_to_invoice(invoice)\n\n        return InvoiceController(invoice)\n```"
            ],
            [
                920,
                "python",
                "update_panel",
                "```python\ndef update_panel(store, panel_name, csv_lines, option):\n    \"\"\"Update an existing gene panel with genes.\n\n    Args:\n        store(scout.adapter.MongoAdapter)\n        panel_name(str)\n        csv_lines(iterable(str)): Stream with genes\n        option(str): 'add' or 'replace'\n\n    Returns:\n        panel_obj(dict)\n    \"\"\"\n    new_genes= []\n    panel_obj = store.gene_panel(panel_name)\n    if panel_obj is None:\n        return None\n    try:\n        new_genes = parse_genes(csv_lines) # a list of gene dictionaries containing gene info\n    except SyntaxError as error:\n        flash(error.args[0], 'danger')\n        return None\n\n    # if existing genes are to be replaced by those in csv_lines\n    if option == 'replace':\n        # all existing genes should be deleted\n        for gene in panel_obj['genes']:\n            #create extra key to use in pending actions:\n            gene['hgnc_symbol'] = gene['symbol']\n            store.add_pending(panel_obj, gene, action='delete', info=None)\n\n    for new_gene in new_genes:\n        if not new_gene['hgnc_id']:\n            flash(\"gene missing hgnc id: {}\".format(new_gene['hgnc_symbol']),'danger')\n            continue\n        gene_obj = store.hgnc_gene(new_gene['hgnc_id'])\n        if gene_obj is None:\n            flash(\"gene not found: {} - {}\".format(new_gene['hgnc_id'], new_gene['hgnc_symbol']),'danger')\n            continue\n        if new_gene['hgnc_symbol'] and gene_obj['hgnc_symbol'] != new_gene['hgnc_symbol']:\n            flash(\"symbol mis-match: {0} | {1}\".format(\n                gene_obj['hgnc_symbol'], new_gene['hgnc_symbol']), 'warning')\n\n        info_data = {\n            'disease_associated_transcripts': new_gene['transcripts'],\n            'reduced_penetrance': new_gene['reduced_penetrance'],\n            'mosaicism': new_gene['mosaicism'],\n            'inheritance_models': new_gene['inheritance_models'],\n            'database_entry_version': new_gene['database_entry_version'],\n        }\n        if option == 'replace': # there will be no existing genes for sure, because we're replacing them all\n            action = 'add'\n        else: # add option. Add if genes is not existing. otherwise edit it\n            existing_genes = {gene['hgnc_id'] for gene in panel_obj['genes']}\n            action = 'edit' if gene_obj['hgnc_id'] in existing_genes else 'add'\n        store.add_pending(panel_obj, gene_obj, action=action, info=info_data)\n\n    return panel_obj\n```"
            ],
            [
                4,
                "python",
                "MinHashLSHForest.index",
                "```python\ndef index(self):\n        '''\n        Index all the keys added so far and make them searchable.\n        '''\n        for i, hashtable in enumerate(self.hashtables):\n            self.sorted_hashtables[i] = [H for H in hashtable.keys()]\n            self.sorted_hashtables[i].sort()\n```"
            ],
            [
                34,
                "python",
                "Eaf.generate_ts_id",
                "```python\ndef generate_ts_id(self, time=None):\n        \"\"\"Generate the next timeslot id, this function is mainly used\n        internally\n\n        :param int time: Initial time to assign to the timeslot.\n        :raises ValueError: If the time is negative.\n        \"\"\"\n        if time and time < 0:\n            raise ValueError('Time is negative...')\n        if not self.maxts:\n            valid_ts = [int(''.join(filter(str.isdigit, a)))\n                        for a in self.timeslots]\n            self.maxts = max(valid_ts + [1])+1\n        else:\n            self.maxts += 1\n        ts = 'ts{:d}'.format(self.maxts)\n        self.timeslots[ts] = time\n        return ts\n```"
            ],
            [
                576,
                "python",
                "BandwidthLimitedStream.read",
                "```python\ndef read(self, amount):\n        \"\"\"Read a specified amount\n\n        Reads will only be throttled if bandwidth limiting is enabled.\n        \"\"\"\n        if not self._bandwidth_limiting_enabled:\n            return self._fileobj.read(amount)\n\n        # We do not want to be calling consume on every read as the read\n        # amounts can be small causing the lock of the leaky bucket to\n        # introduce noticeable overhead. So instead we keep track of\n        # how many bytes we have seen and only call consume once we pass a\n        # certain threshold.\n        self._bytes_seen += amount\n        if self._bytes_seen < self._bytes_threshold:\n            return self._fileobj.read(amount)\n\n        self._consume_through_leaky_bucket()\n        return self._fileobj.read(amount)\n```"
            ],
            [
                173,
                "python",
                "Meter.extractMonthTariff",
                "```python\ndef extractMonthTariff(self, month):\n        \"\"\" Extract the tariff for a single month from the meter object buffer.\n\n        Args:\n            month (int):  A :class:`~ekmmeters.Months` value or range(Extents.Months).\n\n        Returns:\n            tuple: The eight tariff period totals for month. The return tuple breaks out as follows:\n\n            ================= ======================================\n            kWh_Tariff_1      kWh for tariff period 1 over month.\n            kWh_Tariff_2      kWh for tariff period 2 over month\n            kWh_Tariff_3      kWh for tariff period 3 over month\n            kWh_Tariff_4      kWh for tariff period 4 over month\n            kWh_Tot           Total kWh over requested month\n            Rev_kWh_Tariff_1  Rev kWh for tariff period 1 over month\n            Rev_kWh_Tariff_3  Rev kWh for tariff period 2 over month\n            Rev_kWh_Tariff_3  Rev kWh for tariff period 3 over month\n            Rev_kWh_Tariff_4  Rev kWh for tariff period 4 over month\n            Rev_kWh_Tot       Total Rev kWh over requested month\n            ================= ======================================\n\n        \"\"\"\n        ret = namedtuple(\"ret\", [\"Month\", Field.kWh_Tariff_1, Field.kWh_Tariff_2, Field.kWh_Tariff_3,\n                         Field.kWh_Tariff_4, Field.kWh_Tot, Field.Rev_kWh_Tariff_1,\n                         Field.Rev_kWh_Tariff_2, Field.Rev_kWh_Tariff_3,\n                         Field.Rev_kWh_Tariff_4, Field.Rev_kWh_Tot])\n        month += 1\n        ret.Month = str(month)\n        if (month < 1) or (month > Extents.Months):\n            ret.kWh_Tariff_1 = ret.kWh_Tariff_2 = ret.kWh_Tariff_3 = ret.kWh_Tariff_4 = str(0)\n            ret.Rev_kWh_Tariff_1 = ret.Rev_kWh_Tariff_2 = ret.Rev_kWh_Tariff_3 = ret.Rev_kWh_Tariff_4 = str(0)\n            ret.kWh_Tot = ret.Rev_kWh_Tot = str(0)\n            ekm_log(\"Out of range(Extents.Months) month = \" + str(month))\n            return ret\n\n        base_str = \"Month_\" + str(month) + \"_\"\n        ret.kWh_Tariff_1 = self.m_mons[base_str + \"Tariff_1\"][MeterData.StringValue]\n        ret.kWh_Tariff_2 = self.m_mons[base_str + \"Tariff_2\"][MeterData.StringValue]\n        ret.kWh_Tariff_3 = self.m_mons[base_str + \"Tariff_3\"][MeterData.StringValue]\n        ret.kWh_Tariff_4 = self.m_mons[base_str + \"Tariff_4\"][MeterData.StringValue]\n        ret.kWh_Tot = self.m_mons[base_str + \"Tot\"][MeterData.StringValue]\n        ret.Rev_kWh_Tariff_1 = self.m_rev_mons[base_str + \"Tariff_1\"][MeterData.StringValue]\n        ret.Rev_kWh_Tariff_2 = self.m_rev_mons[base_str + \"Tariff_2\"][MeterData.StringValue]\n        ret.Rev_kWh_Tariff_3 = self.m_rev_mons[base_str + \"Tariff_3\"][MeterData.StringValue]\n        ret.Rev_kWh_Tariff_4 = self.m_rev_mons[base_str + \"Tariff_4\"][MeterData.StringValue]\n        ret.Rev_kWh_Tot = self.m_rev_mons[base_str + \"Tot\"][MeterData.StringValue]\n        return ret\n```"
            ],
            [
                286,
                "python",
                "BigQueryCursor.executemany",
                "```python\ndef executemany(self, operation, seq_of_parameters):\n        \"\"\"\n        Execute a BigQuery query multiple times with different parameters.\n\n        :param operation: The query to execute.\n        :type operation: str\n        :param seq_of_parameters: List of dictionary parameters to substitute into the\n            query.\n        :type seq_of_parameters: list\n        \"\"\"\n        for parameters in seq_of_parameters:\n            self.execute(operation, parameters)\n```"
            ],
            [
                39,
                "python",
                "TypeSystem.convert_from_binary",
                "```python\ndef convert_from_binary(self, binvalue, type, **kwargs):\n        \"\"\"\n        Convert binary data to type 'type'.\n\n        'type' must have a convert_binary function.  If 'type'\n        supports size checking, the size function is called to ensure\n        that binvalue is the correct size for deserialization\n        \"\"\"\n\n        size = self.get_type_size(type)\n        if size > 0 and len(binvalue) != size:\n            raise ArgumentError(\"Could not convert type from binary since the data was not the correct size\", required_size=size, actual_size=len(binvalue), type=type)\n\n        typeobj = self.get_type(type)\n\n        if not hasattr(typeobj, 'convert_binary'):\n            raise ArgumentError(\"Type does not support conversion from binary\", type=type)\n\n        return typeobj.convert_binary(binvalue, **kwargs)\n```"
            ],
            [
                392,
                "python",
                "read_data",
                "```python\ndef read_data(data_file, dataformat, name_mode):\n    \"\"\"\n    Load data_file described by a dataformat dict.\n\n    Parameters\n    ----------\n    data_file : str\n        Path to data file, including extension.\n    dataformat : dict\n        A dataformat dict, see example below.\n    name_mode : str\n        How to identyfy sample names. If 'file_names' uses the\n        input name of the file, stripped of the extension. If\n        'metadata_names' uses the 'name' attribute of the 'meta'\n        sub-dictionary in dataformat. If any other str, uses this\n        str as the sample name.\n\n    Example\n    -------\n    >>>\n    {'genfromtext_args': {'delimiter': ',',\n                          'skip_header': 4},  # passed directly to np.genfromtxt\n     'column_id': {'name_row': 3,  # which row contains the column names\n                   'delimiter': ',',  # delimeter between column names\n                   'timecolumn': 0,  # which column contains the 'time' variable\n                   'pattern': '([A-z]{1,2}[0-9]{1,3})'},  # a regex pattern which captures the column names\n     'meta_regex': {  # a dict of (line_no: ([descriptors], [regexs])) pairs\n                    0: (['path'], '(.*)'),\n                    2: (['date', 'method'],  # MUST include date\n                     '([A-Z][a-z]+ [0-9]+ [0-9]{4}[ ]+[0-9:]+ [amp]+).* ([A-z0-9]+\\.m)')\n                   }\n    }\n\n    Returns\n    -------\n    sample, analytes, data, meta : tuple\n    \"\"\"\n    with open(data_file) as f:\n        lines = f.readlines()\n\n    if 'meta_regex' in dataformat.keys():\n        meta = Bunch()\n        for k, v in dataformat['meta_regex'].items():\n            try:\n                out = re.search(v[-1], lines[int(k)]).groups()\n            except:\n                raise ValueError('Failed reading metadata when applying:\\n  regex: {}\\nto\\n  line: {}'.format(v[-1], lines[int(k)]))\n            for i in np.arange(len(v[0])):\n                meta[v[0][i]] = out[i]\n    else:\n        meta = {}\n\n    # sample name\n    if name_mode == 'file_names':\n        sample = os.path.basename(data_file).split('.')[0]\n    elif name_mode == 'metadata_names':\n        sample = meta['name']\n    else:\n        sample = name_mode\n\n    # column and analyte names\n    columns = np.array(lines[dataformat['column_id']['name_row']].strip().split(\n        dataformat['column_id']['delimiter']))\n    if 'pattern' in dataformat['column_id'].keys():\n        pr = re.compile(dataformat['column_id']['pattern'])\n        analytes = [pr.match(c).groups()[0] for c in columns if pr.match(c)]\n\n    # do any required pre-formatting\n    if 'preformat_replace' in dataformat.keys():\n        with open(data_file) as f:\n            fbuffer = f.read()\n        for k, v in dataformat['preformat_replace'].items():\n            fbuffer = re.sub(k, v, fbuffer)\n        # dead data\n        read_data = np.genfromtxt(BytesIO(fbuffer.encode()),\n                                  **dataformat['genfromtext_args']).T\n    else:\n        # read data\n        read_data = np.genfromtxt(data_file,\n                                  **dataformat['genfromtext_args']).T\n\n    # data dict\n    dind = np.zeros(read_data.shape[0], dtype=bool)\n    for a in analytes:\n        dind[columns == a] = True\n\n    data = Bunch()\n    data['Time'] = read_data[dataformat['column_id']['timecolumn']]\n\n    # deal with time units\n    if 'time_unit' in dataformat['column_id']:\n        if isinstance(dataformat['column_id']['time_unit'], (float, int)):\n            time_mult = dataformat['column_id']['time_unit']\n        elif isinstance(dataformat['column_id']['time_unit'], str):\n            unit_multipliers = {'ms': 1/1000,\n                                'min': 60/1,\n                                's': 1}\n            try:\n                time_mult = unit_multipliers[dataformat['column_id']['time_unit']]\n            except:\n                raise ValueError(\"In dataformat: time_unit must be a number, 'ms', 'min' or 's'\")\n        data['Time'] *= time_mult\n        \n    # convert raw data into counts\n    # TODO: Is this correct? Should actually be per-analyte dwell?\n    # if 'unit' in dataformat:\n    #     if dataformat['unit'] == 'cps':\n    #         tstep = data['Time'][1] - data['Time'][0]\n    #         read_data[dind] *= tstep\n    #     else:\n    #         pass\n    data['rawdata'] = Bunch(zip(analytes, read_data[dind]))\n    data['total_counts'] = np.nansum(read_data[dind], 0)\n\n    return sample, analytes, data, meta\n```"
            ],
            [
                125,
                "python",
                "DrawElement.top",
                "```python\ndef top(self):\n        \"\"\" Constructs the top line of the element\"\"\"\n        ret = self.top_format % self.top_connect.center(\n            self.width, self.top_pad)\n        if self.right_fill:\n            ret = ret.ljust(self.right_fill, self.top_pad)\n        if self.left_fill:\n            ret = ret.rjust(self.left_fill, self.top_pad)\n        ret = ret.center(self.layer_width, self.top_bck)\n        return ret\n```"
            ],
            [
                426,
                "python",
                "GoogleCloudBucketHelper.google_cloud_to_local",
                "```python\ndef google_cloud_to_local(self, file_name):\n        \"\"\"\n        Checks whether the file specified by file_name is stored in Google Cloud\n        Storage (GCS), if so, downloads the file and saves it locally. The full\n        path of the saved file will be returned. Otherwise the local file_name\n        will be returned immediately.\n\n        :param file_name: The full path of input file.\n        :type file_name: str\n        :return: The full path of local file.\n        :rtype: str\n        \"\"\"\n        if not file_name.startswith('gs://'):\n            return file_name\n\n        # Extracts bucket_id and object_id by first removing 'gs://' prefix and\n        # then split the remaining by path delimiter '/'.\n        path_components = file_name[self.GCS_PREFIX_LENGTH:].split('/')\n        if len(path_components) < 2:\n            raise Exception(\n                'Invalid Google Cloud Storage (GCS) object path: {}'\n                .format(file_name))\n\n        bucket_id = path_components[0]\n        object_id = '/'.join(path_components[1:])\n        local_file = '/tmp/dataflow{}-{}'.format(str(uuid.uuid4())[:8],\n                                                 path_components[-1])\n        self._gcs_hook.download(bucket_id, object_id, local_file)\n\n        if os.stat(local_file).st_size > 0:\n            return local_file\n        raise Exception(\n            'Failed to download Google Cloud Storage (GCS) object: {}'\n            .format(file_name))\n```"
            ],
            [
                527,
                "python",
                "get_single_list_nodes_data",
                "```python\ndef get_single_list_nodes_data(li, meta_data):\n    \"\"\"\n    Find consecutive li tags that have content that have the same list id.\n    \"\"\"\n    yield li\n    w_namespace = get_namespace(li, 'w')\n    current_numId = get_numId(li, w_namespace)\n    starting_ilvl = get_ilvl(li, w_namespace)\n    el = li\n    while True:\n        el = el.getnext()\n        if el is None:\n            break\n        # If the tag has no content ignore it.\n        if not has_text(el):\n            continue\n\n        # Stop the lists if you come across a list item that should be a\n        # heading.\n        if _is_top_level_upper_roman(el, meta_data):\n            break\n\n        if (\n                is_li(el, meta_data) and\n                (starting_ilvl > get_ilvl(el, w_namespace))):\n            break\n\n        new_numId = get_numId(el, w_namespace)\n        if new_numId is None or new_numId == -1:\n            # Not a p tag or a list item\n            yield el\n            continue\n        # If the list id of the next tag is different that the previous that\n        # means a new list being made (not nested)\n        if current_numId != new_numId:\n            # Not a subsequent list.\n            break\n        if is_last_li(el, meta_data, current_numId):\n            yield el\n            break\n        yield el\n```"
            ],
            [
                468,
                "python",
                "Node.select",
                "```python\ndef select(self, selector):\n        \"\"\"\n        Like :meth:`find_all`, but takes a CSS selector string as input.\n        \"\"\"\n        op = operator.methodcaller('select', selector)\n        return self._wrap_multi(op)\n```"
            ],
            [
                900,
                "python",
                "SqlDatabaseManagementService.list_quotas",
                "```python\ndef list_quotas(self, server_name):\n        '''\n        Gets quotas for an Azure SQL Database Server.\n\n        server_name:\n            Name of the server.\n        '''\n        _validate_not_none('server_name', server_name)\n        response = self._perform_get(self._get_quotas_path(server_name),\n                                     None)\n        return _MinidomXmlToObject.parse_service_resources_response(\n            response, ServerQuota)\n```"
            ],
            [
                45,
                "python",
                "SolveBioAuth.logout",
                "```python\ndef logout(self):\n        \"\"\"Revoke the token and remove the cookie.\"\"\"\n        if self._oauth_client_secret:\n            try:\n                oauth_token = flask.request.cookies[self.TOKEN_COOKIE_NAME]\n                # Revoke the token\n                requests.post(\n                    urljoin(self._api_host, self.OAUTH2_REVOKE_TOKEN_PATH),\n                    data={\n                        'client_id': self._oauth_client_id,\n                        'client_secret': self._oauth_client_secret,\n                        'token': oauth_token\n                    })\n            except:\n                pass\n\n        response = flask.redirect('/')\n        self.clear_cookies(response)\n        return response\n```"
            ],
            [
                652,
                "python",
                "Context.integrity_negotiated",
                "```python\ndef integrity_negotiated(self):\n        \"\"\"\n        After :meth:`step` has been called, this property will be set to\n        True if integrity protection (signing) has been negotiated in this context, False\n        otherwise. If this property is True, you can use :meth:`get_mic` to sign messages with a\n        message integrity code (MIC), which the peer application can verify.\n        \"\"\"\n        return (\n            self.flags & C.GSS_C_INTEG_FLAG\n        ) and (\n            self.established or (self.flags & C.GSS_C_PROT_READY_FLAG)\n        )\n```"
            ],
            [
                46,
                "python",
                "QasmSimulatorPy._get_statevector",
                "```python\ndef _get_statevector(self):\n        \"\"\"Return the current statevector in JSON Result spec format\"\"\"\n        vec = np.reshape(self._statevector, 2 ** self._number_of_qubits)\n        # Expand complex numbers\n        vec = np.stack([vec.real, vec.imag], axis=1)\n        # Truncate small values\n        vec[abs(vec) < self._chop_threshold] = 0.0\n        return vec\n```"
            ],
            [
                143,
                "python",
                "OpenIdMixin.authenticate_redirect",
                "```python\ndef authenticate_redirect(\n        self, callback_uri=None, ax_attrs=[\"name\", \"email\", \"language\",\n                                           \"username\"]):\n\n        \"\"\"Returns the authentication URL for this service.\n\n        After authentication, the service will redirect back to the given\n        callback URI.\n\n        We request the given attributes for the authenticated user by\n        default (name, email, language, and username). If you don't need\n        all those attributes for your app, you can request fewer with\n        the ax_attrs keyword argument.\n        \"\"\"\n        callback_uri = callback_uri or self.request.uri\n        args = self._openid_args(callback_uri, ax_attrs=ax_attrs)\n        self.redirect(self._OPENID_ENDPOINT + \"?\" + urllib.urlencode(args))\n```"
            ],
            [
                412,
                "python",
                "NotebookManager.save_new_notebook",
                "```python\ndef save_new_notebook(self, data, name=None, format=u'json'):\n        \"\"\"Save a new notebook and return its notebook_id.\n\n        If a name is passed in, it overrides any values in the notebook data\n        and the value in the data is updated to use that value.\n        \"\"\"\n        if format not in self.allowed_formats:\n            raise web.HTTPError(415, u'Invalid notebook format: %s' % format)\n\n        try:\n            nb = current.reads(data.decode('utf-8'), format)\n        except:\n            raise web.HTTPError(400, u'Invalid JSON data')\n\n        if name is None:\n            try:\n                name = nb.metadata.name\n            except AttributeError:\n                raise web.HTTPError(400, u'Missing notebook name')\n        nb.metadata.name = name\n\n        notebook_id = self.new_notebook_id(name)\n        self.save_notebook_object(notebook_id, nb)\n        return notebook_id\n```"
            ],
            [
                903,
                "python",
                "PassManager.passes",
                "```python\ndef passes(self):\n        \"\"\"\n        Returns a list structure of the appended passes and its options.\n\n        Returns (list): The appended passes.\n        \"\"\"\n        ret = []\n        for pass_ in self.working_list:\n            ret.append(pass_.dump_passes())\n        return ret\n```"
            ],
            [
                286,
                "python",
                "DatabaseConnection.read",
                "```python\ndef read(self, path, params=None):\n        \"\"\"Read the result at the given path (GET) from the CRUD API, using the optional params dictionary\n        as url parameters.\"\"\"\n        return self.handleresult(self.r.get(urljoin(self.url + CRUD_PATH,\n                                                    path),\n                                            params=params))\n```"
            ],
            [
                327,
                "python",
                "Session.evaluate_script",
                "```python\ndef evaluate_script(self, script, *args):\n        \"\"\"\n        Evaluate the given JavaScript and return the result. Be careful when using this with\n        scripts that return complex objects, such as jQuery statements. :meth:`execute_script`\n        might be a better alternative.\n\n        Args:\n            script (str): A string of JavaScript to evaluate.\n            *args: Variable length argument list to pass to the executed JavaScript string.\n\n        Returns:\n            object: The result of the evaluated JavaScript (may be driver specific).\n        \"\"\"\n\n        args = [arg.base if isinstance(arg, Base) else arg for arg in args]\n        result = self.driver.evaluate_script(script, *args)\n        return self._wrap_element_script_result(result)\n```"
            ],
            [
                619,
                "python",
                "get_all_boundary_algorithms",
                "```python\ndef get_all_boundary_algorithms():\n    \"\"\"Gets all the possible boundary algorithms in MSAF.\n\n    Returns\n    -------\n    algo_ids : list\n        List of all the IDs of boundary algorithms (strings).\n    \"\"\"\n    algo_ids = []\n    for name in msaf.algorithms.__all__:\n        module = eval(msaf.algorithms.__name__ + \".\" + name)\n        if module.is_boundary_type:\n            algo_ids.append(module.algo_id)\n    return algo_ids\n```"
            ],
            [
                607,
                "python",
                "Expression.op_and",
                "```python\ndef op_and(self, *elements):\n        \"\"\"Update the ``Expression`` by joining the specified additional\n        ``elements`` using an \"AND\" ``Operator``\n\n        Args:\n            *elements (BaseExpression): The ``Expression`` and/or\n                ``Constraint`` elements which the \"AND\" ``Operator`` applies\n                to.\n\n        Returns:\n            Expression: ``self`` or related ``Expression``.\n        \"\"\"\n        expression = self.add_operator(Operator(';'))\n        for element in elements:\n            expression.add_element(element)\n        return expression\n```"
            ],
            [
                119,
                "python",
                "LinkyClient._get_data",
                "```python\ndef _get_data(self, p_p_resource_id, start_date=None, end_date=None):\n        \"\"\"Get data.\"\"\"\n\n        data = {\n            '_' + REQ_PART + '_dateDebut': start_date,\n            '_' + REQ_PART + '_dateFin': end_date\n        }\n\n        params = {\n            'p_p_id': REQ_PART,\n            'p_p_lifecycle': 2,\n            'p_p_state': 'normal',\n            'p_p_mode': 'view',\n            'p_p_resource_id': p_p_resource_id,\n            'p_p_cacheability': 'cacheLevelPage',\n            'p_p_col_id': 'column-1',\n            'p_p_col_pos': 1,\n            'p_p_col_count': 3\n        }\n\n        try:\n            raw_res = self._session.post(DATA_URL,\n                                         data=data,\n                                         params=params,\n                                         allow_redirects=False,\n                                         timeout=self._timeout)\n\n            if 300 <= raw_res.status_code < 400:\n                raw_res = self._session.post(DATA_URL,\n                                             data=data,\n                                             params=params,\n                                             allow_redirects=False,\n                                             timeout=self._timeout)\n        except OSError as e:\n            raise PyLinkyError(\"Could not access enedis.fr: \" + str(e))\n\n        if raw_res.text is \"\":\n            raise PyLinkyError(\"No data\")\n\n        if 302 == raw_res.status_code and \"/messages/maintenance.html\" in raw_res.text:\n            raise PyLinkyError(\"Site in maintenance\")\n\n        try:\n            json_output = raw_res.json()\n        except (OSError, json.decoder.JSONDecodeError, simplejson.errors.JSONDecodeError) as e:\n            raise PyLinkyError(\"Impossible to decode response: \" + str(e) + \"\\nResponse was: \" + str(raw_res.text))\n\n        if json_output.get('etat').get('valeur') == 'erreur':\n            raise PyLinkyError(\"Enedis.fr answered with an error: \" + str(json_output))\n\n        return json_output.get('graphe')\n```"
            ],
            [
                879,
                "python",
                "clinvar",
                "```python\ndef clinvar(institute_id, case_name, variant_id):\n    \"\"\"Build a clinVar submission form for a variant.\"\"\"\n    data = controllers.clinvar_export(store, institute_id, case_name, variant_id)\n    if request.method == 'GET':\n        return data\n    else: #POST\n        form_dict = request.form.to_dict()\n        submission_objects = set_submission_objects(form_dict) # A tuple of submission objects (variants and casedata objects)\n\n        # Add submission data to an open clinvar submission object,\n        # or create a new if no open submission is found in database\n        open_submission = store.get_open_clinvar_submission(current_user.email, institute_id)\n        updated_submission = store.add_to_submission(open_submission['_id'], submission_objects)\n\n        # Redirect to clinvar submissions handling page, and pass it the updated_submission_object\n        return redirect(url_for('cases.clinvar_submissions', institute_id=institute_id))\n```"
            ],
            [
                357,
                "python",
                "MozillaClubParser.__get_event_fields",
                "```python\ndef __get_event_fields(self):\n        \"\"\"Get the events fields (columns) from the cells received.\"\"\"\n\n        event_fields = {}\n        # The cells in the first row are the column names\n        # Check that the columns names are the same we have as template\n        # Create the event template from the data retrieved\n        while self.ncell < len(self.cells):\n            cell = self.cells[self.ncell]\n            row = cell['gs$cell']['row']\n            if int(row) > 1:\n                # When the row number >1 the column row is finished\n                break\n            ncol = int(cell['gs$cell']['col'])\n            name = cell['content']['$t']\n            event_fields[ncol] = name\n            if ncol in EVENT_TEMPLATE:\n                if event_fields[ncol] != EVENT_TEMPLATE[ncol]:\n                    logger.warning(\"Event template changed in spreadsheet %s vs %s\",\n                                   name, EVENT_TEMPLATE[ncol])\n            else:\n                logger.warning(\"Event template changed in spreadsheet. New column: %s\", name)\n\n            self.ncell += 1\n        return event_fields\n```"
            ],
            [
                648,
                "python",
                "center_eigenvalue_diff",
                "```python\ndef center_eigenvalue_diff(mat):\n    \"\"\"Compute the eigvals of mat and then find the center eigval difference.\"\"\"\n    N = len(mat)\n    evals = np.sort(la.eigvals(mat))\n    diff = np.abs(evals[N/2] - evals[N/2-1])\n    return diff\n```"
            ],
            [
                150,
                "python",
                "MongoHook.delete_one",
                "```python\ndef delete_one(self, mongo_collection, filter_doc, mongo_db=None, **kwargs):\n        \"\"\"\n        Deletes a single document in a mongo collection.\n        https://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection.delete_one\n\n        :param mongo_collection: The name of the collection to delete from.\n        :type mongo_collection: str\n        :param filter_doc: A query that matches the document to delete.\n        :type filter_doc: dict\n        :param mongo_db: The name of the database to use.\n            Can be omitted; then the database from the connection string is used.\n        :type mongo_db: str\n\n        \"\"\"\n        collection = self.get_collection(mongo_collection, mongo_db=mongo_db)\n\n        return collection.delete_one(filter_doc, **kwargs)\n```"
            ],
            [
                466,
                "python",
                "Mesh.set_fields",
                "```python\ndef set_fields(self, fields = None, **kwargs):\n    \"\"\"\n    Sets the fields.\n    \"\"\"\n    self.fields = []\n    if fields != None:\n      for field in fields: \n        self.fields.append(field)\n```"
            ],
            [
                408,
                "python",
                "ResourceManager.addFromTex",
                "```python\ndef addFromTex(self,name,img,category):\n        \"\"\"\n        Adds a new texture from the given image.\n        \n        ``img`` may be any object that supports Pyglet-style copying in form of the ``blit_to_texture()`` method.\n        \n        This can be used to add textures that come from non-file sources, e.g. Render-to-texture.\n        \"\"\"\n        texreg = self.categoriesTexBin[category].add(img)\n        #texreg = texreg.get_transform(True,True) # Mirrors the image due to how pyglets coordinate system works\n        # Strange behaviour, sometimes needed and sometimes not\n        \n        self.categories[category][name]=texreg\n        target = texreg.target\n        texid = texreg.id\n        texcoords = texreg.tex_coords\n        \n        # Prevents texture bleeding with texture sizes that are powers of 2, else weird lines may appear at certain angles.\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT)\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT)\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST)\n        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST_MIPMAP_LINEAR)\n        glGenerateMipmap(GL_TEXTURE_2D)\n        \n        out = target,texid,texcoords\n        self.categoriesTexCache[category][name]=out\n        return out\n```"
            ],
            [
                115,
                "python",
                "InstallRequirement.populate_link",
                "```python\ndef populate_link(self, finder, upgrade):\n        \"\"\"Ensure that if a link can be found for this, that it is found.\n\n        Note that self.link may still be None - if Upgrade is False and the\n        requirement is already installed.\n        \"\"\"\n        if self.link is None:\n            self.link = finder.find_requirement(self, upgrade)\n```"
            ],
            [
                21,
                "python",
                "MultivariateNormalTriL.params_size",
                "```python\ndef params_size(event_size, name=None):\n    \"\"\"The number of `params` needed to create a single distribution.\"\"\"\n    with tf.compat.v1.name_scope(name, 'MultivariateNormalTriL_params_size',\n                                 [event_size]):\n      return event_size + event_size * (event_size + 1) // 2\n```"
            ],
            [
                218,
                "python",
                "ConnectionHandler.use_music_service",
                "```python\ndef use_music_service(self, service_name, api_key):\n        \"\"\"\n        Sets the current music service to service_name.\n\n        :param str service_name: Name of the music service\n        :param str api_key: Optional API key if necessary\n        \"\"\"\n\n        try:\n            self.current_music = self.music_services[service_name]\n        except KeyError:\n            if service_name == 'youtube':\n                self.music_services['youtube'] = Youtube()\n                self.current_music = self.music_services['youtube']\n            elif service_name == 'soundcloud':\n                self.music_services['soundcloud'] = Soundcloud(api_key=api_key)\n                self.current_music = self.music_services['soundcloud']\n            else:\n                log.error('Music service name is not recognized.')\n```"
            ],
            [
                148,
                "python",
                "Striplog.invert",
                "```python\ndef invert(self, copy=False):\n        \"\"\"\n        Inverts the striplog, changing its order and the order of its contents.\n\n        Operates in place by default.\n\n        Args:\n            copy (bool): Whether to operate in place or make a copy.\n\n        Returns:\n            None if operating in-place, or an inverted copy of the striplog\n                if not.\n        \"\"\"\n        if copy:\n            return Striplog([i.invert(copy=True) for i in self])\n        else:\n            for i in self:\n                i.invert()\n            self.__sort()\n            o = self.order\n            self.order = {'depth': 'elevation', 'elevation': 'depth'}[o]\n            return\n```"
            ],
            [
                874,
                "python",
                "VCGPrinter.edge",
                "```python\ndef edge(self, from_node, to_node, edge_type=\"\", **args):\n        \"\"\"draw an edge from a node to another.\n        \"\"\"\n        self._stream.write(\n            '%s%sedge: {sourcename:\"%s\" targetname:\"%s\"'\n            % (self._indent, edge_type, from_node, to_node)\n        )\n        self._write_attributes(EDGE_ATTRS, **args)\n        self._stream.write(\"}\\n\")\n```"
            ],
            [
                556,
                "python",
                "pdf_case_report",
                "```python\ndef pdf_case_report(institute_id, case_name):\n    \"\"\"Download a pdf report for a case\"\"\"\n\n    institute_obj, case_obj = institute_and_case(store, institute_id, case_name)\n    data = controllers.case_report_content(store, institute_obj, case_obj)\n\n    # add coverage report on the bottom of this report\n    if current_app.config.get('SQLALCHEMY_DATABASE_URI'):\n        data['coverage_report'] = controllers.coverage_report_contents(store, institute_obj, case_obj, request.url_root)\n\n    # workaround to be able to print the case pedigree to pdf\n    if case_obj.get('madeline_info') is not None:\n        with open(os.path.join(cases_bp.static_folder, 'madeline.svg'), 'w') as temp_madeline:\n            temp_madeline.write(case_obj['madeline_info'])\n\n    html_report = render_template('cases/case_report.html', institute=institute_obj, case=case_obj, format='pdf', **data)\n    return render_pdf(HTML(string=html_report), download_filename=case_obj['display_name']+'_'+datetime.datetime.now().strftime(\"%Y-%m-%d\")+'_scout.pdf')\n```"
            ],
            [
                133,
                "python",
                "TaskInstance.are_dependencies_met",
                "```python\ndef are_dependencies_met(\n            self,\n            dep_context=None,\n            session=None,\n            verbose=False):\n        \"\"\"\n        Returns whether or not all the conditions are met for this task instance to be run\n        given the context for the dependencies (e.g. a task instance being force run from\n        the UI will ignore some dependencies).\n\n        :param dep_context: The execution context that determines the dependencies that\n            should be evaluated.\n        :type dep_context: DepContext\n        :param session: database session\n        :type session: sqlalchemy.orm.session.Session\n        :param verbose: whether log details on failed dependencies on\n            info or debug log level\n        :type verbose: bool\n        \"\"\"\n        dep_context = dep_context or DepContext()\n        failed = False\n        verbose_aware_logger = self.log.info if verbose else self.log.debug\n        for dep_status in self.get_failed_dep_statuses(\n                dep_context=dep_context,\n                session=session):\n            failed = True\n\n            verbose_aware_logger(\n                \"Dependencies not met for %s, dependency '%s' FAILED: %s\",\n                self, dep_status.dep_name, dep_status.reason\n            )\n\n        if failed:\n            return False\n\n        verbose_aware_logger(\"Dependencies all met for %s\", self)\n        return True\n```"
            ],
            [
                852,
                "python",
                "map_method",
                "```python\ndef map_method(method,object_list,*argseq,**kw):\n    \"\"\"map_method(method,object_list,*args,**kw) -> list\n\n    Return a list of the results of applying the methods to the items of the\n    argument sequence(s).  If more than one sequence is given, the method is\n    called with an argument list consisting of the corresponding item of each\n    sequence. All sequences must be of the same length.\n\n    Keyword arguments are passed verbatim to all objects called.\n\n    This is Python code, so it's not nearly as fast as the builtin map().\"\"\"\n\n    out_list = []\n    idx = 0\n    for object in object_list:\n        try:\n            handler = getattr(object, method)\n        except AttributeError:\n            out_list.append(None)\n        else:\n            if argseq:\n                args = map(lambda lst:lst[idx],argseq)\n                #print 'ob',object,'hand',handler,'ar',args # dbg\n                out_list.append(handler(args,**kw))\n            else:\n                out_list.append(handler(**kw))\n        idx += 1\n    return out_list\n```"
            ],
            [
                293,
                "python",
                "Gerrit.parse_reviews",
                "```python\ndef parse_reviews(raw_data):\n        \"\"\"Parse a Gerrit reviews list.\"\"\"\n\n        # Join isolated reviews in JSON in array for parsing\n        items_raw = \"[\" + raw_data.replace(\"\\n\", \",\") + \"]\"\n        items_raw = items_raw.replace(\",]\", \"]\")\n        items = json.loads(items_raw)\n        reviews = []\n\n        for item in items:\n            if 'project' in item.keys():\n                reviews.append(item)\n\n        return reviews\n```"
            ],
            [
                396,
                "python",
                "start",
                "```python\ndef start(dashboards, once, secrets):\n    \"\"\"Display a dashboard from the dashboard file(s) provided in the DASHBOARDS\n       Paths and/or URLs for dashboards (URLs must secrets with http or https)\n    \"\"\"\n\n    if secrets is None:\n        secrets = os.path.join(os.path.expanduser(\"~\"), \"/.doodledashboard/secrets\")\n\n    try:\n        loaded_secrets = try_read_secrets_file(secrets)\n    except InvalidSecretsException as err:\n        click.echo(get_error_message(err, default=\"Secrets file is invalid\"), err=True)\n        raise click.Abort()\n\n    read_configs = [\"\"\"\n    dashboard:\n      display:\n        type: console\n    \"\"\"]\n    for dashboard_file in dashboards:\n        read_configs.append(read_file(dashboard_file))\n\n    dashboard_config = DashboardConfigReader(initialise_component_loader(), loaded_secrets)\n\n    try:\n        dashboard = read_dashboard_from_config(dashboard_config, read_configs)\n    except YAMLError as err:\n        click.echo(get_error_message(err, default=\"Dashboard configuration is invalid\"), err=True)\n        raise click.Abort()\n\n    try:\n        DashboardValidator().validate(dashboard)\n    except ValidationException as err:\n        click.echo(get_error_message(err, default=\"Dashboard configuration is invalid\"), err=True)\n        raise click.Abort()\n\n    explain_dashboard(dashboard)\n\n    click.echo(\"Dashboard running...\")\n\n    while True:\n        try:\n            DashboardRunner(dashboard).cycle()\n        except SecretNotFound as err:\n            click.echo(get_error_message(err, default=\"Datafeed didn't have required secret\"), err=True)\n            raise click.Abort()\n\n        if once:\n            break\n```"
            ],
            [
                14,
                "python",
                "OAuth2RequestValidator.authenticate_client",
                "```python\ndef authenticate_client(self, request, *args, **kwargs):\n        \"\"\"Authenticate itself in other means.\n\n        Other means means is described in `Section 3.2.1`_.\n\n        .. _`Section 3.2.1`: http://tools.ietf.org/html/rfc6749#section-3.2.1\n        \"\"\"\n        client_id, client_secret = self._get_client_creds_from_request(request)\n        log.debug('Authenticate client %r', client_id)\n\n        client = self._clientgetter(client_id)\n        if not client:\n            log.debug('Authenticate client failed, client not found.')\n            return False\n\n        request.client = client\n\n        # http://tools.ietf.org/html/rfc6749#section-2\n        # The client MAY omit the parameter if the client secret is an empty string.\n        if hasattr(client, 'client_secret') and client.client_secret != client_secret:\n            log.debug('Authenticate client failed, secret not match.')\n            return False\n\n        log.debug('Authenticate client success.')\n        return True\n```"
            ],
            [
                195,
                "python",
                "Trajectory.f_get_parameters",
                "```python\ndef f_get_parameters(self, fast_access=False, copy=True):\n        \"\"\" Returns a dictionary containing the full parameter names as keys and the parameters\n         or the parameter data items as values.\n\n\n        :param fast_access:\n\n            Determines whether the parameter objects or their values are returned\n            in the dictionary.\n\n        :param copy:\n\n            Whether the original dictionary or a shallow copy is returned.\n            If you want the real dictionary please do not modify it at all!\n            Not Copying and fast access do not work at the same time! Raises ValueError\n            if fast access is true and copy false.\n\n        :return: Dictionary containing the parameters.\n\n        :raises: ValueError\n\n        \"\"\"\n        return self._return_item_dictionary(self._parameters, fast_access, copy)\n```"
            ],
            [
                781,
                "python",
                "load_config",
                "```python\ndef load_config(under_test=False, custom=None):  # pragma: no cover\n    \"\"\"\n    Load the configuration.\n\n    :param under_test:\n        Tell us if we only have to load the configuration file (True)\n        or load the configuration file and initate the output directory\n        if it does not exist (False).\n    :type under_test: bool\n\n    :param custom:\n        A dict with the configuration index (from .PyFunceble.yaml) to update.\n    :type custom: dict\n\n    .. warning::\n        If :code:`custom` is given, the given :code:`dict` overwrite\n        the last value of the given configuration indexes.\n    \"\"\"\n\n    if \"config_loaded\" not in INTERN:\n        # The configuration was not already loaded.\n\n        # We load and download the different configuration file if they are non\n        # existant.\n        Load(CURRENT_DIRECTORY)\n\n        if not under_test:\n            # If we are not under test which means that we want to save informations,\n            # we initiate the directory structure.\n            DirectoryStructure()\n\n        # We save that the configuration was loaded.\n        INTERN.update({\"config_loaded\": True})\n\n        if custom and isinstance(custom, dict):\n            # The given configuration is not None or empty.\n            # and\n            # It is a dict.\n\n            # We update the configuration index.\n            CONFIGURATION.update(custom)\n```"
            ],
            [
                253,
                "python",
                "FourDirectionalMoveController.registerEventHandlers",
                "```python\ndef registerEventHandlers(self):\n        \"\"\"\n        Registers needed keybinds and schedules the :py:meth:`update` Method.\n        \n        You can control what keybinds are used via the :confval:`controls.controls.forward` etc. Configuration Values.\n        \"\"\"\n        # Forward\n        self.peng.keybinds.add(self.peng.cfg[\"controls.controls.forward\"],\"peng3d:actor.%s.player.controls.forward\"%self.actor.uuid,self.on_fwd_down,False)\n        # Backward\n        self.peng.keybinds.add(self.peng.cfg[\"controls.controls.backward\"],\"peng3d:actor.%s.player.controls.backward\"%self.actor.uuid,self.on_bwd_down,False)\n        # Strafe Left\n        self.peng.keybinds.add(self.peng.cfg[\"controls.controls.strafeleft\"],\"peng3d:actor.%s.player.controls.strafeleft\"%self.actor.uuid,self.on_left_down,False)\n        # Strafe Right\n        self.peng.keybinds.add(self.peng.cfg[\"controls.controls.straferight\"],\"peng3d:actor.%s.player.controls.straferight\"%self.actor.uuid,self.on_right_down,False)\n        pyglet.clock.schedule_interval(self.update,1.0/60)\n```"
            ],
            [
                374,
                "python",
                "FrameIdentifierVisitor.visit_Name",
                "```python\ndef visit_Name(self, node):\n        \"\"\"All assignments to names go through this function.\"\"\"\n        if node.ctx == 'store':\n            self.identifiers.declared_locally.add(node.name)\n        elif node.ctx == 'param':\n            self.identifiers.declared_parameter.add(node.name)\n        elif node.ctx == 'load' and not \\\n             self.identifiers.is_declared(node.name):\n            self.identifiers.undeclared.add(node.name)\n```"
            ],
            [
                493,
                "python",
                "Client._call",
                "```python\ndef _call(self, method, params=None, request_id=None):\n        \"\"\" Calls the JSON-RPC endpoint. \"\"\"\n        params = params or []\n\n        # Determines which 'id' value to use and increment the counter associated with the current\n        # client instance if applicable.\n        rid = request_id or self._id_counter\n        if request_id is None:\n            self._id_counter += 1\n\n        # Prepares the payload and the headers that will be used to forge the request.\n        payload = {'jsonrpc': '2.0', 'method': method, 'params': params, 'id': rid}\n        headers = {'Content-Type': 'application/json'}\n        scheme = 'https' if self.tls else 'http'\n        url = '{}://{}:{}'.format(scheme, self.host, self.port)\n\n        # Calls the JSON-RPC endpoint!\n        try:\n            response = self.session.post(url, headers=headers, data=json.dumps(payload))\n            response.raise_for_status()\n        except HTTPError:\n            raise TransportError(\n                'Got unsuccessful response from server (status code: {})'.format(\n                    response.status_code),\n                response=response)\n\n        # Ensures the response body can be deserialized to JSON.\n        try:\n            response_data = response.json()\n        except ValueError as e:\n            raise ProtocolError(\n                'Unable to deserialize response body: {}'.format(e), response=response)\n\n        # Properly handles potential errors.\n        if response_data.get('error'):\n            code = response_data['error'].get('code', '')\n            message = response_data['error'].get('message', '')\n            raise ProtocolError(\n                'Error[{}] {}'.format(code, message), response=response, data=response_data)\n        elif 'result' not in response_data:\n            raise ProtocolError(\n                'Response is empty (result field is missing)', response=response,\n                data=response_data)\n\n        return response_data['result']\n```"
            ],
            [
                947,
                "python",
                "Client._update_secrets",
                "```python\ndef _update_secrets(self):\n        '''update secrets will update metadata needed for pull and search\n        '''\n        self.token = self._required_get_and_update('SREGISTRY_GITLAB_TOKEN')\n        self.headers[\"Private-Token\"] = self.token\n```"
            ]
        ]
    },
    "FuncNameTest-python MRR (bs=1,000)": 0.019674386493089304,
    "Examples-Validation-python": {
        "_type": "table",
        "columns": [
            "Rank",
            "Language",
            "Query",
            "Code"
        ],
        "data": [
            [
                304,
                "python",
                "describe",
                "```python\ndef describe(lcdict, returndesc=False, offsetwith=None):\n    '''This describes the light curve object and columns present.\n\n    Parameters\n    ----------\n\n    lcdict : dict\n        The input lcdict to parse for column and metadata info.\n\n    returndesc : bool\n        If True, returns the description string as an str instead of just\n        printing it to stdout.\n\n    offsetwith : str\n        This is a character to offset the output description lines by. This is\n        useful to add comment characters like '#' to the output description\n        lines.\n\n    Returns\n    -------\n\n    str or None\n        If returndesc is True, returns the description lines as a str, otherwise\n        returns nothing.\n\n    '''\n\n    # transparently read LCC CSV format description\n    if 'lcformat' in lcdict and 'lcc-csv' in lcdict['lcformat'].lower():\n        return describe_lcc_csv(lcdict, returndesc=returndesc)\n\n\n    # figure out the columndefs part of the header string\n    columndefs = []\n\n    for colind, column in enumerate(lcdict['columns']):\n\n        if '_' in column:\n            colkey, colap = column.split('_')\n            coldesc = COLUMNDEFS[colkey][0] % colap\n        else:\n            coldesc = COLUMNDEFS[column][0]\n\n        columndefstr = '%03i - %s - %s' % (colind,\n                                           column,\n                                           coldesc)\n        columndefs.append(columndefstr)\n\n    columndefs = '\\n'.join(columndefs)\n\n    # figure out the filterdefs\n    filterdefs = []\n\n    for row in lcdict['filters']:\n\n        filterid, filtername, filterdesc = row\n        filterdefstr = '%s - %s - %s' % (filterid,\n                                         filtername,\n                                         filterdesc)\n        filterdefs.append(filterdefstr)\n\n    filterdefs = '\\n'.join(filterdefs)\n\n\n    # figure out the apertures\n    aperturedefs = []\n    for key in sorted(lcdict['lcapertures'].keys()):\n        aperturedefstr = '%s - %.2f px' % (key, lcdict['lcapertures'][key])\n        aperturedefs.append(aperturedefstr)\n\n    aperturedefs = '\\n'.join(aperturedefs)\n\n    # now fill in the description\n    description = DESCTEMPLATE.format(\n        objectid=lcdict['objectid'],\n        hatid=lcdict['objectinfo']['hatid'],\n        twomassid=lcdict['objectinfo']['twomassid'].strip(),\n        ra=lcdict['objectinfo']['ra'],\n        decl=lcdict['objectinfo']['decl'],\n        pmra=lcdict['objectinfo']['pmra'],\n        pmra_err=lcdict['objectinfo']['pmra_err'],\n        pmdecl=lcdict['objectinfo']['pmdecl'],\n        pmdecl_err=lcdict['objectinfo']['pmdecl_err'],\n        jmag=lcdict['objectinfo']['jmag'],\n        hmag=lcdict['objectinfo']['hmag'],\n        kmag=lcdict['objectinfo']['kmag'],\n        bmag=lcdict['objectinfo']['bmag'],\n        vmag=lcdict['objectinfo']['vmag'],\n        sdssg=lcdict['objectinfo']['sdssg'],\n        sdssr=lcdict['objectinfo']['sdssr'],\n        sdssi=lcdict['objectinfo']['sdssi'],\n        ndet=lcdict['objectinfo']['ndet'],\n        lcsortcol=lcdict['lcsortcol'],\n        lcbestaperture=json.dumps(lcdict['lcbestaperture'],ensure_ascii=True),\n        network=lcdict['objectinfo']['network'],\n        stations=lcdict['objectinfo']['stations'],\n        lastupdated=lcdict['lastupdated'],\n        datarelease=lcdict['datarelease'],\n        lcversion=lcdict['lcversion'],\n        lcserver=lcdict['lcserver'],\n        comment=lcdict['comment'],\n        lcfiltersql=(lcdict['lcfiltersql'] if 'lcfiltersql' in lcdict else ''),\n        lcnormcols=(lcdict['lcnormcols'] if 'lcnormcols' in lcdict else ''),\n        filterdefs=filterdefs,\n        columndefs=columndefs,\n        aperturedefs=aperturedefs\n    )\n\n    if offsetwith is not None:\n        description = textwrap.indent(\n            description,\n            '%s ' % offsetwith,\n            lambda line: True\n        )\n        print(description)\n    else:\n        print(description)\n\n    if returndesc:\n        return description\n```"
            ],
            [
                233,
                "python",
                "Client.append_stream",
                "```python\ndef append_stream(self, destination, *, offset=0):\n        \"\"\"\n        Create stream for append (write) data to `destination` file.\n\n        :param destination: destination path of file on server side\n        :type destination: :py:class:`str` or :py:class:`pathlib.PurePosixPath`\n\n        :param offset: byte offset for stream start position\n        :type offset: :py:class:`int`\n\n        :rtype: :py:class:`aioftp.DataConnectionThrottleStreamIO`\n        \"\"\"\n        return self.get_stream(\n            \"APPE \" + str(destination),\n            \"1xx\",\n            offset=offset,\n        )\n```"
            ],
            [
                123,
                "python",
                "Manager.get_droplet_snapshots",
                "```python\ndef get_droplet_snapshots(self):\n        \"\"\"\n            This method returns a list of all Snapshots based on Droplets.\n        \"\"\"\n        data = self.get_data(\"snapshots?resource_type=droplet\")\n        return [\n            Snapshot(token=self.token, **snapshot)\n            for snapshot in data['snapshots']\n        ]\n```"
            ],
            [
                483,
                "python",
                "prepare_upload_bundle",
                "```python\ndef prepare_upload_bundle(name, data):\n    \"\"\"GeoServer's REST API uses ZIP archives as containers for file formats such\n    as Shapefile and WorldImage which include several 'boxcar' files alongside\n    the main data.  In such archives, GeoServer assumes that all of the relevant\n    files will have the same base name and appropriate extensions, and live in\n    the root of the ZIP archive.  This method produces a zip file that matches\n    these expectations, based on a basename, and a dict of extensions to paths or\n    file-like objects. The client code is responsible for deleting the zip\n    archive when it's done.\"\"\"\n    fd, path = mkstemp()\n    zip_file = ZipFile(path, 'w')\n    for ext, stream in data.items():\n        fname = \"%s.%s\" % (name, ext)\n        if (isinstance(stream, basestring)):\n            zip_file.write(stream, fname)\n        else:\n            zip_file.writestr(fname, stream.read())\n    zip_file.close()\n    os.close(fd)\n    return path\n```"
            ],
            [
                717,
                "python",
                "IndexBuilder.freeze",
                "```python\ndef freeze(self):\n        \"\"\"Create a usable data structure for serializing.\"\"\"\n        data = super(IndexBuilder, self).freeze()\n        try:\n            # Sphinx >= 1.5 format\n            # Due to changes from github.com/sphinx-doc/sphinx/pull/2454\n            base_file_names = data['docnames']\n        except KeyError:\n            # Sphinx < 1.5 format\n            base_file_names = data['filenames']\n\n        store = {}\n        c = itertools.count()\n        for prefix, items in iteritems(data['objects']):\n            for name, (index, typeindex, _, shortanchor) in iteritems(items):\n                objtype = data['objtypes'][typeindex]\n                if objtype.startswith('cpp:'):\n                    split =  name.rsplit('::', 1)\n                    if len(split) != 2:\n                        warnings.warn(\"What's up with %s?\" % str((prefix, name, objtype)))\n                        continue\n                    prefix, name = split\n                    last_prefix = prefix.split('::')[-1]\n                else:\n                    last_prefix = prefix.split('.')[-1]\n\n                store[next(c)] = {\n                    'filename': base_file_names[index],\n                    'objtype': objtype,\n                    'prefix': prefix,\n                    'last_prefix': last_prefix,\n                    'name': name,\n                    'shortanchor': shortanchor,\n                }\n\n        data.update({'store': store})\n        return data\n```"
            ],
            [
                527,
                "python",
                "Draw.bezier",
                "```python\ndef bezier(self, points):\n        \"\"\"Draw a Bezier-curve.\n\n        :param points: ex.) ((5, 5), (6, 6), (7, 7))\n        :type points: list\n        \"\"\"\n        coordinates = pgmagick.CoordinateList()\n        for point in points:\n            x, y = float(point[0]), float(point[1])\n            coordinates.append(pgmagick.Coordinate(x, y))\n        self.drawer.append(pgmagick.DrawableBezier(coordinates))\n```"
            ],
            [
                497,
                "python",
                "DeleteFile",
                "```python\ndef DeleteFile(target_filename):\n    '''\n    Deletes the given local filename.\n\n    .. note:: If file doesn't exist this method has no effect.\n\n    :param unicode target_filename:\n        A local filename\n\n    :raises NotImplementedForRemotePathError:\n        If trying to delete a non-local path\n\n    :raises FileOnlyActionError:\n        Raised when filename refers to a directory.\n    '''\n    _AssertIsLocal(target_filename)\n\n    try:\n        if IsLink(target_filename):\n            DeleteLink(target_filename)\n        elif IsFile(target_filename):\n            os.remove(target_filename)\n        elif IsDir(target_filename):\n            from ._exceptions import FileOnlyActionError\n            raise FileOnlyActionError(target_filename)\n    except Exception as e:\n        reraise(e, 'While executing filesystem.DeleteFile(%s)' % (target_filename))\n```"
            ],
            [
                931,
                "python",
                "WechatExt.get_group_list",
                "```python\ndef get_group_list(self):\n        \"\"\"\n        \u83b7\u53d6\u5206\u7ec4\u5217\u8868\n\n        \u8fd4\u56deJSON\u793a\u4f8b::\n\n            {\n                \"groups\": [\n                    {\n                        \"cnt\": 8,\n                        \"id\": 0,\n                        \"name\": \"\u672a\u5206\u7ec4\"\n                    },\n                    {\n                        \"cnt\": 0,\n                        \"id\": 1,\n                        \"name\": \"\u9ed1\u540d\u5355\"\n                    },\n                    {\n                        \"cnt\": 0,\n                        \"id\": 2,\n                        \"name\": \"\u661f\u6807\u7ec4\"\n                    }\n                ]\n            }\n\n        :return: \u8fd4\u56de\u7684 JSON \u6570\u636e\n        :raises NeedLoginError: \u64cd\u4f5c\u672a\u6267\u884c\u6210\u529f, \u9700\u8981\u518d\u6b21\u5c1d\u8bd5\u767b\u5f55, \u5f02\u5e38\u5185\u5bb9\u4e3a\u670d\u52a1\u5668\u8fd4\u56de\u7684\u9519\u8bef\u6570\u636e\n        \"\"\"\n        url = 'https://mp.weixin.qq.com/cgi-bin/contactmanage?t=user/index&pagesize=10&pageidx=0&type=0&groupid=0&lang=zh_CN&f=json&token={token}'.format(\n            token=self.__token,\n        )\n        headers = {\n            'x-requested-with': 'XMLHttpRequest',\n            'referer': 'https://mp.weixin.qq.com/cgi-bin/contactmanage?t=user/index&pagesize=10&pageidx=0&type=0&groupid=0&lang=zh_CN&token='.format(\n                token=self.__token,\n            ),\n            'cookie': self.__cookies,\n        }\n        r = requests.get(url, headers=headers)\n\n        try:\n            message = json.loads(r.text)['group_list']\n        except (KeyError, ValueError):\n            raise NeedLoginError(r.text)\n\n        return message\n```"
            ],
            [
                994,
                "python",
                "activate",
                "```python\ndef activate(paths, skip_local, skip_shared):\n    '''Activate an environment'''\n\n\n    if not paths:\n        ctx = click.get_current_context()\n        if cpenv.get_active_env():\n            ctx.invoke(info)\n            return\n\n        click.echo(ctx.get_help())\n        examples = (\n            '\\nExamples: \\n'\n            '    cpenv activate my_env\\n'\n            '    cpenv activate ./relative/path/to/my_env\\n'\n            '    cpenv activate my_env my_module\\n'\n        )\n        click.echo(examples)\n        return\n\n    if skip_local:\n        cpenv.module_resolvers.remove(cpenv.resolver.module_resolver)\n        cpenv.module_resolvers.remove(cpenv.resolver.active_env_module_resolver)\n\n    if skip_shared:\n        cpenv.module_resolvers.remove(cpenv.resolver.modules_path_resolver)\n\n    try:\n        r = cpenv.resolve(*paths)\n    except cpenv.ResolveError as e:\n        click.echo('\\n' + str(e))\n        return\n\n    resolved = set(r.resolved)\n    active_modules = set()\n    env = cpenv.get_active_env()\n    if env:\n        active_modules.add(env)\n    active_modules.update(cpenv.get_active_modules())\n\n    new_modules = resolved - active_modules\n    old_modules = active_modules & resolved\n\n    if old_modules and not new_modules:\n        click.echo(\n            '\\nModules already active: '\n            + bold(' '.join([obj.name for obj in old_modules]))\n        )\n        return\n\n    if env and contains_env(new_modules):\n        click.echo('\\nUse bold(exit) to leave your active environment first.')\n        return\n\n    click.echo('\\nResolved the following modules...')\n    click.echo(format_objects(r.resolved))\n    r.activate()\n    click.echo(blue('\\nLaunching subshell...'))\n\n    modules = sorted(resolved | active_modules, key=_type_and_name)\n    prompt = ':'.join([obj.name for obj in modules])\n    shell.launch(prompt)\n```"
            ],
            [
                813,
                "python",
                "create",
                "```python\ndef create(name_or_path, config):\n    '''Create a new environment.'''\n\n    if not name_or_path:\n        ctx = click.get_current_context()\n        click.echo(ctx.get_help())\n        examples = (\n            '\\nExamples:\\n'\n            '    cpenv create my_env\\n'\n            '    cpenv create ./relative/path/to/my_env\\n'\n            '    cpenv create my_env --config ./relative/path/to/config\\n'\n            '    cpenv create my_env --config git@github.com:user/config.git\\n'\n        )\n        click.echo(examples)\n        return\n\n    click.echo(\n        blue('Creating a new virtual environment ' + name_or_path)\n    )\n    try:\n        env = cpenv.create(name_or_path, config)\n    except Exception as e:\n        click.echo(bold_red('FAILED TO CREATE ENVIRONMENT!'))\n        click.echo(e)\n    else:\n        click.echo(bold_green('Successfully created environment!'))\n    click.echo(blue('Launching subshell'))\n\n    cpenv.activate(env)\n    shell.launch(env.name)\n```"
            ],
            [
                317,
                "python",
                "Parser.p_pkg_down_value_1",
                "```python\ndef p_pkg_down_value_1(self, p):\n        \"\"\"pkg_down_value : LINE \"\"\"\n        if six.PY2:\n            p[0] = p[1].decode(encoding='utf-8')\n        else:\n            p[0] = p[1]\n```"
            ],
            [
                81,
                "python",
                "get_type",
                "```python\nasync def get_type(media, path=None):\n    \"\"\"\n    Parameters\n    ----------\n    media : file object\n        A file object of the image\n    path : str, optional\n        The path to the file\n\n    Returns\n    -------\n    str\n        The mimetype of the media\n    str\n        The category of the media on Twitter\n    \"\"\"\n    if magic:\n        if not media:\n            raise TypeError(\"Media data is empty\")\n\n        _logger.debug(\"guessing mimetype using magic\")\n        media_type = mime.from_buffer(media[:1024])\n    else:\n        media_type = None\n        if path:\n            _logger.debug(\"guessing mimetype using built-in module\")\n            media_type = mime.guess_type(path)[0]\n\n        if media_type is None:\n            msg = (\"Could not guess the mimetype of the media.\\n\"\n                   \"Please consider installing python-magic\\n\"\n                   \"(pip3 install peony-twitter[magic])\")\n            raise RuntimeError(msg)\n\n    return media_type\n```"
            ],
            [
                46,
                "python",
                "AlignmentPropertyMatrix.bundle",
                "```python\ndef bundle(self, reset=False, shallow=False): # Copies the original matrix (Use lots of memory)\r\n        \"\"\"\r\n        Returns ``AlignmentPropertyMatrix`` object in which loci are bundled using grouping information.\r\n\r\n        :param reset: whether to reset the values at the loci\r\n        :param shallow: whether to copy all the meta data\r\n        \"\"\"\r\n        if self.finalized:\r\n            # if self.num_groups > 0:\r\n            if self.groups is not None and self.gname is not None:\r\n                grp_conv_mat = lil_matrix((self.num_loci, self.num_groups))\r\n                for i in xrange(self.num_groups):\r\n                    grp_conv_mat[self.groups[i], i] = 1.0\r\n                grp_align = Sparse3DMatrix.__mul__(self, grp_conv_mat) # The core of the bundling\r\n                grp_align.num_loci = self.num_groups\r\n                grp_align.num_haplotypes = self.num_haplotypes\r\n                grp_align.num_reads = self.num_reads\r\n                grp_align.shape = (grp_align.num_loci, grp_align.num_haplotypes, grp_align.num_reads)\r\n                if not shallow:\r\n                    grp_align.lname = copy.copy(self.gname)\r\n                    grp_align.hname = self.hname\r\n                    grp_align.rname = copy.copy(self.rname)\r\n                    grp_align.lid   = dict(zip(grp_align.lname, np.arange(grp_align.num_loci)))\r\n                    grp_align.rid   = copy.copy(self.rid)\r\n                if reset:\r\n                    grp_align.reset()\r\n                return grp_align\r\n            else:\r\n                raise RuntimeError('No group information is available for bundling.')\r\n        else:\r\n            raise RuntimeError('The matrix is not finalized.')\n```"
            ],
            [
                6,
                "python",
                "Townsend_Hales",
                "```python\ndef Townsend_Hales(T, Tc, Vc, omega):\n    r'''Calculates saturation liquid density, using the Townsend and Hales\n    CSP method as modified from the original Riedel equation. Uses\n    chemical critical volume and temperature, as well as acentric factor\n\n    The density of a liquid is given by:\n\n    .. math::\n        Vs = V_c/\\left(1+0.85(1-T_r)+(1.692+0.986\\omega)(1-T_r)^{1/3}\\right)\n\n    Parameters\n    ----------\n    T : float\n        Temperature of fluid [K]\n    Tc : float\n        Critical temperature of fluid [K]\n    Vc : float\n        Critical volume of fluid [m^3/mol]\n    omega : float\n        Acentric factor for fluid, [-]\n\n    Returns\n    -------\n    Vs : float\n        Saturation liquid volume, [m^3/mol]\n\n    Notes\n    -----\n    The requirement for critical volume and acentric factor requires all data.\n\n    Examples\n    --------\n    >>> Townsend_Hales(300, 647.14, 55.95E-6, 0.3449)\n    1.8007361992619923e-05\n\n    References\n    ----------\n    .. [1] Hales, J. L, and R Townsend. \"Liquid Densities from 293 to 490 K of\n       Nine Aromatic Hydrocarbons.\" The Journal of Chemical Thermodynamics\n       4, no. 5 (1972): 763-72. doi:10.1016/0021-9614(72)90050-X\n    '''\n    Tr = T/Tc\n    return Vc/(1 + 0.85*(1-Tr) + (1.692 + 0.986*omega)*(1-Tr)**(1/3.))\n```"
            ],
            [
                284,
                "python",
                "_nbytes",
                "```python\ndef _nbytes(buf):\n    \"\"\"Return byte-size of a memoryview or buffer.\"\"\"\n    if isinstance(buf, memoryview):\n        if PY3:\n            # py3 introduces nbytes attribute\n            return buf.nbytes\n        else:\n            # compute nbytes on py2\n            size = buf.itemsize\n            for dim in buf.shape:\n                size *= dim\n            return size\n    else:\n        # not a memoryview, raw bytes/ py2 buffer\n        return len(buf)\n```"
            ],
            [
                357,
                "python",
                "update",
                "```python\ndef update(x, **entries):\n    \"\"\"Update a dict, or an object with slots, according to `entries` dict.\n\n    >>> update({'a': 1}, a=10, b=20)\n    {'a': 10, 'b': 20}\n    >>> update(Struct(a=1), a=10, b=20)\n    Struct(a=10, b=20)\n    \"\"\"\n    if isinstance(x, dict):\n        x.update(entries)\n    else:\n        x.__dict__.update(entries)\n    return x\n```"
            ],
            [
                25,
                "python",
                "Encoder.getDecoderOutputFieldTypes",
                "```python\ndef getDecoderOutputFieldTypes(self):\n    \"\"\"\n    Returns a sequence of field types corresponding to the elements in the\n    decoded output field array.  The types are defined by\n    :class:`~nupic.data.field_meta.FieldMetaType`.\n\n    :return: list of :class:`~nupic.data.field_meta.FieldMetaType` objects\n    \"\"\"\n    if hasattr(self, '_flattenedFieldTypeList') and \\\n          self._flattenedFieldTypeList is not None:\n      return self._flattenedFieldTypeList\n\n    fieldTypes = []\n\n    # NOTE: we take care of the composites, but leaf encoders must override\n    #       this method and return a list of one field_meta.FieldMetaType.XXXX\n    #       element corresponding to the encoder's decoder output field type\n    for (name, encoder, offset) in self.encoders:\n      subTypes = encoder.getDecoderOutputFieldTypes()\n      fieldTypes.extend(subTypes)\n\n    self._flattenedFieldTypeList = fieldTypes\n    return fieldTypes\n```"
            ],
            [
                436,
                "python",
                "Instruction.parse_operand",
                "```python\ndef parse_operand(self, buf):\n        \"\"\" Parses an operand from buf\n\n            :param buf: a buffer\n            :type buf: iterator/generator/string\n        \"\"\"\n        buf = iter(buf)\n        try:\n            operand = 0\n            for _ in range(self.operand_size):\n                operand <<= 8\n                operand |= next(buf)\n            self._operand = operand\n        except StopIteration:\n            raise ParseError(\"Not enough data for decoding\")\n```"
            ],
            [
                11,
                "python",
                "_BaseFile._updateType",
                "```python\ndef _updateType(self):\n        \"\"\"Make sure that the class behaves like the data structure that it\n        is, so that we don't get a ListFile trying to represent a dict.\"\"\"\n        data = self._data()\n        # Change type if needed\n        if isinstance(data, dict) and isinstance(self, ListFile):\n            self.__class__ = DictFile\n        elif isinstance(data, list) and isinstance(self, DictFile):\n            self.__class__ = ListFile\n```"
            ],
            [
                111,
                "python",
                "LsstLatexDoc._parse_documentclass",
                "```python\ndef _parse_documentclass(self):\n        \"\"\"Parse documentclass options.\n\n        Sets the the ``_document_options`` attribute.\n        \"\"\"\n        command = LatexCommand(\n            'documentclass',\n            {'name': 'options', 'required': False, 'bracket': '['},\n            {'name': 'class_name', 'required': True, 'bracket': '{'})\n        try:\n            parsed = next(command.parse(self._tex))\n        except StopIteration:\n            self._logger.warning('lsstdoc has no documentclass')\n            self._document_options = []\n\n        try:\n            content = parsed['options']\n            self._document_options = [opt.strip()\n                                      for opt in content.split(',')]\n        except KeyError:\n            self._logger.warning('lsstdoc has no documentclass options')\n            self._document_options = []\n```"
            ],
            [
                307,
                "python",
                "reshape_for_broadcasting",
                "```python\ndef reshape_for_broadcasting(source, target):\n    \"\"\"Reshapes a tensor (source) to have the correct shape and dtype of the target\n    before broadcasting it with MPI.\n    \"\"\"\n    dim = len(target.get_shape())\n    shape = ([1] * (dim - 1)) + [-1]\n    return tf.reshape(tf.cast(source, target.dtype), shape)\n```"
            ],
            [
                343,
                "python",
                "PathFilters.select_by_pattern_in_abspath",
                "```python\ndef select_by_pattern_in_abspath(self,\n                                     pattern,\n                                     recursive=True,\n                                     case_sensitive=False):\n        \"\"\"\n        Select file path by text pattern in absolute path.\n\n        **\u4e2d\u6587\u6587\u6863**\n\n        \u9009\u62e9\u7edd\u5bf9\u8def\u5f84\u4e2d\u5305\u542b\u6307\u5b9a\u5b50\u5b57\u7b26\u4e32\u7684\u6587\u4ef6\u3002\n        \"\"\"\n        if case_sensitive:\n            def filters(p):\n                return pattern in p.abspath\n        else:\n            pattern = pattern.lower()\n\n            def filters(p):\n                return pattern in p.abspath.lower()\n\n        return self.select_file(filters, recursive)\n```"
            ],
            [
                251,
                "python",
                "Reaction._update_awareness",
                "```python\ndef _update_awareness(self):\n        \"\"\"Make sure all metabolites and genes that are associated with\n        this reaction are aware of it.\n\n        \"\"\"\n        for x in self._metabolites:\n            x._reaction.add(self)\n        for x in self._genes:\n            x._reaction.add(self)\n```"
            ],
            [
                708,
                "python",
                "REST.conference_list",
                "```python\ndef conference_list(self, call_params):\n        \"\"\"REST Conference List Helper\n        \"\"\"\n        path = '/' + self.api_version + '/ConferenceList/'\n        method = 'POST'\n        return self.request(path, method, call_params)\n```"
            ],
            [
                602,
                "python",
                "Timer.stop",
                "```python\ndef stop(self) -> float:\n        \"\"\"\n        Stop the timer\n\n        Returns:\n            The time the timer was stopped\n        \"\"\"\n        self.stop_time = time.time()\n        return self.stop_time - self.start_time - self.offset\n```"
            ],
            [
                752,
                "python",
                "X86Cpu.ADD",
                "```python\ndef ADD(cpu, dest, src):\n        \"\"\"\n        Add.\n\n        Adds the first operand (destination operand) and the second operand (source operand)\n        and stores the result in the destination operand. When an immediate value is used as\n        an operand, it is sign-extended to the length of the destination operand format.\n        The ADD instruction does not distinguish between signed or unsigned operands. Instead,\n        the processor evaluates the result for both data types and sets the OF and CF flags to\n        indicate a carry in the signed or unsigned result, respectively. The SF flag indicates\n        the sign of the signed result::\n\n                DEST  =  DEST + SRC;\n\n        :param cpu: current CPU.\n        :param dest: destination operand.\n        :param src: source operand.\n        \"\"\"\n        cpu._ADD(dest, src, carry=False)\n```"
            ],
            [
                132,
                "python",
                "DebugSatchel.list_server_specs",
                "```python\ndef list_server_specs(self, cpu=1, memory=1, hdd=1):\n        \"\"\"\n        Displays a list of common servers characteristics, like number\n        of CPU cores, amount of memory and hard drive capacity.\n        \"\"\"\n        r = self.local_renderer\n\n        cpu = int(cpu)\n        memory = int(memory)\n        hdd = int(hdd)\n\n        # CPU\n        if cpu:\n            cmd = 'cat /proc/cpuinfo | grep -i \"model name\"'\n            ret = r.run(cmd)\n            matches = map(str.strip, re.findall(r'model name\\s+:\\s*([^\\n]+)', ret, re.DOTALL|re.I))\n            cores = {}\n            for match in matches:\n                cores.setdefault(match, 0)\n                cores[match] += 1\n\n        # Memory\n        if memory:\n            cmd = 'dmidecode --type 17'\n            ret = r.sudo(cmd)\n            #print repr(ret)\n            matches = re.findall(r'Memory\\s+Device\\r\\n(.*?)(?:\\r\\n\\r\\n|$)', ret, flags=re.DOTALL|re.I)\n            #print len(matches)\n            #print matches[0]\n            memory_slot_dicts = []\n            for match in matches:\n                attrs = dict([(_a.strip(), _b.strip()) for _a, _b in re.findall(r'^([^:]+):\\s+(.*)$', match, flags=re.MULTILINE)])\n                #print attrs\n                memory_slot_dicts.append(attrs)\n            total_memory_gb = 0\n            total_slots_filled = 0\n            total_slots = len(memory_slot_dicts)\n            memory_types = set()\n            memory_forms = set()\n            memory_speeds = set()\n            for memory_dict in memory_slot_dicts:\n                try:\n                    size = int(round(float(re.findall(r'([0-9]+)\\s+MB', memory_dict['Size'])[0])/1024.))\n                    #print size\n                    total_memory_gb += size\n                    total_slots_filled += 1\n                except IndexError:\n                    pass\n                _v = memory_dict['Type']\n                if _v != 'Unknown':\n                    memory_types.add(_v)\n                _v = memory_dict['Form Factor']\n                if _v != 'Unknown':\n                    memory_forms.add(_v)\n                #_v = memory_dict['Speed']\n                #if _v != 'Unknown':\n                    #memory_speeds.add(_v)\n\n        # Storage\n        if hdd:\n            #cmd = 'ls /dev/*d* | grep \"/dev/[a-z]+d[a-z]$\"'\n            cmd = 'find /dev -maxdepth 1 | grep -E \"/dev/[a-z]+d[a-z]$\"'\n            devices = map(str.strip, r.run(cmd).split('\\n'))\n            total_drives = len(devices)\n            total_physical_storage_gb = 0\n            total_logical_storage_gb = 0\n            drive_transports = set()\n            for device in devices:\n                #cmd = 'udisks --show-info %s |grep -i \"  size:\"' % (device)\n                cmd = 'udisksctl info -b %s |grep -i \"  size:\"' % (device)\n                ret = r.run(cmd)\n                size_bytes = float(re.findall(r'size:\\s*([0-9]+)', ret, flags=re.I)[0].strip())\n                size_gb = int(round(size_bytes/1024/1024/1024))\n                #print device, size_gb\n                total_physical_storage_gb += size_gb\n\n                with self.settings(warn_only=True):\n                    cmd = 'hdparm -I %s|grep -i \"Transport:\"' % device\n                    ret = self.sudo(cmd)\n                    if ret and not ret.return_code:\n                        drive_transports.add(ret.split('Transport:')[-1].strip())\n\n            cmd = \"df | grep '^/dev/[mhs]d*' | awk '{{s+=$2}} END {{print s/1048576}}'\"\n            ret = r.run(cmd)\n            total_logical_storage_gb = float(ret)\n\n        if cpu:\n            print('-'*80)\n            print('CPU')\n            print('-'*80)\n            type_str = ', '.join(['%s x %i' % (_type, _count) for _type, _count in cores.items()])\n            print('Cores: %i' % sum(cores.values()))\n            print('Types: %s' % type_str)\n\n        if memory:\n            print('-'*80)\n            print('MEMORY')\n            print('-'*80)\n            print('Total: %s GB' % total_memory_gb)\n            print('Type: %s' % list_to_str_or_unknown(memory_types))\n            print('Form: %s' % list_to_str_or_unknown(memory_forms))\n            print('Speed: %s' % list_to_str_or_unknown(memory_speeds))\n            print('Slots: %i (%i filled, %i empty)' % (total_slots, total_slots_filled, total_slots - total_slots_filled))\n\n        if hdd:\n            print('-'*80)\n            print('STORAGE')\n            print('-'*80)\n            print('Total physical drives: %i' % total_drives)\n            print('Total physical storage: %s GB' % total_physical_storage_gb)\n            print('Total logical storage: %s GB' % total_logical_storage_gb)\n            print('Types: %s' % list_to_str_or_unknown(drive_transports))\n```"
            ],
            [
                744,
                "python",
                "Controller.start",
                "```python\ndef start(self):\n        \"\"\"Start the controller.\"\"\"\n\n        if self.mode == \"manual\":\n            return\n\n        if self.ipython_dir != '~/.ipython':\n            self.ipython_dir = os.path.abspath(os.path.expanduser(self.ipython_dir))\n\n        if self.log:\n            stdout = open(os.path.join(self.ipython_dir, \"{0}.controller.out\".format(self.profile)), 'w')\n            stderr = open(os.path.join(self.ipython_dir, \"{0}.controller.err\".format(self.profile)), 'w')\n        else:\n            stdout = open(os.devnull, 'w')\n            stderr = open(os.devnull, 'w')\n\n        try:\n            opts = [\n                'ipcontroller',\n                '' if self.ipython_dir == '~/.ipython' else '--ipython-dir={}'.format(self.ipython_dir),\n                self.interfaces if self.interfaces is not None else '--ip=*',\n                '' if self.profile == 'default' else '--profile={0}'.format(self.profile),\n                '--reuse' if self.reuse else '',\n                '--location={}'.format(self.public_ip) if self.public_ip else '',\n                '--port={}'.format(self.port) if self.port is not None else ''\n            ]\n            if self.port_range is not None:\n                opts += [\n                    '--HubFactory.hb={0},{1}'.format(self.hb_ping, self.hb_pong),\n                    '--HubFactory.control={0},{1}'.format(self.control_client, self.control_engine),\n                    '--HubFactory.mux={0},{1}'.format(self.mux_client, self.mux_engine),\n                    '--HubFactory.task={0},{1}'.format(self.task_client, self.task_engine)\n                ]\n            logger.debug(\"Starting ipcontroller with '{}'\".format(' '.join([str(x) for x in opts])))\n            self.proc = subprocess.Popen(opts, stdout=stdout, stderr=stderr, preexec_fn=os.setsid)\n        except FileNotFoundError:\n            msg = \"Could not find ipcontroller. Please make sure that ipyparallel is installed and available in your env\"\n            logger.error(msg)\n            raise ControllerError(msg)\n        except Exception as e:\n            msg = \"IPPController failed to start: {0}\".format(e)\n            logger.error(msg)\n            raise ControllerError(msg)\n```"
            ],
            [
                977,
                "python",
                "Resource.launch",
                "```python\ndef launch(self, workflow_job_template=None, monitor=False, wait=False,\n               timeout=None, extra_vars=None, **kwargs):\n        \"\"\"Launch a new workflow job based on a workflow job template.\n\n        Creates a new workflow job in Ansible Tower, starts it, and\n        returns back an ID in order for its status to be monitored.\n\n        =====API DOCS=====\n        Launch a new workflow job based on a workflow job template.\n\n        :param workflow_job_template: Primary key or name of the workflow job template to launch new job.\n        :type workflow_job_template: str\n        :param monitor: Flag that if set, immediately calls ``monitor`` on the newly launched workflow job rather\n                        than exiting with a success.\n        :type monitor: bool\n        :param wait: Flag that if set, monitor the status of the workflow job, but do not print while job is\n                     in progress.\n        :type wait: bool\n        :param timeout: If provided with ``monitor`` flag set, this attempt will time out after the given number\n                        of seconds.\n        :type timeout: int\n        :param extra_vars: yaml formatted texts that contains extra variables to pass on.\n        :type extra_vars: array of strings\n        :param `**kwargs`: Fields needed to create and launch a workflow job.\n        :returns: Result of subsequent ``monitor`` call if ``monitor`` flag is on; Result of subsequent ``wait``\n                  call if ``wait`` flag is on; loaded JSON output of the job launch if none of the two flags are on.\n        :rtype: dict\n\n        =====API DOCS=====\n        \"\"\"\n        if extra_vars is not None and len(extra_vars) > 0:\n            kwargs['extra_vars'] = parser.process_extra_vars(extra_vars)\n\n        debug.log('Launching the workflow job.', header='details')\n        self._pop_none(kwargs)\n        post_response = client.post('workflow_job_templates/{0}/launch/'.format(\n            workflow_job_template), data=kwargs).json()\n\n        workflow_job_id = post_response['id']\n        post_response['changed'] = True\n\n        if monitor:\n            return self.monitor(workflow_job_id, timeout=timeout)\n        elif wait:\n            return self.wait(workflow_job_id, timeout=timeout)\n\n        return post_response\n```"
            ],
            [
                856,
                "python",
                "color_scale",
                "```python\ndef color_scale(color, level):\n    \"\"\"\n    Scale RGB tuple by level, 0 - 256\n    \"\"\"\n    return tuple([int(i * level) >> 8 for i in list(color)])\n```"
            ],
            [
                730,
                "python",
                "EVM.CALLDATALOAD",
                "```python\ndef CALLDATALOAD(self, offset):\n        \"\"\"Get input data of current environment\"\"\"\n\n        if issymbolic(offset):\n            if solver.can_be_true(self._constraints, offset == self._used_calldata_size):\n                self.constraints.add(offset == self._used_calldata_size)\n            raise ConcretizeArgument(1, policy='SAMPLED')\n\n        self._use_calldata(offset, 32)\n\n        data_length = len(self.data)\n\n        bytes = []\n        for i in range(32):\n            try:\n                c = Operators.ITEBV(8, offset + i < data_length, self.data[offset + i], 0)\n            except IndexError:\n                # offset + i is concrete and outside data\n                c = 0\n\n            bytes.append(c)\n        return Operators.CONCAT(256, *bytes)\n```"
            ],
            [
                137,
                "python",
                "cornice_enable_openapi_view",
                "```python\ndef cornice_enable_openapi_view(\n        config,\n        api_path='/api-explorer/swagger.json',\n        permission=NO_PERMISSION_REQUIRED,\n        route_factory=None, **kwargs):\n    \"\"\"\n    :param config:\n        Pyramid configurator object\n    :param api_path:\n        where to expose swagger JSON definition view\n    :param permission:\n        pyramid permission for those views\n    :param route_factory:\n        factory for context object for those routes\n    :param kwargs:\n        kwargs that will be passed to CorniceSwagger's `generate()`\n\n    This registers and configures the view that serves api definitions\n    \"\"\"\n    config.registry.settings['cornice_swagger.spec_kwargs'] = kwargs\n    config.add_route('cornice_swagger.open_api_path', api_path,\n                     factory=route_factory)\n    config.add_view('cornice_swagger.views.open_api_json_view',\n                    renderer='json', permission=permission,\n                    route_name='cornice_swagger.open_api_path')\n```"
            ],
            [
                48,
                "python",
                "tui.shorthelp",
                "```python\ndef shorthelp(self, width=0):\n        \"\"\"Return brief help containing Title and usage instructions.\n        ARGS:\n        width = 0 <int>:\n            Maximum allowed page width. 0 means use default from\n            self.iMaxHelpWidth.\n\n        \"\"\"\n        out = []\n        out.append(self._wrap(self.docs['title'], width=width))\n        if self.docs['description']:\n            out.append(self._wrap(self.docs['description'], indent=2, width=width))\n        out.append('')\n        out.append(self._wrapusage(width=width))\n        out.append('')\n        return '\\n'.join(out)\n```"
            ],
            [
                413,
                "python",
                "RecurringScheduleComponent.daily_periods",
                "```python\ndef daily_periods(self, range_start=datetime.date.min, range_end=datetime.date.max, exclude_dates=tuple()):\n        \"\"\"Returns an iterator of Period tuples for every day this schedule is in effect, between range_start\n        and range_end.\"\"\"\n        tz = self.timezone\n        period = self.period\n        weekdays = self.weekdays\n\n        current_date = max(range_start, self.start_date)\n        end_date = range_end\n        if self.end_date:\n            end_date = min(end_date, self.end_date)\n\n        while current_date <= end_date:\n            if current_date.weekday() in weekdays and current_date not in exclude_dates:\n                yield Period(\n                    tz.localize(datetime.datetime.combine(current_date, period.start)),\n                    tz.localize(datetime.datetime.combine(current_date, period.end))\n                )\n            current_date += datetime.timedelta(days=1)\n```"
            ],
            [
                559,
                "python",
                "Connection.get_headers",
                "```python\ndef get_headers(self):\n        \"\"\" Get headers.\n\n        Returns:\n            tuple: Headers\n        \"\"\"\n        headers = {\n            \"User-Agent\": \"kFlame 1.0\"\n        }\n\n        password_url = self._get_password_url()\n        if password_url and password_url in self._settings[\"authorizations\"]:\n            headers[\"Authorization\"] = self._settings[\"authorizations\"][password_url]\n\n        return headers\n```"
            ],
            [
                78,
                "python",
                "CQHttp.set_group_whole_ban",
                "```python\ndef set_group_whole_ban(self, *, group_id, enable=True):\n        \"\"\"\n        \u7fa4\u7ec4\u5168\u5458\u7981\u8a00\n\n        ------------\n\n        :param int group_id: \u7fa4\u53f7\n        :param bool enable: \u662f\u5426\u7981\u8a00\n        :return: None\n        :rtype: None\n        \"\"\"\n        return super().__getattr__('set_group_whole_ban') \\\n            (group_id=group_id, enable=enable)\n```"
            ],
            [
                974,
                "python",
                "MemSizeLRUCache.delete",
                "```python\ndef delete(self, key):\n        \"\"\"\n        >>> c = MemSizeLRUCache()\n        >>> c.put(1, 1)\n        >>> c.mem()\n        24\n        >>> c.delete(1)\n        >>> c.mem()\n        0\n        \"\"\"\n        (_value, mem) = LRUCache.get(self, key)\n        self._mem -= mem\n        LRUCache.delete(self, key)\n```"
            ],
            [
                954,
                "python",
                "phase_identification_parameter_phase",
                "```python\ndef phase_identification_parameter_phase(d2P_dVdT, V=None, dP_dT=None, dP_dV=None, d2P_dV2=None):\n    r'''Uses the Phase Identification Parameter concept developed in [1]_ and \n    [2]_ to determine if a chemical is a solid, liquid, or vapor given the \n    appropriate thermodynamic conditions.\n\n    The criteria for liquid is PIP > 1; for vapor, PIP <= 1.\n\n    For solids, PIP(solid) is defined to be d2P_dVdT. If it is larger than 0, \n    the species is a solid. It is less than 0 for all liquids and gases.\n\n    Parameters\n    ----------\n    d2P_dVdT : float\n        Second derivative of `P` with respect to both `V` and `T`, [Pa*mol/m^3/K]\n    V : float, optional\n        Molar volume at `T` and `P`, [m^3/mol]\n    dP_dT : float, optional\n        Derivative of `P` with respect to `T`, [Pa/K]\n    dP_dV : float, optional\n        Derivative of `P` with respect to `V`, [Pa*mol/m^3]\n    d2P_dV2 : float, optionsl\n        Second derivative of `P` with respect to `V`, [Pa*mol^2/m^6]\n\n    Returns\n    -------\n    phase : str\n        Either 's', 'l' or 'g'\n    \n    Notes\n    -----\n    The criteria for being a solid phase is checked first, which only\n    requires d2P_dVdT. All other inputs are optional for this reason.\n    However, an exception will be raised if the other inputs become \n    needed to determine if a species is a liquid or a gas.\n        \n    Examples\n    --------\n    Calculated for hexane from the PR EOS at 299 K and 1 MPa (liquid):\n    \n    >>> phase_identification_parameter_phase(-20518995218.2, 0.000130229900874, \n    ... 582169.397484, -3.66431747236e+12, 4.48067893805e+17)\n    'l'\n\n    References\n    ----------\n    .. [1] Venkatarathnam, G., and L. R. Oellrich. \"Identification of the Phase\n       of a Fluid Using Partial Derivatives of Pressure, Volume, and \n       Temperature without Reference to Saturation Properties: Applications in \n       Phase Equilibria Calculations.\" Fluid Phase Equilibria 301, no. 2 \n       (February 25, 2011): 225-33. doi:10.1016/j.fluid.2010.12.001.\n    .. [2] Jayanti, Pranava Chaitanya, and G. Venkatarathnam. \"Identification\n       of the Phase of a Substance from the Derivatives of Pressure, Volume and\n       Temperature, without Prior Knowledge of Saturation Properties: Extension\n       to Solid Phase.\" Fluid Phase Equilibria 425 (October 15, 2016): 269-277.\n       doi:10.1016/j.fluid.2016.06.001.\n    '''\n    if d2P_dVdT > 0:\n        return 's'\n    else:\n        PIP = phase_identification_parameter(V=V, dP_dT=dP_dT, dP_dV=dP_dV, \n                                             d2P_dV2=d2P_dV2, d2P_dVdT=d2P_dVdT)\n        return 'l' if PIP > 1 else 'g'\n```"
            ],
            [
                156,
                "python",
                "profileit",
                "```python\ndef profileit(field='cumulative'):\n    \"\"\"\n    \u6d4b\u8bd5\u51fd\u6570\u8fd0\u884c\u6d88\u8017\u60c5\u51b5\n\n    :param field: \u8f93\u51fa\u5185\u5bb9\u6392\u5e8f\u65b9\u5f0f\u3002\n        \u53ef\u9009\u53c2\u6570\u4e3a \"stdname\", \"calls\", \"time\", \"cumulative\"\n    \"\"\"\n    def wrapper(func):\n        @wraps(func)\n        def inner(*args, **kwargs):\n            pro = Profile()\n            pro.runcall(func, *args, **kwargs)\n            stats = Stats(pro)\n            stats.strip_dirs()\n            stats.sort_stats(field)\n            print(\"Profile for {}()\".format(func.__name__))\n            stats.print_stats()\n            stats.print_callers()\n        return inner\n    return wrapper\n```"
            ],
            [
                971,
                "python",
                "LoadBalancer.create",
                "```python\ndef create(self, *args, **kwargs):\n        \"\"\"\n        Creates a new LoadBalancer.\n\n        Note: Every argument and parameter given to this method will be\n        assigned to the object.\n\n        Args:\n            name (str): The Load Balancer's name\n            region (str): The slug identifier for a DigitalOcean region\n            algorithm (str, optional): The load balancing algorithm to be\n                used. Currently, it must be either \"round_robin\" or\n                \"least_connections\"\n            forwarding_rules (obj:`list`): A list of `ForwrdingRules` objects\n            health_check (obj, optional): A `HealthCheck` object\n            sticky_sessions (obj, optional): A `StickySessions` object\n            redirect_http_to_https (bool, optional): A boolean indicating\n                whether HTTP requests to the Load Balancer should be\n                redirected to HTTPS\n            droplet_ids (obj:`list` of `int`): A list of IDs representing\n                Droplets to be added to the Load Balancer (mutually\n                exclusive with 'tag')\n            tag (str): A string representing a DigitalOcean Droplet tag\n                (mutually exclusive with 'droplet_ids')\n        \"\"\"\n        rules_dict = [rule.__dict__ for rule in self.forwarding_rules]\n\n        params = {'name': self.name, 'region': self.region,\n                  'forwarding_rules': rules_dict,\n                  'redirect_http_to_https': self.redirect_http_to_https}\n\n        if self.droplet_ids and self.tag:\n            raise ValueError('droplet_ids and tag are mutually exclusive args')\n        elif self.tag:\n            params['tag'] = self.tag\n        else:\n            params['droplet_ids'] = self.droplet_ids\n\n        if self.algorithm:\n            params['algorithm'] = self.algorithm\n        if self.health_check:\n            params['health_check'] = self.health_check.__dict__\n        if self.sticky_sessions:\n            params['sticky_sessions'] = self.sticky_sessions.__dict__\n\n        data = self.get_data('load_balancers/', type=POST, params=params)\n\n        if data:\n            self.id = data['load_balancer']['id']\n            self.ip = data['load_balancer']['ip']\n            self.algorithm = data['load_balancer']['algorithm']\n            self.health_check = HealthCheck(\n                **data['load_balancer']['health_check'])\n            self.sticky_sessions = StickySesions(\n                **data['load_balancer']['sticky_sessions'])\n            self.droplet_ids = data['load_balancer']['droplet_ids']\n            self.status = data['load_balancer']['status']\n            self.created_at = data['load_balancer']['created_at']\n\n        return self\n```"
            ],
            [
                894,
                "python",
                "PostgresDB.rename",
                "```python\ndef rename(self, from_name, to_name):\n        \"\"\"Renames an existing database.\"\"\"\n        log.info('renaming database from %s to %s' % (from_name, to_name))\n        self._run_stmt('alter database %s rename to %s' % (from_name, to_name))\n```"
            ],
            [
                567,
                "python",
                "XmlElement.siblings",
                "```python\ndef siblings(self, name=None):\n        \"\"\"\n        Yields all siblings of this node (not including the node itself).\n\n        :param name: If specified, only consider elements with this tag name\n        \"\"\"\n        if self.parent and self.index:\n            for c in self.parent._children:\n                if c.index != self.index and (name is None or name == c.tagname):\n                    yield c\n```"
            ],
            [
                536,
                "python",
                "KNNAnomalyClassifierRegion._recomputeRecordFromKNN",
                "```python\ndef _recomputeRecordFromKNN(self, record):\n    \"\"\"\n    returns the classified labeling of record\n    \"\"\"\n    inputs = {\n      \"categoryIn\": [None],\n      \"bottomUpIn\": self._getStateAnomalyVector(record),\n    }\n\n    outputs = {\"categoriesOut\": numpy.zeros((1,)),\n               \"bestPrototypeIndices\":numpy.zeros((1,)),\n               \"categoryProbabilitiesOut\":numpy.zeros((1,))}\n\n    # Only use points before record to classify and after the wait period.\n    classifier_indexes = numpy.array(\n        self._knnclassifier.getParameter('categoryRecencyList'))\n    valid_idx = numpy.where(\n        (classifier_indexes >= self.getParameter('trainRecords')) &\n        (classifier_indexes < record.ROWID)\n      )[0].tolist()\n\n    if len(valid_idx) == 0:\n      return None\n\n    self._knnclassifier.setParameter('inferenceMode', None, True)\n    self._knnclassifier.setParameter('learningMode', None, False)\n    self._knnclassifier.compute(inputs, outputs)\n    self._knnclassifier.setParameter('learningMode', None, True)\n\n    classifier_distances = self._knnclassifier.getLatestDistances()\n    valid_distances = classifier_distances[valid_idx]\n    if valid_distances.min() <= self._classificationMaxDist:\n      classifier_indexes_prev = classifier_indexes[valid_idx]\n      rowID = classifier_indexes_prev[valid_distances.argmin()]\n      indexID = numpy.where(classifier_indexes == rowID)[0][0]\n      category = self._knnclassifier.getCategoryList()[indexID]\n      return category\n    return None\n```"
            ],
            [
                370,
                "python",
                "timestamp",
                "```python\ndef timestamp(t = None, forfilename=False):\n    \"\"\"Returns a human-readable timestamp given a Unix timestamp 't' or\n    for the current time. The Unix timestamp is the number of seconds since\n    start of epoch (1970-01-01 00:00:00).\n    When forfilename is True, then spaces and semicolons are replace with\n    hyphens. The returned string is usable as a (part of a) filename. \"\"\"\n\n    datetimesep = ' '\n    timesep     = ':'\n    if forfilename:\n        datetimesep = '-'\n        timesep     = '-'\n\n    return time.strftime('%Y-%m-%d' + datetimesep +\n                         '%H' + timesep + '%M' + timesep + '%S',\n                         time.localtime(t))\n```"
            ],
            [
                953,
                "python",
                "DeploySatchel.lock",
                "```python\ndef lock(self):\n        \"\"\"\n        Marks the remote server as currently being deployed to.\n        \"\"\"\n        self.init()\n        r = self.local_renderer\n        if self.file_exists(r.env.lockfile_path):\n            raise exceptions.AbortDeployment('Lock file %s exists. Perhaps another deployment is currently underway?' % r.env.lockfile_path)\n        else:\n            self.vprint('Locking %s.' % r.env.lockfile_path)\n            r.env.hostname = socket.gethostname()\n            r.run_or_local('echo \"{hostname}\" > {lockfile_path}')\n```"
            ],
            [
                808,
                "python",
                "md_dimension_info",
                "```python\ndef md_dimension_info(name, node):\n    \"\"\"Extract metadata Dimension Info from an xml node\"\"\"\n    def _get_value(child_name):\n        return getattr(node.find(child_name), 'text', None)\n\n    resolution = _get_value('resolution')\n    defaultValue = node.find(\"defaultValue\")\n    strategy = defaultValue.find(\"strategy\") if defaultValue is not None else None\n    strategy = strategy.text if strategy is not None else None\n    return DimensionInfo(\n        name,\n        _get_value('enabled') == 'true',\n        _get_value('presentation'),\n        int(resolution) if resolution else None,\n        _get_value('units'),\n        _get_value('unitSymbol'),\n        strategy,\n        _get_value('attribute'),\n        _get_value('endAttribute'),\n        _get_value('referenceValue'),\n        _get_value('nearestMatchEnabled')\n    )\n```"
            ],
            [
                323,
                "python",
                "TicTacToe.k_in_row",
                "```python\ndef k_in_row(self, board, move, player, (delta_x, delta_y)):\n        \"Return true if there is a line through move on board for player.\"\n        x, y = move\n        n = 0 # n is number of moves in row\n        while board.get((x, y)) == player:\n            n += 1\n            x, y = x + delta_x, y + delta_y\n        x, y = move\n        while board.get((x, y)) == player:\n            n += 1\n            x, y = x - delta_x, y - delta_y\n        n -= 1 # Because we counted move itself twice\n        return n >= self.k\n```"
            ],
            [
                184,
                "python",
                "keypoint_random_resize",
                "```python\ndef keypoint_random_resize(image, annos, mask=None, zoom_range=(0.8, 1.2)):\n    \"\"\"Randomly resize an image and corresponding keypoints.\n    The height and width of image will be changed independently, so the scale will be changed.\n\n    Parameters\n    -----------\n    image : 3 channel image\n        The given image for augmentation.\n    annos : list of list of floats\n        The keypoints annotation of people.\n    mask : single channel image or None\n        The mask if available.\n    zoom_range : tuple of two floats\n        The minimum and maximum factor to zoom in or out, e.g (0.5, 1) means zoom out 1~2 times.\n\n    Returns\n    ----------\n    preprocessed image, annos, mask\n\n    \"\"\"\n    height = image.shape[0]\n    width = image.shape[1]\n    _min, _max = zoom_range\n    scalew = np.random.uniform(_min, _max)\n    scaleh = np.random.uniform(_min, _max)\n\n    neww = int(width * scalew)\n    newh = int(height * scaleh)\n\n    dst = cv2.resize(image, (neww, newh), interpolation=cv2.INTER_AREA)\n    if mask is not None:\n        mask = cv2.resize(mask, (neww, newh), interpolation=cv2.INTER_AREA)\n    # adjust meta data\n    adjust_joint_list = []\n    for joint in annos:  # TODO : speed up with affine transform\n        adjust_joint = []\n        for point in joint:\n            if point[0] < -100 or point[1] < -100:\n                adjust_joint.append((-1000, -1000))\n                continue\n            adjust_joint.append((int(point[0] * scalew + 0.5), int(point[1] * scaleh + 0.5)))\n        adjust_joint_list.append(adjust_joint)\n    if mask is not None:\n        return dst, adjust_joint_list, mask\n    else:\n        return dst, adjust_joint_list, None\n```"
            ],
            [
                26,
                "python",
                "numpy_array_2d_to_fits",
                "```python\ndef numpy_array_2d_to_fits(array_2d, file_path, overwrite=False):\n    \"\"\"Write a 2D NumPy array to a .fits file.\n\n    Before outputting a NumPy array, the array is flipped upside-down using np.flipud. This is so that the arrays \\\n    appear the same orientation as .fits files loaded in DS9.\n\n    Parameters\n    ----------\n    array_2d : ndarray\n        The 2D array that is written to fits.\n    file_path : str\n        The full path of the file that is output, including the file name and '.fits' extension.\n    overwrite : bool\n        If True and a file already exists with the input file_path the .fits file is overwritten. If False, an error \\\n        will be raised.\n\n    Returns\n    -------\n    None\n\n    Examples\n    --------\n    array_2d = np.ones((5,5))\n    numpy_array_to_fits(array=array_2d, file_path='/path/to/file/filename.fits', overwrite=True)\n    \"\"\"\n    if overwrite and os.path.exists(file_path):\n        os.remove(file_path)\n\n    new_hdr = fits.Header()\n    hdu = fits.PrimaryHDU(np.flipud(array_2d), new_hdr)\n    hdu.writeto(file_path)\n```"
            ],
            [
                381,
                "python",
                "StreamSASLHandler._process_sasl_challenge",
                "```python\ndef _process_sasl_challenge(self, stream, element):\n        \"\"\"Process incoming <sasl:challenge/> element.\n\n        [initiating entity only]\n        \"\"\"\n        if not self.authenticator:\n            logger.debug(\"Unexpected SASL challenge\")\n            return False\n\n        content = element.text.encode(\"us-ascii\")\n        ret = self.authenticator.challenge(a2b_base64(content))\n        if isinstance(ret, sasl.Response):\n            element = ElementTree.Element(RESPONSE_TAG)\n            element.text = ret.encode()\n        else:\n            element = ElementTree.Element(ABORT_TAG)\n\n        stream.write_element(element)\n\n        if isinstance(ret, sasl.Failure):\n            stream.disconnect()\n            raise SASLAuthenticationFailed(\"SASL authentication failed\")\n\n        return True\n```"
            ]
        ]
    },
    "Validation-python MRR (bs=1,000)": 0.025022236373342815,
    "Eval": {
        "Primary MRR": 0.03051706969427204,
        "FuncName MRR": 0.03077585362028777
    }
}
